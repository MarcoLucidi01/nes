AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6109 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2020  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 05-jan-2020
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 written by Frank A. Kingswood
                        ; The assembler as65_142.zip can be obtained from my GitHub repository 
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        ;   04-dec-2017  fixed BRK only tested with interrupts enabled
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
                        ;                is shifted out
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0000 =                  load_data_direct = 0
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $52 (82) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
0000 =                  zero_page = $0
                        
                        ;data_segment memory start address, $7B (123) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13.1kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
4020 =                  code_segment = $4020
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0002 =                  disable_decimal = 2
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0000 =                          org zero_page
                        ;break test interrupt save
0000 =                  irq_a   ds  1               ;a register
0001 =                  irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
0002 =                  zpt                         ;6 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
0002 =                  adfc    ds  1               ;carry flag before op
0003 =                  ad1     ds  1               ;operand 1 - accumulator
0004 =                  ad2     ds  1               ;operand 2 - memory / immediate
0005 =                  adrl    ds  1               ;expected result bits 0-7
0006 =                  adrh    ds  1               ;expected result bit 8 (carry)
0007 =                  adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0008 =                  sb2     ds  1               ;operand 2 complemented for subtract
0009 =                  zp_bss
0009 =                  zps     db  $80,1           ;additional shift pattern to test zero result & flag
000b =                  zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000f =                  zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0010 =                  zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0014 =                  zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0018 =                  zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
001c =                  ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
001e =                          dw  abs1+1
0020 =                          dw  abs1+2
0022 =                          dw  abs1+3
0024 =                          dw  abs7f
0026 =                  inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0028 =                  indt    dw  abst            ;indirect pointer to store area in absolute memory
002a =                          dw  abst+1
002c =                          dw  abst+2
002e =                          dw  abst+3
0030 =                  inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0032 =                  indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0034 =                          dw  absAN+1
0036 =                          dw  absAN+2
0038 =                          dw  absAN+3
003a =                  indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
003c =                          dw  absEO+1
003e =                          dw  absEO+2
0040 =                          dw  absEO+3
0042 =                  indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0044 =                          dw  absOR+1
0046 =                          dw  absOR+2
0048 =                          dw  absOR+3
                        ;add/subtract indirect pointers
004a =                  adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
004c =                  sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
004e =                  adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0050 =                  sbiy2   dw  sba2-$ff
0052 =                  zp_bss_end
                           
0200 =                          org data_segment
0200 =                  test_case   ds  1           ;current test number
0201 =                  ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 =                  abst                        ;6 bytes store/modify test area
0203 =                  ada2    ds  1               ;operand 2
0204 =                  sba2    ds  1               ;operand 2 complemented for subtract
0205 =                          ds  4               ;fill remaining bytes
0209 =                  data_bss
                            if load_data_direct = 1
                        ex_andi and #0              ;execute immediate opcodes
                                rts
                        ex_eori eor #0              ;execute immediate opcodes
                                rts
                        ex_orai ora #0              ;execute immediate opcodes
                                rts
                        ex_adci adc #0              ;execute immediate opcodes
                                rts
                        ex_sbci sbc #0              ;execute immediate opcodes
                                rts
                            else
0209 =                  ex_andi ds  3
020c =                  ex_eori ds  3
020f =                  ex_orai ds  3
0212 =                  ex_adci ds  3
0215 =                  ex_sbci ds  3
                            endif
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
0218 =                  abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021c =                  abs7f   db  $7f             ;test pattern for compare
                        ;loads
021d =                  fLDx    db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
0221 =                  rASL                                ;expected result ASL & ROL -carry
0221 =                  rROL    db  0,2,$86,$04,$82,0
0227 =                  rROLc   db  1,3,$87,$05,$83,1       ;expected result ROL +carry
022d =                  rLSR                                ;expected result LSR & ROR -carry
022d =                  rROR    db  $40,0,$61,$41,$20,0
0233 =                  rRORc   db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
0239 =                  fASL                                ;expected flags for shifts
0239 =                  fROL    db  fzc,0,fnc,fc,fn,fz      ;no carry in
023f =                  fROLc   db  fc,0,fnc,fc,fn,0        ;carry in 
0245 =                  fLSR 
0245 =                  fROR    db  0,fzc,fc,0,fc,fz        ;no carry in
024b =                  fRORc   db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
0251 =                  rINC    db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
0256 =                  fINC    db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
025b =                  absOR   db  0,$1f,$71,$80           ;test pattern for OR
025f =                  absAN   db  $0f,$ff,$7f,$80         ;test pattern for AND
0263 =                  absEO   db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
0267 =                  absORa  db  0,$f1,$1f,0             ;test pattern for OR
026b =                  absANa  db  $f0,$ff,$ff,$ff         ;test pattern for AND
026f =                  absEOa  db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
0273 =                  absrlo  db  0,$ff,$7f,$80
0277 =                  absflo  db  fz,fn,0,fn
027b =                  data_bss_end
                        
                        
                                code
4020 =                          org code_segment
4020 : d8               start   cld
4021 : a2ff                     ldx #$ff
4023 : 9a                       txs
4024 : a900                     lda #0          ;*** test 0 = initialize
4026 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                            
                        ;pretest small branch offset
4029 : a205                     ldx #5
402b : 4c5340                   jmp psb_test
402e :                  psb_bwok
402e : a005                     ldy #5
4030 : d008                     bne psb_forw
                                trap        ;branch should be taken
4032 : 4c3240          >        jmp *           ;failed anyway
                        
4035 : 88                       dey         ;forward landing zone
4036 : 88                       dey
4037 : 88                       dey
4038 : 88                       dey
4039 : 88                       dey
403a :                  psb_forw
403a : 88                       dey
403b : 88                       dey
403c : 88                       dey
403d : 88                       dey
403e : 88                       dey
403f : f017                     beq psb_fwok
                                trap        ;forward offset
4041 : 4c4140          >        jmp *           ;failed anyway
                        
                        
4044 : ca                       dex         ;backward landing zone
4045 : ca                       dex
4046 : ca                       dex
4047 : ca                       dex
4048 : ca                       dex
4049 :                  psb_back
4049 : ca                       dex
404a : ca                       dex
404b : ca                       dex
404c : ca                       dex
404d : ca                       dex
404e : f0de                     beq psb_bwok
                                trap        ;backward offset
4050 : 4c5040          >        jmp *           ;failed anyway
                        
4053 :                  psb_test
4053 : d0f4                     bne psb_back
                                trap        ;branch should be taken
4055 : 4c5540          >        jmp *           ;failed anyway
                        
4058 :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
4058 : a248                     ldx #zp_end-zp_init-1
405a : bd7975           ld_zp   lda zp_init,x
405d : 9509                     sta zp_bss,x
405f : ca                       dex
4060 : 10f8                     bpl ld_zp
4062 : a271                     ldx #data_end-data_init-1
4064 : bdc275           ld_data lda data_init,x
4067 : 9d0902                   sta data_bss,x
406a : ca                       dex
406b : 10f7                     bpl ld_data
                              if ROM_vectors = 1
406d : a205                     ldx #5
406f : bd3476           ld_vect lda vec_init,x
4072 : 9dfaff                   sta vec_bss,x
4075 : ca                       dex
4076 : 10f7                     bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
4078 : ad0002          >            lda test_case   ;previous test
407b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
407d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
407f : a901            >            lda #test_num   ;*** next tests' number
4081 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
4084 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
4086 :                  range_loop
4086 : 88                       dey             ;next relative address
4087 : 98                       tya
4088 : aa                       tax             ;precharge count to end of loop
4089 : 1008                     bpl range_fw    ;calculate relative address
408b : 18                       clc             ;avoid branch self or to relative address of branch
408c : 6902                     adc #2
408e : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
408f : ea                       nop
4090 : ea                       nop
4091 : ea                       nop
4092 : ea                       nop
4093 :                  range_fw
4093 : ea                       nop
4094 : ea                       nop
4095 : ea                       nop
4096 : ea                       nop
4097 : ea                       nop
4098 : 497f                     eor #$7f        ;complement except sign
409a : 8d2641                   sta range_adr   ;load into test target
409d : a900                     lda #0          ;should set zero flag in status register
409f : 4c2541                   jmp range_op
                                
40a2 : ca                       dex             ; offset landing zone - backward branch too far
40a3 : ca                       dex
40a4 : ca                       dex
40a5 : ca                       dex
40a6 : ca                       dex
                                ;relative address target field with branch under test in the middle
40a7 : ca                       dex             ;-128 - max backward
40a8 : ca                       dex
40a9 : ca                       dex
40aa : ca                       dex
40ab : ca                       dex
40ac : ca                       dex
40ad : ca                       dex
40ae : ca                       dex
40af : ca                       dex             ;-120
40b0 : ca                       dex
40b1 : ca                       dex
40b2 : ca                       dex
40b3 : ca                       dex
40b4 : ca                       dex
40b5 : ca                       dex
40b6 : ca                       dex
40b7 : ca                       dex
40b8 : ca                       dex
40b9 : ca                       dex             ;-110
40ba : ca                       dex
40bb : ca                       dex
40bc : ca                       dex
40bd : ca                       dex
40be : ca                       dex
40bf : ca                       dex
40c0 : ca                       dex
40c1 : ca                       dex
40c2 : ca                       dex
40c3 : ca                       dex             ;-100
40c4 : ca                       dex
40c5 : ca                       dex
40c6 : ca                       dex
40c7 : ca                       dex
40c8 : ca                       dex
40c9 : ca                       dex
40ca : ca                       dex
40cb : ca                       dex
40cc : ca                       dex
40cd : ca                       dex             ;-90
40ce : ca                       dex
40cf : ca                       dex
40d0 : ca                       dex
40d1 : ca                       dex
40d2 : ca                       dex
40d3 : ca                       dex
40d4 : ca                       dex
40d5 : ca                       dex
40d6 : ca                       dex
40d7 : ca                       dex             ;-80
40d8 : ca                       dex
40d9 : ca                       dex
40da : ca                       dex
40db : ca                       dex
40dc : ca                       dex
40dd : ca                       dex
40de : ca                       dex
40df : ca                       dex
40e0 : ca                       dex
40e1 : ca                       dex             ;-70
40e2 : ca                       dex
40e3 : ca                       dex
40e4 : ca                       dex
40e5 : ca                       dex
40e6 : ca                       dex
40e7 : ca                       dex
40e8 : ca                       dex
40e9 : ca                       dex
40ea : ca                       dex
40eb : ca                       dex             ;-60
40ec : ca                       dex
40ed : ca                       dex
40ee : ca                       dex
40ef : ca                       dex
40f0 : ca                       dex
40f1 : ca                       dex
40f2 : ca                       dex
40f3 : ca                       dex
40f4 : ca                       dex
40f5 : ca                       dex             ;-50
40f6 : ca                       dex
40f7 : ca                       dex
40f8 : ca                       dex
40f9 : ca                       dex
40fa : ca                       dex
40fb : ca                       dex
40fc : ca                       dex
40fd : ca                       dex
40fe : ca                       dex
40ff : ca                       dex             ;-40
4100 : ca                       dex
4101 : ca                       dex
4102 : ca                       dex
4103 : ca                       dex
4104 : ca                       dex
4105 : ca                       dex
4106 : ca                       dex
4107 : ca                       dex
4108 : ca                       dex
4109 : ca                       dex             ;-30
410a : ca                       dex
410b : ca                       dex
410c : ca                       dex
410d : ca                       dex
410e : ca                       dex
410f : ca                       dex
4110 : ca                       dex
4111 : ca                       dex
4112 : ca                       dex
4113 : ca                       dex             ;-20
4114 : ca                       dex
4115 : ca                       dex
4116 : ca                       dex
4117 : ca                       dex
4118 : ca                       dex
4119 : ca                       dex
411a : ca                       dex
411b : ca                       dex
411c : ca                       dex
411d : ca                       dex             ;-10
411e : ca                       dex
411f : ca                       dex
4120 : ca                       dex
4121 : ca                       dex
4122 : ca                       dex
4123 : ca                       dex
4124 : ca                       dex             ;-3
4125 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
4126 =                  range_adr   = *+1       ;modifiable relative address
4125 : f03e                     beq *+64        ;+64 if called without modification
4127 : ca                       dex             ;+0
4128 : ca                       dex
4129 : ca                       dex
412a : ca                       dex
412b : ca                       dex
412c : ca                       dex
412d : ca                       dex
412e : ca                       dex
412f : ca                       dex
4130 : ca                       dex
4131 : ca                       dex             ;+10
4132 : ca                       dex
4133 : ca                       dex
4134 : ca                       dex
4135 : ca                       dex
4136 : ca                       dex
4137 : ca                       dex
4138 : ca                       dex
4139 : ca                       dex
413a : ca                       dex
413b : ca                       dex             ;+20
413c : ca                       dex
413d : ca                       dex
413e : ca                       dex
413f : ca                       dex
4140 : ca                       dex
4141 : ca                       dex
4142 : ca                       dex
4143 : ca                       dex
4144 : ca                       dex
4145 : ca                       dex             ;+30
4146 : ca                       dex
4147 : ca                       dex
4148 : ca                       dex
4149 : ca                       dex
414a : ca                       dex
414b : ca                       dex
414c : ca                       dex
414d : ca                       dex
414e : ca                       dex
414f : ca                       dex             ;+40
4150 : ca                       dex
4151 : ca                       dex
4152 : ca                       dex
4153 : ca                       dex
4154 : ca                       dex
4155 : ca                       dex
4156 : ca                       dex
4157 : ca                       dex
4158 : ca                       dex
4159 : ca                       dex             ;+50
415a : ca                       dex
415b : ca                       dex
415c : ca                       dex
415d : ca                       dex
415e : ca                       dex
415f : ca                       dex
4160 : ca                       dex
4161 : ca                       dex
4162 : ca                       dex
4163 : ca                       dex             ;+60
4164 : ca                       dex
4165 : ca                       dex
4166 : ca                       dex
4167 : ca                       dex
4168 : ca                       dex
4169 : ca                       dex
416a : ca                       dex
416b : ca                       dex
416c : ca                       dex
416d : ca                       dex             ;+70
416e : ca                       dex
416f : ca                       dex
4170 : ca                       dex
4171 : ca                       dex
4172 : ca                       dex
4173 : ca                       dex
4174 : ca                       dex
4175 : ca                       dex
4176 : ca                       dex
4177 : ca                       dex             ;+80
4178 : ca                       dex
4179 : ca                       dex
417a : ca                       dex
417b : ca                       dex
417c : ca                       dex
417d : ca                       dex
417e : ca                       dex
417f : ca                       dex
4180 : ca                       dex
4181 : ca                       dex             ;+90
4182 : ca                       dex
4183 : ca                       dex
4184 : ca                       dex
4185 : ca                       dex
4186 : ca                       dex
4187 : ca                       dex
4188 : ca                       dex
4189 : ca                       dex
418a : ca                       dex
418b : ca                       dex             ;+100
418c : ca                       dex
418d : ca                       dex
418e : ca                       dex
418f : ca                       dex
4190 : ca                       dex
4191 : ca                       dex
4192 : ca                       dex
4193 : ca                       dex
4194 : ca                       dex
4195 : ca                       dex             ;+110
4196 : ca                       dex
4197 : ca                       dex
4198 : ca                       dex
4199 : ca                       dex
419a : ca                       dex
419b : ca                       dex
419c : ca                       dex
419d : ca                       dex
419e : ca                       dex
419f : ca                       dex             ;+120
41a0 : ca                       dex
41a1 : ca                       dex
41a2 : ca                       dex
41a3 : ca                       dex
41a4 : ca                       dex
41a5 : ca                       dex
41a6 : ea                       nop             ;offset landing zone - forward branch too far
41a7 : ea                       nop
41a8 : ea                       nop
41a9 : ea                       nop
41aa : ea                       nop
41ab : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
41ad : 4cad41          >        jmp *           ;failed anyway
                        
41b0 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
41b1 : ea                       nop
41b2 : ea                       nop
41b3 : ea                       nop
41b4 : ea                       nop
41b5 :                  range_ok
41b5 : ea                       nop
41b6 : ea                       nop
41b7 : ea                       nop
41b8 : ea                       nop
41b9 : ea                       nop
41ba : c000                     cpy #0
41bc : f003                     beq range_end   
41be : 4c8640                   jmp range_loop
41c1 :                  range_end               ;range test successful
                            endif
                                next_test
41c1 : ad0002          >            lda test_case   ;previous test
41c4 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
41c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
41c8 : a902            >            lda #test_num   ;*** next tests' number
41ca : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
41cd : c001                     cpy #1          ;testing BNE true
41cf : d003                     bne test_bne
                                trap 
41d1 : 4cd141          >        jmp *           ;failed anyway
                        
41d4 :                  test_bne
41d4 : a900                     lda #0 
41d6 : c900                     cmp #0          ;test compare immediate 
                                trap_ne
41d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
41da : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
41dc : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
41de : c901                     cmp #1
                                trap_eq 
41e0 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
41e2 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
41e4 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
41e6 : aa                       tax 
41e7 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
41e9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
41eb : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
41ed : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
41ef : e001                     cpx #1
                                trap_eq 
41f1 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
41f3 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
41f5 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
41f7 : a8                       tay 
41f8 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
41fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
41fc : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
41fe : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
4200 : c001                     cpy #1
                                trap_eq 
4202 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
4204 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
4206 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                next_test
4208 : ad0002          >            lda test_case   ;previous test
420b : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
420d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
420f : a903            >            lda #test_num   ;*** next tests' number
4211 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
4214 : a2ff                     ldx #$ff        ;initialize stack
4216 : 9a                       txs
4217 : a955                     lda #$55
4219 : 48                       pha
421a : a9aa                     lda #$aa
421c : 48                       pha
421d : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
4220 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4222 : ba                       tsx
4223 : 8a                       txa             ;overwrite accu
4224 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
4226 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4228 : 68                       pla
4229 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
422b : d0fe            >        bne *           ;failed not equal (non zero)
                        
422d : 68                       pla
422e : c955                     cmp #$55
                                trap_ne
4230 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4232 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
4235 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4237 : ba                       tsx
4238 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
423a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
423c : ad0002          >            lda test_case   ;previous test
423f : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4241 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
4243 : a904            >            lda #test_num   ;*** next tests' number
4245 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
4248 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
424a : 48              >            pha         ;use stack to load status
424b : 28              >            plp
                        
424c : 101a                     bpl nbr1        ;branches should not be taken
424e : 501b                     bvc nbr2
4250 : 901c                     bcc nbr3
4252 : d01d                     bne nbr4
4254 : 3003                     bmi br1         ;branches should be taken
                                trap 
4256 : 4c5642          >        jmp *           ;failed anyway
                        
4259 : 7003             br1     bvs br2
                                trap 
425b : 4c5b42          >        jmp *           ;failed anyway
                        
425e : b003             br2     bcs br3
                                trap 
4260 : 4c6042          >        jmp *           ;failed anyway
                        
4263 : f00f             br3     beq br4
                                trap 
4265 : 4c6542          >        jmp *           ;failed anyway
                        
4268 :                  nbr1
                                trap            ;previous bpl taken 
4268 : 4c6842          >        jmp *           ;failed anyway
                        
426b :                  nbr2
                                trap            ;previous bvc taken
426b : 4c6b42          >        jmp *           ;failed anyway
                        
426e :                  nbr3
                                trap            ;previous bcc taken
426e : 4c6e42          >        jmp *           ;failed anyway
                        
4271 :                  nbr4
                                trap            ;previous bne taken
4271 : 4c7142          >        jmp *           ;failed anyway
                        
4274 : 08               br4     php
4275 : ba                       tsx
4276 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
4278 : d0fe            >        bne *           ;failed not equal (non zero)
                        
427a : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
427b : 0908            >            ora #decmode        ;ignore decimal mode bit
427d : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
427f : d0fe            >        bne *           ;failed not equal (non zero)
                        
4281 : ba                       tsx
4282 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
4284 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
4286 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
4288 : 48              >            pha         ;use stack to load status
4289 : 28              >            plp
                        
428a : 301a                     bmi nbr11       ;branches should not be taken
428c : 701b                     bvs nbr12
428e : b01c                     bcs nbr13
4290 : f01d                     beq nbr14
4292 : 1003                     bpl br11        ;branches should be taken
                                trap 
4294 : 4c9442          >        jmp *           ;failed anyway
                        
4297 : 5003             br11    bvc br12
                                trap 
4299 : 4c9942          >        jmp *           ;failed anyway
                        
429c : 9003             br12    bcc br13
                                trap 
429e : 4c9e42          >        jmp *           ;failed anyway
                        
42a1 : d00f             br13    bne br14
                                trap 
42a3 : 4ca342          >        jmp *           ;failed anyway
                        
42a6 :                  nbr11
                                trap            ;previous bmi taken 
42a6 : 4ca642          >        jmp *           ;failed anyway
                        
42a9 :                  nbr12
                                trap            ;previous bvs taken 
42a9 : 4ca942          >        jmp *           ;failed anyway
                        
42ac :                  nbr13
                                trap            ;previous bcs taken 
42ac : 4cac42          >        jmp *           ;failed anyway
                        
42af :                  nbr14
                                trap            ;previous beq taken 
42af : 4caf42          >        jmp *           ;failed anyway
                        
42b2 : 08               br14    php
42b3 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
42b4 : 0908            >            ora #decmode        ;ignore decimal mode bit
42b6 : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
42b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
42ba : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
42bc : 48              >            pha         ;use stack to load status
42bd : 28              >            plp
                        
42be : d002                     bne brzs1
42c0 : f003                     beq brzs2
42c2 :                  brzs1
                                trap            ;branch zero/non zero
42c2 : 4cc242          >        jmp *           ;failed anyway
                        
42c5 : b002             brzs2   bcs brzs3
42c7 : 9003                     bcc brzs4
42c9 :                  brzs3
                                trap            ;branch carry/no carry
42c9 : 4cc942          >        jmp *           ;failed anyway
                        
42cc : 3002             brzs4   bmi brzs5
42ce : 1003                     bpl brzs6
42d0 :                  brzs5
                                trap            ;branch minus/plus
42d0 : 4cd042          >        jmp *           ;failed anyway
                        
42d3 : 7002             brzs6   bvs brzs7
42d5 : 5003                     bvc brzs8
42d7 :                  brzs7
                                trap            ;branch overflow/no overflow
42d7 : 4cd742          >        jmp *           ;failed anyway
                        
42da :                  brzs8
                                set_stat carry
                       >            load_flag carry
42da : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
42dc : 48              >            pha         ;use stack to load status
42dd : 28              >            plp
                        
42de : f002                     beq brcs1
42e0 : d003                     bne brcs2
42e2 :                  brcs1
                                trap            ;branch zero/non zero
42e2 : 4ce242          >        jmp *           ;failed anyway
                        
42e5 : 9002             brcs2   bcc brcs3
42e7 : b003                     bcs brcs4
42e9 :                  brcs3
                                trap            ;branch carry/no carry
42e9 : 4ce942          >        jmp *           ;failed anyway
                        
42ec : 3002             brcs4   bmi brcs5
42ee : 1003                     bpl brcs6
42f0 :                  brcs5
                                trap            ;branch minus/plus
42f0 : 4cf042          >        jmp *           ;failed anyway
                        
42f3 : 7002             brcs6   bvs brcs7
42f5 : 5003                     bvc brcs8
42f7 :                  brcs7
                                trap            ;branch overflow/no overflow
42f7 : 4cf742          >        jmp *           ;failed anyway
                        
                        
42fa :                  brcs8
                                set_stat minus
                       >            load_flag minus
42fa : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
42fc : 48              >            pha         ;use stack to load status
42fd : 28              >            plp
                        
42fe : f002                     beq brmi1
4300 : d003                     bne brmi2
4302 :                  brmi1
                                trap            ;branch zero/non zero
4302 : 4c0243          >        jmp *           ;failed anyway
                        
4305 : b002             brmi2   bcs brmi3
4307 : 9003                     bcc brmi4
4309 :                  brmi3
                                trap            ;branch carry/no carry
4309 : 4c0943          >        jmp *           ;failed anyway
                        
430c : 1002             brmi4   bpl brmi5
430e : 3003                     bmi brmi6
4310 :                  brmi5
                                trap            ;branch minus/plus
4310 : 4c1043          >        jmp *           ;failed anyway
                        
4313 : 7002             brmi6   bvs brmi7
4315 : 5003                     bvc brmi8
4317 :                  brmi7
                                trap            ;branch overflow/no overflow
4317 : 4c1743          >        jmp *           ;failed anyway
                        
431a :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
431a : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
431c : 48              >            pha         ;use stack to load status
431d : 28              >            plp
                        
431e : f002                     beq brvs1
4320 : d003                     bne brvs2
4322 :                  brvs1
                                trap            ;branch zero/non zero
4322 : 4c2243          >        jmp *           ;failed anyway
                        
4325 : b002             brvs2   bcs brvs3
4327 : 9003                     bcc brvs4
4329 :                  brvs3
                                trap            ;branch carry/no carry
4329 : 4c2943          >        jmp *           ;failed anyway
                        
432c : 3002             brvs4   bmi brvs5
432e : 1003                     bpl brvs6
4330 :                  brvs5
                                trap            ;branch minus/plus
4330 : 4c3043          >        jmp *           ;failed anyway
                        
4333 : 5002             brvs6   bvc brvs7
4335 : 7003                     bvs brvs8
4337 :                  brvs7
                                trap            ;branch overflow/no overflow
4337 : 4c3743          >        jmp *           ;failed anyway
                        
433a :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
433a : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
433c : 48              >            pha         ;use stack to load status
433d : 28              >            plp
                        
433e : f002                     beq brzc1
4340 : d003                     bne brzc2
4342 :                  brzc1
                                trap            ;branch zero/non zero
4342 : 4c4243          >        jmp *           ;failed anyway
                        
4345 : 9002             brzc2   bcc brzc3
4347 : b003                     bcs brzc4
4349 :                  brzc3
                                trap            ;branch carry/no carry
4349 : 4c4943          >        jmp *           ;failed anyway
                        
434c : 1002             brzc4   bpl brzc5
434e : 3003                     bmi brzc6
4350 :                  brzc5
                                trap            ;branch minus/plus
4350 : 4c5043          >        jmp *           ;failed anyway
                        
4353 : 5002             brzc6   bvc brzc7
4355 : 7003                     bvs brzc8
4357 :                  brzc7
                                trap            ;branch overflow/no overflow
4357 : 4c5743          >        jmp *           ;failed anyway
                        
435a :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
435a : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
435c : 48              >            pha         ;use stack to load status
435d : 28              >            plp
                        
435e : d002                     bne brcc1
4360 : f003                     beq brcc2
4362 :                  brcc1
                                trap            ;branch zero/non zero
4362 : 4c6243          >        jmp *           ;failed anyway
                        
4365 : b002             brcc2   bcs brcc3
4367 : 9003                     bcc brcc4
4369 :                  brcc3
                                trap            ;branch carry/no carry
4369 : 4c6943          >        jmp *           ;failed anyway
                        
436c : 1002             brcc4   bpl brcc5
436e : 3003                     bmi brcc6
4370 :                  brcc5
                                trap            ;branch minus/plus
4370 : 4c7043          >        jmp *           ;failed anyway
                        
4373 : 5002             brcc6   bvc brcc7
4375 : 7003                     bvs brcc8
4377 :                  brcc7
                                trap            ;branch overflow/no overflow
4377 : 4c7743          >        jmp *           ;failed anyway
                        
437a :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
437a : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
437c : 48              >            pha         ;use stack to load status
437d : 28              >            plp
                        
437e : d002                     bne brpl1
4380 : f003                     beq brpl2
4382 :                  brpl1
                                trap            ;branch zero/non zero
4382 : 4c8243          >        jmp *           ;failed anyway
                        
4385 : 9002             brpl2   bcc brpl3
4387 : b003                     bcs brpl4
4389 :                  brpl3
                                trap            ;branch carry/no carry
4389 : 4c8943          >        jmp *           ;failed anyway
                        
438c : 3002             brpl4   bmi brpl5
438e : 1003                     bpl brpl6
4390 :                  brpl5
                                trap            ;branch minus/plus
4390 : 4c9043          >        jmp *           ;failed anyway
                        
4393 : 5002             brpl6   bvc brpl7
4395 : 7003                     bvs brpl8
4397 :                  brpl7
                                trap            ;branch overflow/no overflow
4397 : 4c9743          >        jmp *           ;failed anyway
                        
439a :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
439a : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
439c : 48              >            pha         ;use stack to load status
439d : 28              >            plp
                        
439e : d002                     bne brvc1
43a0 : f003                     beq brvc2
43a2 :                  brvc1
                                trap            ;branch zero/non zero
43a2 : 4ca243          >        jmp *           ;failed anyway
                        
43a5 : 9002             brvc2   bcc brvc3
43a7 : b003                     bcs brvc4
43a9 :                  brvc3
                                trap            ;branch carry/no carry
43a9 : 4ca943          >        jmp *           ;failed anyway
                        
43ac : 1002             brvc4   bpl brvc5
43ae : 3003                     bmi brvc6
43b0 :                  brvc5
                                trap            ;branch minus/plus
43b0 : 4cb043          >        jmp *           ;failed anyway
                        
43b3 : 7002             brvc6   bvs brvc7
43b5 : 5003                     bvc brvc8
43b7 :                  brvc7
                                trap            ;branch overflow/no overflow
43b7 : 4cb743          >        jmp *           ;failed anyway
                        
43ba :                  brvc8
                                next_test
43ba : ad0002          >            lda test_case   ;previous test
43bd : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
43bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
43c1 : a905            >            lda #test_num   ;*** next tests' number
43c3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
43c6 : a255                     ldx #$55        ;x & y protected
43c8 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
43ca : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
43cc : 48              >            pha         ;use stack to load status
43cd : a901            >            lda #1     ;precharge accu
43cf : 28              >            plp
                        
43d0 : 48                       pha
                                tst_a 1,$ff
43d1 : 08              >            php         ;save flags
43d2 : c901            >            cmp #1     ;test result
                       >            trap_ne
43d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43d6 : 68              >            pla         ;load status
43d7 : 48              >            pha
                       >            cmp_flag $ff
43d8 : 0908            >            ora #decmode        ;ignore decimal mode bit
43da : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
43dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43de : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
43df : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
43e1 : 48              >            pha         ;use stack to load status
43e2 : a900            >            lda #0     ;precharge accu
43e4 : 28              >            plp
                        
43e5 : 48                       pha
                                tst_a 0,0
43e6 : 08              >            php         ;save flags
43e7 : c900            >            cmp #0     ;test result
                       >            trap_ne
43e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43eb : 68              >            pla         ;load status
43ec : 48              >            pha
                       >            cmp_flag 0
43ed : 0908            >            ora #decmode        ;ignore decimal mode bit
43ef : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
43f1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43f3 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
43f4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
43f6 : 48              >            pha         ;use stack to load status
43f7 : a9ff            >            lda #$ff     ;precharge accu
43f9 : 28              >            plp
                        
43fa : 48                       pha
                                tst_a $ff,$ff
43fb : 08              >            php         ;save flags
43fc : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
43fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4400 : 68              >            pla         ;load status
4401 : 48              >            pha
                       >            cmp_flag $ff
4402 : 0908            >            ora #decmode        ;ignore decimal mode bit
4404 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4406 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4408 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
4409 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
440b : 48              >            pha         ;use stack to load status
440c : a901            >            lda #1     ;precharge accu
440e : 28              >            plp
                        
440f : 48                       pha
                                tst_a 1,0
4410 : 08              >            php         ;save flags
4411 : c901            >            cmp #1     ;test result
                       >            trap_ne
4413 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4415 : 68              >            pla         ;load status
4416 : 48              >            pha
                       >            cmp_flag 0
4417 : 0908            >            ora #decmode        ;ignore decimal mode bit
4419 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
441b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
441d : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
441e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4420 : 48              >            pha         ;use stack to load status
4421 : a900            >            lda #0     ;precharge accu
4423 : 28              >            plp
                        
4424 : 48                       pha
                                tst_a 0,$ff
4425 : 08              >            php         ;save flags
4426 : c900            >            cmp #0     ;test result
                       >            trap_ne
4428 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
442a : 68              >            pla         ;load status
442b : 48              >            pha
                       >            cmp_flag $ff
442c : 0908            >            ora #decmode        ;ignore decimal mode bit
442e : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4430 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4432 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
4433 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4435 : 48              >            pha         ;use stack to load status
4436 : a9ff            >            lda #$ff     ;precharge accu
4438 : 28              >            plp
                        
4439 : 48                       pha
                                tst_a $ff,0
443a : 08              >            php         ;save flags
443b : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
443d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
443f : 68              >            pla         ;load status
4440 : 48              >            pha
                       >            cmp_flag 0
4441 : 0908            >            ora #decmode        ;ignore decimal mode bit
4443 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4445 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4447 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
4448 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
444a : 48              >            pha         ;use stack to load status
444b : a900            >            lda #0     ;precharge accu
444d : 28              >            plp
                        
444e : 68                       pla
                                tst_a $ff,$ff-zero
444f : 08              >            php         ;save flags
4450 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4452 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4454 : 68              >            pla         ;load status
4455 : 48              >            pha
                       >            cmp_flag $ff-zero
4456 : 0908            >            ora #decmode        ;ignore decimal mode bit
4458 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
445a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
445c : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
445d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
445f : 48              >            pha         ;use stack to load status
4460 : a9ff            >            lda #$ff     ;precharge accu
4462 : 28              >            plp
                        
4463 : 68                       pla
                                tst_a 0,zero
4464 : 08              >            php         ;save flags
4465 : c900            >            cmp #0     ;test result
                       >            trap_ne
4467 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4469 : 68              >            pla         ;load status
446a : 48              >            pha
                       >            cmp_flag zero
446b : 0908            >            ora #decmode        ;ignore decimal mode bit
446d : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
446f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4471 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
4472 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4474 : 48              >            pha         ;use stack to load status
4475 : a9fe            >            lda #$fe     ;precharge accu
4477 : 28              >            plp
                        
4478 : 68                       pla
                                tst_a 1,$ff-zero-minus
4479 : 08              >            php         ;save flags
447a : c901            >            cmp #1     ;test result
                       >            trap_ne
447c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
447e : 68              >            pla         ;load status
447f : 48              >            pha
                       >            cmp_flag $ff-zero-minus
4480 : 0908            >            ora #decmode        ;ignore decimal mode bit
4482 : c97d            >            cmp #($ff-zero-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4484 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4486 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
4487 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4489 : 48              >            pha         ;use stack to load status
448a : a900            >            lda #0     ;precharge accu
448c : 28              >            plp
                        
448d : 68                       pla
                                tst_a $ff,minus
448e : 08              >            php         ;save flags
448f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4491 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4493 : 68              >            pla         ;load status
4494 : 48              >            pha
                       >            cmp_flag minus
4495 : 0908            >            ora #decmode        ;ignore decimal mode bit
4497 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4499 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
449b : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
449c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
449e : 48              >            pha         ;use stack to load status
449f : a9ff            >            lda #$ff     ;precharge accu
44a1 : 28              >            plp
                        
44a2 : 68                       pla
                                tst_a 0,$ff-minus
44a3 : 08              >            php         ;save flags
44a4 : c900            >            cmp #0     ;test result
                       >            trap_ne
44a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44a8 : 68              >            pla         ;load status
44a9 : 48              >            pha
                       >            cmp_flag $ff-minus
44aa : 0908            >            ora #decmode        ;ignore decimal mode bit
44ac : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
44ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44b0 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
44b1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
44b3 : 48              >            pha         ;use stack to load status
44b4 : a9fe            >            lda #$fe     ;precharge accu
44b6 : 28              >            plp
                        
44b7 : 68                       pla
                                tst_a 1,0
44b8 : 08              >            php         ;save flags
44b9 : c901            >            cmp #1     ;test result
                       >            trap_ne
44bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44bd : 68              >            pla         ;load status
44be : 48              >            pha
                       >            cmp_flag 0
44bf : 0908            >            ora #decmode        ;ignore decimal mode bit
44c1 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
44c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44c5 : 28              >            plp         ;restore status
                        
44c6 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
44c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
44ca : c0aa                     cpy #$aa
                                trap_ne
44cc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
44ce : ad0002          >            lda test_case   ;previous test
44d1 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
44d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
44d5 : a906            >            lda #test_num   ;*** next tests' number
44d7 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
44da : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
44dc : 48              >            pha         ;use stack to load status
44dd : a93c            >            lda #$3c     ;precharge accu
44df : 28              >            plp
                        
44e0 : 49c3                     eor #$c3
                                tst_a $ff,fn
44e2 : 08              >            php         ;save flags
44e3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
44e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44e7 : 68              >            pla         ;load status
44e8 : 48              >            pha
                       >            cmp_flag fn
44e9 : 0908            >            ora #decmode        ;ignore decimal mode bit
44eb : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
44ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44ef : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
44f0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
44f2 : 48              >            pha         ;use stack to load status
44f3 : a9c3            >            lda #$c3     ;precharge accu
44f5 : 28              >            plp
                        
44f6 : 49c3                     eor #$c3
                                tst_a 0,fz
44f8 : 08              >            php         ;save flags
44f9 : c900            >            cmp #0     ;test result
                       >            trap_ne
44fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44fd : 68              >            pla         ;load status
44fe : 48              >            pha
                       >            cmp_flag fz
44ff : 0908            >            ora #decmode        ;ignore decimal mode bit
4501 : c93a            >            cmp #(fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4503 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4505 : 28              >            plp         ;restore status
                        
                                next_test
4506 : ad0002          >            lda test_case   ;previous test
4509 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
450b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
450d : a907            >            lda #test_num   ;*** next tests' number
450f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
4512 : a224                     ldx #$24
4514 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
4516 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4518 : 48              >            pha         ;use stack to load status
4519 : a918            >            lda #$18     ;precharge accu
451b : 28              >            plp
                        
451c : ea                       nop
                                tst_a $18,0
451d : 08              >            php         ;save flags
451e : c918            >            cmp #$18     ;test result
                       >            trap_ne
4520 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4522 : 68              >            pla         ;load status
4523 : 48              >            pha
                       >            cmp_flag 0
4524 : 0908            >            ora #decmode        ;ignore decimal mode bit
4526 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4528 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
452a : 28              >            plp         ;restore status
                        
452b : e024                     cpx #$24
                                trap_ne
452d : d0fe            >        bne *           ;failed not equal (non zero)
                        
452f : c042                     cpy #$42
                                trap_ne
4531 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4533 : a2db                     ldx #$db
4535 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
4537 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4539 : 48              >            pha         ;use stack to load status
453a : a9e7            >            lda #$e7     ;precharge accu
453c : 28              >            plp
                        
453d : ea                       nop
                                tst_a $e7,$ff
453e : 08              >            php         ;save flags
453f : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
4541 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4543 : 68              >            pla         ;load status
4544 : 48              >            pha
                       >            cmp_flag $ff
4545 : 0908            >            ora #decmode        ;ignore decimal mode bit
4547 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4549 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
454b : 28              >            plp         ;restore status
                        
454c : e0db                     cpx #$db
                                trap_ne
454e : d0fe            >        bne *           ;failed not equal (non zero)
                        
4550 : c0bd                     cpy #$bd
                                trap_ne
4552 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
4554 : ad0002          >            lda test_case   ;previous test
4557 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4559 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
455b : a908            >            lda #test_num   ;*** next tests' number
455d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
4560 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
4562 : 48              >            pha         ;use stack to load status
4563 : 28              >            plp
                        
4564 : a946                     lda #'F'
4566 : a241                     ldx #'A'
4568 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
456a : 4c2c74                   jmp test_far
456d : ea                       nop
456e : ea                       nop
                                trap_ne         ;runover protection
456f : d0fe            >        bne *           ;failed not equal (non zero)
                        
4571 : e8                       inx
4572 : e8                       inx
4573 :                  far_ret 
                                trap_eq         ;returned flags OK?
4573 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
4575 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
4577 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
4579 : 50fe            >        bvc *           ;failed overflow clear
                        
457b : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
457d : d0fe            >        bne *           ;failed not equal (non zero)
                        
457f : e042                     cpx #('A'+1)
                                trap_ne
4581 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4583 : c04f                     cpy #('R'-3)
                                trap_ne
4585 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4587 : ca                       dex
4588 : c8                       iny
4589 : c8                       iny
458a : c8                       iny
458b : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
458d : 4c9645                   jmp test_near
4590 : ea                       nop
4591 : ea                       nop
                                trap_ne         ;runover protection
4592 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4594 : e8                       inx
4595 : e8                       inx
4596 :                  test_near
                                trap_eq         ;passed flags OK?
4596 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_mi
4598 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
459a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
459c : 50fe            >        bvc *           ;failed overflow clear
                        
459e : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
45a0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
45a2 : e041                     cpx #'A'
                                trap_ne
45a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
45a6 : c052                     cpy #'R'
                                trap_ne
45a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
45aa : ad0002          >            lda test_case   ;previous test
45ad : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
45af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
45b1 : a909            >            lda #test_num   ;*** next tests' number
45b3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
45b6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
45b8 : 48              >            pha         ;use stack to load status
45b9 : 28              >            plp
                        
45ba : a949                     lda #'I'
45bc : a24e                     ldx #'N'
45be : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
45c0 : 6c5a74                   jmp (ptr_tst_ind)
45c3 : ea                       nop
                                trap_ne         ;runover protection
45c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
45c6 : 88                       dey
45c7 : 88                       dey
45c8 :                  ind_ret 
45c8 : 08                       php             ;either SP or Y count will fail, if we do not hit
45c9 : 88                       dey
45ca : 88                       dey
45cb : 88                       dey
45cc : 28                       plp
                                trap_eq         ;returned flags OK?
45cd : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
45cf : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
45d1 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
45d3 : 50fe            >        bvc *           ;failed overflow clear
                        
45d5 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
45d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
45d9 : e04f                     cpx #('N'+1)
                                trap_ne
45db : d0fe            >        bne *           ;failed not equal (non zero)
                        
45dd : c03e                     cpy #('D'-6)
                                trap_ne
45df : d0fe            >        bne *           ;failed not equal (non zero)
                        
45e1 : ba                       tsx             ;SP check
45e2 : e0ff                     cpx #$ff
                                trap_ne
45e4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
45e6 : ad0002          >            lda test_case   ;previous test
45e9 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
45eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
45ed : a90a            >            lda #test_num   ;*** next tests' number
45ef : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
45f2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
45f4 : 48              >            pha         ;use stack to load status
45f5 : 28              >            plp
                        
45f6 : a94a                     lda #'J'
45f8 : a253                     ldx #'S'
45fa : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
45fc : 209974                   jsr test_jsr
45fe =                  jsr_ret = *-1           ;last address of jsr = return address
45ff : 08                       php             ;either SP or Y count will fail, if we do not hit
4600 : 88                       dey
4601 : 88                       dey
4602 : 88                       dey
4603 : 28                       plp
                                trap_eq         ;returned flags OK?
4604 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
4606 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
4608 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
460a : 50fe            >        bvc *           ;failed overflow clear
                        
460c : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
460e : d0fe            >        bne *           ;failed not equal (non zero)
                        
4610 : e054                     cpx #('S'+1)
                                trap_ne
4612 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4614 : c04c                     cpy #('R'-6)
                                trap_ne
4616 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4618 : ba                       tsx             ;sp?
4619 : e0ff                     cpx #$ff
                                trap_ne
461b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
461d : ad0002          >            lda test_case   ;previous test
4620 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4622 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
4624 : a90b            >            lda #test_num   ;*** next tests' number
4626 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                load_flag 0     ;with interrupts enabled if allowed!
4629 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                        
462b : 48                       pha
462c : a942                     lda #'B'
462e : a252                     ldx #'R'
4630 : a04b                     ldy #'K'
4632 : 28                       plp             ;N=0, V=0, Z=0, C=0
4633 : 00                       brk
                            else
                                lda #hi brk_ret0 ;emulated break
                                pha
                                lda #lo brk_ret0
                                pha
                                load_flag fao    ;set break & unused on stack
                                pha
                                load_flag intdis ;during interrupt
                                pha
                                lda #'B'
                                ldx #'R'
                                ldy #'K'
                                plp             ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
4634 : 88                       dey             ;should not be executed
4635 :                  brk_ret0                ;address of break return
4635 : 08                       php             ;either SP or Y count will fail, if we do not hit
4636 : 88                       dey
4637 : 88                       dey
4638 : 88                       dey
4639 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
463b : d0fe            >        bne *           ;failed not equal (non zero)
                        
463d : e053                     cpx #'R'+1
                                trap_ne
463f : d0fe            >        bne *           ;failed not equal (non zero)
                        
4641 : c045                     cpy #'K'-6
                                trap_ne
4643 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4645 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
4646 : 0908            >            ora #decmode        ;ignore decimal mode bit
4648 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
464a : d0fe            >        bne *           ;failed not equal (non zero)
                        
464c : ba                       tsx             ;sp?
464d : e0ff                     cpx #$ff
                                trap_ne
464f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                            if ROM_vectors = 1
                                load_flag $ff   ;with interrupts disabled if allowed!
4651 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                        
4653 : 48                       pha
4654 : a9bd                     lda #$ff-'B'
4656 : a2ad                     ldx #$ff-'R'
4658 : a0b4                     ldy #$ff-'K'
465a : 28                       plp             ;N=1, V=1, Z=1, C=1
465b : 00                       brk
                            else
                                lda #hi brk_ret1 ;emulated break
                                pha
                                lda #lo brk_ret1
                                pha
                                load_flag $ff
                                pha             ;set break & unused on stack
                                pha             ;actual flags
                                lda #$ff-'B'
                                ldx #$ff-'R'
                                ldy #$ff-'K'
                                plp             ;N=1, V=1, Z=1, C=1
                                jmp irq_trap
                            endif
465c : 88                       dey             ;should not be executed
465d :                  brk_ret1                ;address of break return
465d : 08                       php             ;either SP or Y count will fail, if we do not hit
465e : 88                       dey
465f : 88                       dey
4660 : 88                       dey
4661 : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
4663 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4665 : e0ae                     cpx #$ff-'R'+1
                                trap_ne
4667 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4669 : c0ae                     cpy #$ff-'K'-6
                                trap_ne
466b : d0fe            >        bne *           ;failed not equal (non zero)
                        
466d : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
466e : 0908            >            ora #decmode        ;ignore decimal mode bit
4670 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4672 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4674 : ba                       tsx             ;sp?
4675 : e0ff                     cpx #$ff
                                trap_ne
4677 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
4679 : ad0002          >            lda test_case   ;previous test
467c : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
467e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
4680 : a90c            >            lda #test_num   ;*** next tests' number
4682 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
4685 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4687 : 48              >            pha         ;use stack to load status
4688 : 28              >            plp
                        
4689 : 18                       clc
                                tst_stat $ff-carry
468a : 08              >            php         ;save status
468b : 68              >            pla         ;use stack to retrieve status
468c : 48              >            pha
                       >            cmp_flag $ff-carry
468d : 0908            >            ora #decmode        ;ignore decimal mode bit
468f : c9fe            >            cmp #($ff-carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4691 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4693 : 28              >            plp         ;restore status
                        
4694 : 38                       sec
                                tst_stat $ff
4695 : 08              >            php         ;save status
4696 : 68              >            pla         ;use stack to retrieve status
4697 : 48              >            pha
                       >            cmp_flag $ff
4698 : 0908            >            ora #decmode        ;ignore decimal mode bit
469a : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
469c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
469e : 28              >            plp         ;restore status
                        
                            if I_flag = 3
469f : 58                       cli
                                tst_stat $ff-intdis
46a0 : 08              >            php         ;save status
46a1 : 68              >            pla         ;use stack to retrieve status
46a2 : 48              >            pha
                       >            cmp_flag $ff-intdis
46a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
46a5 : c9fb            >            cmp #($ff-intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
46a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46a9 : 28              >            plp         ;restore status
                        
46aa : 78                       sei
                                tst_stat $ff
46ab : 08              >            php         ;save status
46ac : 68              >            pla         ;use stack to retrieve status
46ad : 48              >            pha
                       >            cmp_flag $ff
46ae : 0908            >            ora #decmode        ;ignore decimal mode bit
46b0 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
46b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46b4 : 28              >            plp         ;restore status
                        
                            endif
46b5 : d8                       cld
                                tst_stat $ff-decmode
46b6 : 08              >            php         ;save status
46b7 : 68              >            pla         ;use stack to retrieve status
46b8 : 48              >            pha
                       >            cmp_flag $ff-decmode
46b9 : 0908            >            ora #decmode        ;ignore decimal mode bit
46bb : c9ff            >            cmp #($ff-decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
46bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46bf : 28              >            plp         ;restore status
                        
46c0 : f8                       sed
                                tst_stat $ff
46c1 : 08              >            php         ;save status
46c2 : 68              >            pla         ;use stack to retrieve status
46c3 : 48              >            pha
                       >            cmp_flag $ff
46c4 : 0908            >            ora #decmode        ;ignore decimal mode bit
46c6 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
46c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46ca : 28              >            plp         ;restore status
                        
46cb : b8                       clv
                                tst_stat $ff-overfl
46cc : 08              >            php         ;save status
46cd : 68              >            pla         ;use stack to retrieve status
46ce : 48              >            pha
                       >            cmp_flag $ff-overfl
46cf : 0908            >            ora #decmode        ;ignore decimal mode bit
46d1 : c9bf            >            cmp #($ff-overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
46d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46d5 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
46d6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
46d8 : 48              >            pha         ;use stack to load status
46d9 : 28              >            plp
                        
                                tst_stat 0
46da : 08              >            php         ;save status
46db : 68              >            pla         ;use stack to retrieve status
46dc : 48              >            pha
                       >            cmp_flag 0
46dd : 0908            >            ora #decmode        ;ignore decimal mode bit
46df : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
46e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46e3 : 28              >            plp         ;restore status
                        
46e4 : 38                       sec
                                tst_stat carry
46e5 : 08              >            php         ;save status
46e6 : 68              >            pla         ;use stack to retrieve status
46e7 : 48              >            pha
                       >            cmp_flag carry
46e8 : 0908            >            ora #decmode        ;ignore decimal mode bit
46ea : c939            >            cmp #(carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
46ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46ee : 28              >            plp         ;restore status
                        
46ef : 18                       clc
                                tst_stat 0  
46f0 : 08              >            php         ;save status
46f1 : 68              >            pla         ;use stack to retrieve status
46f2 : 48              >            pha
                       >            cmp_flag 0  
46f3 : 0908            >            ora #decmode        ;ignore decimal mode bit
46f5 : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
46f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46f9 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
46fa : 78                       sei
                                tst_stat intdis
46fb : 08              >            php         ;save status
46fc : 68              >            pla         ;use stack to retrieve status
46fd : 48              >            pha
                       >            cmp_flag intdis
46fe : 0908            >            ora #decmode        ;ignore decimal mode bit
4700 : c93c            >            cmp #(intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4702 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4704 : 28              >            plp         ;restore status
                        
4705 : 58                       cli
                                tst_stat 0
4706 : 08              >            php         ;save status
4707 : 68              >            pla         ;use stack to retrieve status
4708 : 48              >            pha
                       >            cmp_flag 0
4709 : 0908            >            ora #decmode        ;ignore decimal mode bit
470b : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
470d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
470f : 28              >            plp         ;restore status
                        
                            endif  
4710 : f8                       sed
                                tst_stat decmode
4711 : 08              >            php         ;save status
4712 : 68              >            pla         ;use stack to retrieve status
4713 : 48              >            pha
                       >            cmp_flag decmode
4714 : 0908            >            ora #decmode        ;ignore decimal mode bit
4716 : c938            >            cmp #(decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4718 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
471a : 28              >            plp         ;restore status
                        
471b : d8                       cld
                                tst_stat 0  
471c : 08              >            php         ;save status
471d : 68              >            pla         ;use stack to retrieve status
471e : 48              >            pha
                       >            cmp_flag 0  
471f : 0908            >            ora #decmode        ;ignore decimal mode bit
4721 : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4723 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4725 : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
4726 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
4728 : 48              >            pha         ;use stack to load status
4729 : 28              >            plp
                        
                                tst_stat overfl
472a : 08              >            php         ;save status
472b : 68              >            pla         ;use stack to retrieve status
472c : 48              >            pha
                       >            cmp_flag overfl
472d : 0908            >            ora #decmode        ;ignore decimal mode bit
472f : c978            >            cmp #(overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4731 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4733 : 28              >            plp         ;restore status
                        
4734 : b8                       clv
                                tst_stat 0
4735 : 08              >            php         ;save status
4736 : 68              >            pla         ;use stack to retrieve status
4737 : 48              >            pha
                       >            cmp_flag 0
4738 : 0908            >            ora #decmode        ;ignore decimal mode bit
473a : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
473c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
473e : 28              >            plp         ;restore status
                        
                                next_test
473f : ad0002          >            lda test_case   ;previous test
4742 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4744 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
4746 : a90d            >            lda #test_num   ;*** next tests' number
4748 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
474b : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
474d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
474f : 48              >            pha         ;use stack to load status
4750 : 28              >            plp
                        
4751 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
4752 : 08              >            php         ;save flags
4753 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
4755 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4757 : 68              >            pla         ;load status
4758 : 48              >            pha
                       >            cmp_flag $ff-zero
4759 : 0908            >            ora #decmode        ;ignore decimal mode bit
475b : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
475d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
475f : 28              >            plp         ;restore status
                        
4760 : e8                       inx             ;00
                                tst_x 0,$ff-minus
4761 : 08              >            php         ;save flags
4762 : e000            >            cpx #0     ;test result
                       >            trap_ne
4764 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4766 : 68              >            pla         ;load status
4767 : 48              >            pha
                       >            cmp_flag $ff-minus
4768 : 0908            >            ora #decmode        ;ignore decimal mode bit
476a : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
476c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
476e : 28              >            plp         ;restore status
                        
476f : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
4770 : 08              >            php         ;save flags
4771 : e001            >            cpx #1     ;test result
                       >            trap_ne
4773 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4775 : 68              >            pla         ;load status
4776 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
4777 : 0908            >            ora #decmode        ;ignore decimal mode bit
4779 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
477b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
477d : 28              >            plp         ;restore status
                        
477e : ca                       dex             ;00
                                tst_x 0,$ff-minus
477f : 08              >            php         ;save flags
4780 : e000            >            cpx #0     ;test result
                       >            trap_ne
4782 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4784 : 68              >            pla         ;load status
4785 : 48              >            pha
                       >            cmp_flag $ff-minus
4786 : 0908            >            ora #decmode        ;ignore decimal mode bit
4788 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
478a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
478c : 28              >            plp         ;restore status
                        
478d : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
478e : 08              >            php         ;save flags
478f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
4791 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4793 : 68              >            pla         ;load status
4794 : 48              >            pha
                       >            cmp_flag $ff-zero
4795 : 0908            >            ora #decmode        ;ignore decimal mode bit
4797 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4799 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
479b : 28              >            plp         ;restore status
                        
479c : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
479d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
479f : 48              >            pha         ;use stack to load status
47a0 : 28              >            plp
                        
47a1 : e8                       inx             ;ff
                                tst_x $ff,minus
47a2 : 08              >            php         ;save flags
47a3 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
47a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47a7 : 68              >            pla         ;load status
47a8 : 48              >            pha
                       >            cmp_flag minus
47a9 : 0908            >            ora #decmode        ;ignore decimal mode bit
47ab : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
47ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47af : 28              >            plp         ;restore status
                        
47b0 : e8                       inx             ;00
                                tst_x 0,zero
47b1 : 08              >            php         ;save flags
47b2 : e000            >            cpx #0     ;test result
                       >            trap_ne
47b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47b6 : 68              >            pla         ;load status
47b7 : 48              >            pha
                       >            cmp_flag zero
47b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
47ba : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
47bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47be : 28              >            plp         ;restore status
                        
47bf : e8                       inx             ;01
                                tst_x 1,0
47c0 : 08              >            php         ;save flags
47c1 : e001            >            cpx #1     ;test result
                       >            trap_ne
47c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47c5 : 68              >            pla         ;load status
47c6 : 48              >            pha
                       >            cmp_flag 0
47c7 : 0908            >            ora #decmode        ;ignore decimal mode bit
47c9 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
47cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47cd : 28              >            plp         ;restore status
                        
47ce : ca                       dex             ;00
                                tst_x 0,zero
47cf : 08              >            php         ;save flags
47d0 : e000            >            cpx #0     ;test result
                       >            trap_ne
47d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47d4 : 68              >            pla         ;load status
47d5 : 48              >            pha
                       >            cmp_flag zero
47d6 : 0908            >            ora #decmode        ;ignore decimal mode bit
47d8 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
47da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47dc : 28              >            plp         ;restore status
                        
47dd : ca                       dex             ;ff
                                tst_x $ff,minus
47de : 08              >            php         ;save flags
47df : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
47e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47e3 : 68              >            pla         ;load status
47e4 : 48              >            pha
                       >            cmp_flag minus
47e5 : 0908            >            ora #decmode        ;ignore decimal mode bit
47e7 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
47e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47eb : 28              >            plp         ;restore status
                        
                        
47ec : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
47ee : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
47f0 : 48              >            pha         ;use stack to load status
47f1 : 28              >            plp
                        
47f2 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
47f3 : 08              >            php         ;save flags
47f4 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
47f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47f8 : 68              >            pla         ;load status
47f9 : 48              >            pha
                       >            cmp_flag $ff-zero
47fa : 0908            >            ora #decmode        ;ignore decimal mode bit
47fc : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
47fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4800 : 28              >            plp         ;restore status
                        
4801 : c8                       iny             ;00
                                tst_y 0,$ff-minus
4802 : 08              >            php         ;save flags
4803 : c000            >            cpy #0     ;test result
                       >            trap_ne
4805 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4807 : 68              >            pla         ;load status
4808 : 48              >            pha
                       >            cmp_flag $ff-minus
4809 : 0908            >            ora #decmode        ;ignore decimal mode bit
480b : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
480d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
480f : 28              >            plp         ;restore status
                        
4810 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
4811 : 08              >            php         ;save flags
4812 : c001            >            cpy #1     ;test result
                       >            trap_ne
4814 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4816 : 68              >            pla         ;load status
4817 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
4818 : 0908            >            ora #decmode        ;ignore decimal mode bit
481a : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
481c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
481e : 28              >            plp         ;restore status
                        
481f : 88                       dey             ;00
                                tst_y 0,$ff-minus
4820 : 08              >            php         ;save flags
4821 : c000            >            cpy #0     ;test result
                       >            trap_ne
4823 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4825 : 68              >            pla         ;load status
4826 : 48              >            pha
                       >            cmp_flag $ff-minus
4827 : 0908            >            ora #decmode        ;ignore decimal mode bit
4829 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
482b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
482d : 28              >            plp         ;restore status
                        
482e : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
482f : 08              >            php         ;save flags
4830 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
4832 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4834 : 68              >            pla         ;load status
4835 : 48              >            pha
                       >            cmp_flag $ff-zero
4836 : 0908            >            ora #decmode        ;ignore decimal mode bit
4838 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
483a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
483c : 28              >            plp         ;restore status
                        
483d : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
483e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4840 : 48              >            pha         ;use stack to load status
4841 : 28              >            plp
                        
4842 : c8                       iny             ;ff
                                tst_y $ff,0+minus
4843 : 08              >            php         ;save flags
4844 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
4846 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4848 : 68              >            pla         ;load status
4849 : 48              >            pha
                       >            cmp_flag 0+minus
484a : 0908            >            ora #decmode        ;ignore decimal mode bit
484c : c9b8            >            cmp #(0+minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
484e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4850 : 28              >            plp         ;restore status
                        
4851 : c8                       iny             ;00
                                tst_y 0,zero
4852 : 08              >            php         ;save flags
4853 : c000            >            cpy #0     ;test result
                       >            trap_ne
4855 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4857 : 68              >            pla         ;load status
4858 : 48              >            pha
                       >            cmp_flag zero
4859 : 0908            >            ora #decmode        ;ignore decimal mode bit
485b : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
485d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
485f : 28              >            plp         ;restore status
                        
4860 : c8                       iny             ;01
                                tst_y 1,0
4861 : 08              >            php         ;save flags
4862 : c001            >            cpy #1     ;test result
                       >            trap_ne
4864 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4866 : 68              >            pla         ;load status
4867 : 48              >            pha
                       >            cmp_flag 0
4868 : 0908            >            ora #decmode        ;ignore decimal mode bit
486a : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
486c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
486e : 28              >            plp         ;restore status
                        
486f : 88                       dey             ;00
                                tst_y 0,zero
4870 : 08              >            php         ;save flags
4871 : c000            >            cpy #0     ;test result
                       >            trap_ne
4873 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4875 : 68              >            pla         ;load status
4876 : 48              >            pha
                       >            cmp_flag zero
4877 : 0908            >            ora #decmode        ;ignore decimal mode bit
4879 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
487b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
487d : 28              >            plp         ;restore status
                        
487e : 88                       dey             ;ff
                                tst_y $ff,minus
487f : 08              >            php         ;save flags
4880 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
4882 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4884 : 68              >            pla         ;load status
4885 : 48              >            pha
                       >            cmp_flag minus
4886 : 0908            >            ora #decmode        ;ignore decimal mode bit
4888 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
488a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
488c : 28              >            plp         ;restore status
                        
                                        
488d : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
488f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4891 : 48              >            pha         ;use stack to load status
4892 : 28              >            plp
                        
4893 : 8a                       txa
                                tst_a $ff,$ff-zero
4894 : 08              >            php         ;save flags
4895 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4897 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4899 : 68              >            pla         ;load status
489a : 48              >            pha
                       >            cmp_flag $ff-zero
489b : 0908            >            ora #decmode        ;ignore decimal mode bit
489d : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
489f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48a1 : 28              >            plp         ;restore status
                        
48a2 : 08                       php
48a3 : e8                       inx             ;00
48a4 : 28                       plp
48a5 : 8a                       txa
                                tst_a 0,$ff-minus
48a6 : 08              >            php         ;save flags
48a7 : c900            >            cmp #0     ;test result
                       >            trap_ne
48a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48ab : 68              >            pla         ;load status
48ac : 48              >            pha
                       >            cmp_flag $ff-minus
48ad : 0908            >            ora #decmode        ;ignore decimal mode bit
48af : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
48b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48b3 : 28              >            plp         ;restore status
                        
48b4 : 08                       php
48b5 : e8                       inx             ;01
48b6 : 28                       plp
48b7 : 8a                       txa
                                tst_a 1,$ff-minus-zero
48b8 : 08              >            php         ;save flags
48b9 : c901            >            cmp #1     ;test result
                       >            trap_ne
48bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48bd : 68              >            pla         ;load status
48be : 48              >            pha
                       >            cmp_flag $ff-minus-zero
48bf : 0908            >            ora #decmode        ;ignore decimal mode bit
48c1 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
48c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48c5 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
48c6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
48c8 : 48              >            pha         ;use stack to load status
48c9 : 28              >            plp
                        
48ca : 8a                       txa
                                tst_a 1,0
48cb : 08              >            php         ;save flags
48cc : c901            >            cmp #1     ;test result
                       >            trap_ne
48ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48d0 : 68              >            pla         ;load status
48d1 : 48              >            pha
                       >            cmp_flag 0
48d2 : 0908            >            ora #decmode        ;ignore decimal mode bit
48d4 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
48d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48d8 : 28              >            plp         ;restore status
                        
48d9 : 08                       php
48da : ca                       dex             ;00
48db : 28                       plp
48dc : 8a                       txa
                                tst_a 0,zero
48dd : 08              >            php         ;save flags
48de : c900            >            cmp #0     ;test result
                       >            trap_ne
48e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48e2 : 68              >            pla         ;load status
48e3 : 48              >            pha
                       >            cmp_flag zero
48e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
48e6 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
48e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48ea : 28              >            plp         ;restore status
                        
48eb : 08                       php
48ec : ca                       dex             ;ff
48ed : 28                       plp
48ee : 8a                       txa
                                tst_a $ff,minus
48ef : 08              >            php         ;save flags
48f0 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
48f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48f4 : 68              >            pla         ;load status
48f5 : 48              >            pha
                       >            cmp_flag minus
48f6 : 0908            >            ora #decmode        ;ignore decimal mode bit
48f8 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
48fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48fc : 28              >            plp         ;restore status
                        
                                                
48fd : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
48ff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4901 : 48              >            pha         ;use stack to load status
4902 : 28              >            plp
                        
4903 : 98                       tya
                                tst_a $ff,$ff-zero
4904 : 08              >            php         ;save flags
4905 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4907 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4909 : 68              >            pla         ;load status
490a : 48              >            pha
                       >            cmp_flag $ff-zero
490b : 0908            >            ora #decmode        ;ignore decimal mode bit
490d : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
490f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4911 : 28              >            plp         ;restore status
                        
4912 : 08                       php
4913 : c8                       iny             ;00
4914 : 28                       plp
4915 : 98                       tya
                                tst_a 0,$ff-minus
4916 : 08              >            php         ;save flags
4917 : c900            >            cmp #0     ;test result
                       >            trap_ne
4919 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
491b : 68              >            pla         ;load status
491c : 48              >            pha
                       >            cmp_flag $ff-minus
491d : 0908            >            ora #decmode        ;ignore decimal mode bit
491f : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4921 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4923 : 28              >            plp         ;restore status
                        
4924 : 08                       php
4925 : c8                       iny             ;01
4926 : 28                       plp
4927 : 98                       tya
                                tst_a 1,$ff-minus-zero
4928 : 08              >            php         ;save flags
4929 : c901            >            cmp #1     ;test result
                       >            trap_ne
492b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
492d : 68              >            pla         ;load status
492e : 48              >            pha
                       >            cmp_flag $ff-minus-zero
492f : 0908            >            ora #decmode        ;ignore decimal mode bit
4931 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4933 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4935 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
4936 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4938 : 48              >            pha         ;use stack to load status
4939 : 28              >            plp
                        
493a : 98                       tya
                                tst_a 1,0
493b : 08              >            php         ;save flags
493c : c901            >            cmp #1     ;test result
                       >            trap_ne
493e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4940 : 68              >            pla         ;load status
4941 : 48              >            pha
                       >            cmp_flag 0
4942 : 0908            >            ora #decmode        ;ignore decimal mode bit
4944 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4946 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4948 : 28              >            plp         ;restore status
                        
4949 : 08                       php
494a : 88                       dey             ;00
494b : 28                       plp
494c : 98                       tya
                                tst_a 0,zero
494d : 08              >            php         ;save flags
494e : c900            >            cmp #0     ;test result
                       >            trap_ne
4950 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4952 : 68              >            pla         ;load status
4953 : 48              >            pha
                       >            cmp_flag zero
4954 : 0908            >            ora #decmode        ;ignore decimal mode bit
4956 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4958 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
495a : 28              >            plp         ;restore status
                        
495b : 08                       php
495c : 88                       dey             ;ff
495d : 28                       plp
495e : 98                       tya
                                tst_a $ff,minus
495f : 08              >            php         ;save flags
4960 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4962 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4964 : 68              >            pla         ;load status
4965 : 48              >            pha
                       >            cmp_flag minus
4966 : 0908            >            ora #decmode        ;ignore decimal mode bit
4968 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
496a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
496c : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
496d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
496f : 48                       pha
4970 : a2ff                     ldx #$ff        ;ff
4972 : 8a                       txa
4973 : 28                       plp             
4974 : a8                       tay
                                tst_y $ff,$ff-zero
4975 : 08              >            php         ;save flags
4976 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
4978 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
497a : 68              >            pla         ;load status
497b : 48              >            pha
                       >            cmp_flag $ff-zero
497c : 0908            >            ora #decmode        ;ignore decimal mode bit
497e : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4980 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4982 : 28              >            plp         ;restore status
                        
4983 : 08                       php
4984 : e8                       inx             ;00
4985 : 8a                       txa
4986 : 28                       plp
4987 : a8                       tay
                                tst_y 0,$ff-minus
4988 : 08              >            php         ;save flags
4989 : c000            >            cpy #0     ;test result
                       >            trap_ne
498b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
498d : 68              >            pla         ;load status
498e : 48              >            pha
                       >            cmp_flag $ff-minus
498f : 0908            >            ora #decmode        ;ignore decimal mode bit
4991 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4993 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4995 : 28              >            plp         ;restore status
                        
4996 : 08                       php
4997 : e8                       inx             ;01
4998 : 8a                       txa
4999 : 28                       plp
499a : a8                       tay
                                tst_y 1,$ff-minus-zero
499b : 08              >            php         ;save flags
499c : c001            >            cpy #1     ;test result
                       >            trap_ne
499e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49a0 : 68              >            pla         ;load status
49a1 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
49a2 : 0908            >            ora #decmode        ;ignore decimal mode bit
49a4 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
49a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49a8 : 28              >            plp         ;restore status
                        
                                load_flag 0
49a9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
49ab : 48                       pha
49ac : a900                     lda #0
49ae : 8a                       txa
49af : 28                       plp
49b0 : a8                       tay
                                tst_y 1,0
49b1 : 08              >            php         ;save flags
49b2 : c001            >            cpy #1     ;test result
                       >            trap_ne
49b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49b6 : 68              >            pla         ;load status
49b7 : 48              >            pha
                       >            cmp_flag 0
49b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
49ba : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
49bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49be : 28              >            plp         ;restore status
                        
49bf : 08                       php
49c0 : ca                       dex             ;00
49c1 : 8a                       txa
49c2 : 28                       plp
49c3 : a8                       tay
                                tst_y 0,zero
49c4 : 08              >            php         ;save flags
49c5 : c000            >            cpy #0     ;test result
                       >            trap_ne
49c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49c9 : 68              >            pla         ;load status
49ca : 48              >            pha
                       >            cmp_flag zero
49cb : 0908            >            ora #decmode        ;ignore decimal mode bit
49cd : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
49cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49d1 : 28              >            plp         ;restore status
                        
49d2 : 08                       php
49d3 : ca                       dex             ;ff
49d4 : 8a                       txa
49d5 : 28                       plp
49d6 : a8                       tay
                                tst_y $ff,minus
49d7 : 08              >            php         ;save flags
49d8 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
49da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49dc : 68              >            pla         ;load status
49dd : 48              >            pha
                       >            cmp_flag minus
49de : 0908            >            ora #decmode        ;ignore decimal mode bit
49e0 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
49e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49e4 : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
49e5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
49e7 : 48                       pha
49e8 : a0ff                     ldy #$ff        ;ff
49ea : 98                       tya
49eb : 28                       plp
49ec : aa                       tax
                                tst_x $ff,$ff-zero
49ed : 08              >            php         ;save flags
49ee : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
49f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49f2 : 68              >            pla         ;load status
49f3 : 48              >            pha
                       >            cmp_flag $ff-zero
49f4 : 0908            >            ora #decmode        ;ignore decimal mode bit
49f6 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
49f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
49fa : 28              >            plp         ;restore status
                        
49fb : 08                       php
49fc : c8                       iny             ;00
49fd : 98                       tya
49fe : 28                       plp
49ff : aa                       tax
                                tst_x 0,$ff-minus
4a00 : 08              >            php         ;save flags
4a01 : e000            >            cpx #0     ;test result
                       >            trap_ne
4a03 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a05 : 68              >            pla         ;load status
4a06 : 48              >            pha
                       >            cmp_flag $ff-minus
4a07 : 0908            >            ora #decmode        ;ignore decimal mode bit
4a09 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4a0b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a0d : 28              >            plp         ;restore status
                        
4a0e : 08                       php
4a0f : c8                       iny             ;01
4a10 : 98                       tya
4a11 : 28                       plp
4a12 : aa                       tax
                                tst_x 1,$ff-minus-zero
4a13 : 08              >            php         ;save flags
4a14 : e001            >            cpx #1     ;test result
                       >            trap_ne
4a16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a18 : 68              >            pla         ;load status
4a19 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
4a1a : 0908            >            ora #decmode        ;ignore decimal mode bit
4a1c : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4a1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a20 : 28              >            plp         ;restore status
                        
                                load_flag 0
4a21 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
4a23 : 48                       pha
4a24 : a900                     lda #0          ;preset status
4a26 : 98                       tya
4a27 : 28                       plp
4a28 : aa                       tax
                                tst_x 1,0
4a29 : 08              >            php         ;save flags
4a2a : e001            >            cpx #1     ;test result
                       >            trap_ne
4a2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a2e : 68              >            pla         ;load status
4a2f : 48              >            pha
                       >            cmp_flag 0
4a30 : 0908            >            ora #decmode        ;ignore decimal mode bit
4a32 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4a34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a36 : 28              >            plp         ;restore status
                        
4a37 : 08                       php
4a38 : 88                       dey             ;00
4a39 : 98                       tya
4a3a : 28                       plp
4a3b : aa                       tax
                                tst_x 0,zero
4a3c : 08              >            php         ;save flags
4a3d : e000            >            cpx #0     ;test result
                       >            trap_ne
4a3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a41 : 68              >            pla         ;load status
4a42 : 48              >            pha
                       >            cmp_flag zero
4a43 : 0908            >            ora #decmode        ;ignore decimal mode bit
4a45 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4a47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a49 : 28              >            plp         ;restore status
                        
4a4a : 08                       php
4a4b : 88                       dey             ;ff
4a4c : 98                       tya
4a4d : 28                       plp
4a4e : aa                       tax
                                tst_x $ff,minus
4a4f : 08              >            php         ;save flags
4a50 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
4a52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a54 : 68              >            pla         ;load status
4a55 : 48              >            pha
                       >            cmp_flag minus
4a56 : 0908            >            ora #decmode        ;ignore decimal mode bit
4a58 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
4a5a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4a5c : 28              >            plp         ;restore status
                        
                                next_test
4a5d : ad0002          >            lda test_case   ;previous test
4a60 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4a62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
4a64 : a90e            >            lda #test_num   ;*** next tests' number
4a66 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
4a69 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
4a6b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4a6d : 48              >            pha         ;use stack to load status
4a6e : 28              >            plp
                        
4a6f : 9a                       txs
4a70 : 08                       php
4a71 : ad0101                   lda $101
                                cmp_flag $ff
4a74 : 0908            >            ora #decmode        ;ignore decimal mode bit
4a76 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4a78 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4a7a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4a7c : 48              >            pha         ;use stack to load status
4a7d : 28              >            plp
                        
4a7e : 9a                       txs
4a7f : 08                       php
4a80 : ad0101                   lda $101
                                cmp_flag 0
4a83 : 0908            >            ora #decmode        ;ignore decimal mode bit
4a85 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4a87 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a89 : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
4a8a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4a8c : 48              >            pha         ;use stack to load status
4a8d : 28              >            plp
                        
4a8e : 9a                       txs
4a8f : 08                       php
4a90 : ad0001                   lda $100
                                cmp_flag $ff
4a93 : 0908            >            ora #decmode        ;ignore decimal mode bit
4a95 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4a97 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4a99 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4a9b : 48              >            pha         ;use stack to load status
4a9c : 28              >            plp
                        
4a9d : 9a                       txs
4a9e : 08                       php
4a9f : ad0001                   lda $100
                                cmp_flag 0
4aa2 : 0908            >            ora #decmode        ;ignore decimal mode bit
4aa4 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4aa6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4aa8 : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
4aa9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4aab : 48              >            pha         ;use stack to load status
4aac : 28              >            plp
                        
4aad : 9a                       txs
4aae : 08                       php
4aaf : adff01                   lda $1ff
                                cmp_flag $ff
4ab2 : 0908            >            ora #decmode        ;ignore decimal mode bit
4ab4 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4ab6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4ab8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4aba : 48              >            pha         ;use stack to load status
4abb : 28              >            plp
                        
4abc : 9a                       txs
4abd : 08                       php
4abe : adff01                   lda $1ff
                                cmp_flag 0
4ac1 : 0908            >            ora #decmode        ;ignore decimal mode bit
4ac3 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                
4ac5 : a201                     ldx #1
4ac7 : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
4ac8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4aca : 48              >            pha         ;use stack to load status
4acb : 28              >            plp
                        
4acc : ba                       tsx             ;clears Z, N
4acd : 08                       php             ;sp=00
4ace : e001                     cpx #1
                                trap_ne
4ad0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ad2 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
4ad5 : 0908            >            ora #decmode        ;ignore decimal mode bit
4ad7 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4ad9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4adb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4add : 48              >            pha         ;use stack to load status
4ade : 28              >            plp
                        
4adf : ba                       tsx             ;clears N, sets Z
4ae0 : 08                       php             ;sp=ff
4ae1 : e000                     cpx #0
                                trap_ne
4ae3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ae5 : ad0001                   lda $100
                                cmp_flag $ff-minus
4ae8 : 0908            >            ora #decmode        ;ignore decimal mode bit
4aea : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4aec : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4aee : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4af0 : 48              >            pha         ;use stack to load status
4af1 : 28              >            plp
                        
4af2 : ba                       tsx             ;clears N, sets Z
4af3 : 08                       php             ;sp=fe
4af4 : e0ff                     cpx #$ff
                                trap_ne
4af6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4af8 : adff01                   lda $1ff
                                cmp_flag $ff-zero
4afb : 0908            >            ora #decmode        ;ignore decimal mode bit
4afd : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4aff : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
4b01 : a201                     ldx #1
4b03 : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
4b04 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b06 : 48              >            pha         ;use stack to load status
4b07 : 28              >            plp
                        
4b08 : ba                       tsx             ;clears Z, N
4b09 : 08                       php             ;sp=00
4b0a : e001                     cpx #1
                                trap_ne
4b0c : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b0e : ad0101                   lda $101
                                cmp_flag 0
4b11 : 0908            >            ora #decmode        ;ignore decimal mode bit
4b13 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4b15 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4b17 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b19 : 48              >            pha         ;use stack to load status
4b1a : 28              >            plp
                        
4b1b : ba                       tsx             ;clears N, sets Z
4b1c : 08                       php             ;sp=ff
4b1d : e000                     cpx #0
                                trap_ne
4b1f : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b21 : ad0001                   lda $100
                                cmp_flag zero
4b24 : 0908            >            ora #decmode        ;ignore decimal mode bit
4b26 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4b28 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4b2a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b2c : 48              >            pha         ;use stack to load status
4b2d : 28              >            plp
                        
4b2e : ba                       tsx             ;clears N, sets Z
4b2f : 08                       php             ;sp=fe
4b30 : e0ff                     cpx #$ff
                                trap_ne
4b32 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b34 : adff01                   lda $1ff
                                cmp_flag minus
4b37 : 0908            >            ora #decmode        ;ignore decimal mode bit
4b39 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
4b3b : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b3d : 68                       pla             ;sp=ff
                                next_test
4b3e : ad0002          >            lda test_case   ;previous test
4b41 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4b43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
4b45 : a90f            >            lda #test_num   ;*** next tests' number
4b47 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
4b4a : a003                     ldy #3
4b4c :                  tldx    
                                set_stat 0
                       >            load_flag 0
4b4c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b4e : 48              >            pha         ;use stack to load status
4b4f : 28              >            plp
                        
4b50 : b60b                     ldx zp1,y
4b52 : 08                       php         ;test stores do not alter flags
4b53 : 8a                       txa
4b54 : 49c3                     eor #$c3
4b56 : 28                       plp
4b57 : 990302                   sta abst,y
4b5a : 08                       php         ;flags after load/store sequence
4b5b : 49c3                     eor #$c3
4b5d : d91802                   cmp abs1,y  ;test result
                                trap_ne
4b60 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b62 : 68                       pla         ;load status
                                eor_flag 0
4b63 : 0908            >            ora #decmode        ;ignore decimal mode bit
4b65 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4b67 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
4b6a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b6c : 88                       dey
4b6d : 10dd                     bpl tldx                  
                        
4b6f : a003                     ldy #3
4b71 :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
4b71 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4b73 : 48              >            pha         ;use stack to load status
4b74 : 28              >            plp
                        
4b75 : b60b                     ldx zp1,y
4b77 : 08                       php         ;test stores do not alter flags
4b78 : 8a                       txa
4b79 : 49c3                     eor #$c3
4b7b : 28                       plp
4b7c : 990302                   sta abst,y
4b7f : 08                       php         ;flags after load/store sequence
4b80 : 49c3                     eor #$c3
4b82 : d91802                   cmp abs1,y  ;test result
                                trap_ne
4b85 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b87 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4b88 : 0908            >            ora #decmode        ;ignore decimal mode bit
4b8a : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4b8c : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
4b8f : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b91 : 88                       dey
4b92 : 10dd                     bpl tldx1                  
                        
4b94 : a003                     ldy #3
4b96 :                  tldx2   
                                set_stat 0
                       >            load_flag 0
4b96 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b98 : 48              >            pha         ;use stack to load status
4b99 : 28              >            plp
                        
4b9a : be1802                   ldx abs1,y
4b9d : 08                       php         ;test stores do not alter flags
4b9e : 8a                       txa
4b9f : 49c3                     eor #$c3
4ba1 : aa                       tax
4ba2 : 28                       plp
4ba3 : 9602                     stx zpt,y
4ba5 : 08                       php         ;flags after load/store sequence
4ba6 : 49c3                     eor #$c3
4ba8 : d90b00                   cmp zp1,y   ;test result
                                trap_ne
4bab : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bad : 68                       pla         ;load status
                                eor_flag 0
4bae : 0908            >            ora #decmode        ;ignore decimal mode bit
4bb0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4bb2 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
4bb5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bb7 : 88                       dey
4bb8 : 10dc                     bpl tldx2                  
                        
4bba : a003                     ldy #3
4bbc :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
4bbc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4bbe : 48              >            pha         ;use stack to load status
4bbf : 28              >            plp
                        
4bc0 : be1802                   ldx abs1,y
4bc3 : 08                       php         ;test stores do not alter flags
4bc4 : 8a                       txa
4bc5 : 49c3                     eor #$c3
4bc7 : aa                       tax
4bc8 : 28                       plp
4bc9 : 9602                     stx zpt,y
4bcb : 08                       php         ;flags after load/store sequence
4bcc : 49c3                     eor #$c3
4bce : d90b00                   cmp zp1,y   ;test result
                                trap_ne
4bd1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bd3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4bd4 : 0908            >            ora #decmode        ;ignore decimal mode bit
4bd6 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4bd8 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
4bdb : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bdd : 88                       dey
4bde : 10dc                     bpl tldx3
                                
4be0 : a003                     ldy #3      ;testing store result
4be2 : a200                     ldx #0
4be4 : b90200           tstx    lda zpt,y
4be7 : 49c3                     eor #$c3
4be9 : d90b00                   cmp zp1,y
                                trap_ne     ;store to zp data
4bec : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bee : 9602                     stx zpt,y   ;clear                
4bf0 : b90302                   lda abst,y
4bf3 : 49c3                     eor #$c3
4bf5 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
4bf8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bfa : 8a                       txa
4bfb : 990302                   sta abst,y  ;clear                
4bfe : 88                       dey
4bff : 10e3                     bpl tstx
                                next_test
4c01 : ad0002          >            lda test_case   ;previous test
4c04 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4c06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
4c08 : a910            >            lda #test_num   ;*** next tests' number
4c0a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
4c0d : a0fd                     ldy #3+$fa
4c0f : b611             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
4c11 : 8a                       txa
4c12 : 990901                   sta abst-$fa,y      ;no STX abs,y!
4c15 : 88                       dey
4c16 : c0fa                     cpy #$fa
4c18 : b0f5                     bcs tldx4                  
4c1a : a0fd                     ldy #3+$fa
4c1c : be1e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
4c1f : 9608                     stx zpt-$fa&$ff,y
4c21 : 88                       dey
4c22 : c0fa                     cpy #$fa
4c24 : b0f6                     bcs tldx5                  
4c26 : a003                     ldy #3      ;testing wraparound result
4c28 : a200                     ldx #0
4c2a : b90200           tstx1   lda zpt,y
4c2d : d90b00                   cmp zp1,y
                                trap_ne     ;store to zp data
4c30 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c32 : 9602                     stx zpt,y   ;clear                
4c34 : b90302                   lda abst,y
4c37 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
4c3a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c3c : 8a                       txa
4c3d : 990302                   sta abst,y  ;clear                
4c40 : 88                       dey
4c41 : 10e7                     bpl tstx1
                                next_test
4c43 : ad0002          >            lda test_case   ;previous test
4c46 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4c48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
4c4a : a911            >            lda #test_num   ;*** next tests' number
4c4c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
4c4f : a203                     ldx #3
4c51 :                  tldy    
                                set_stat 0
                       >            load_flag 0
4c51 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4c53 : 48              >            pha         ;use stack to load status
4c54 : 28              >            plp
                        
4c55 : b40b                     ldy zp1,x
4c57 : 08                       php         ;test stores do not alter flags
4c58 : 98                       tya
4c59 : 49c3                     eor #$c3
4c5b : 28                       plp
4c5c : 9d0302                   sta abst,x
4c5f : 08                       php         ;flags after load/store sequence
4c60 : 49c3                     eor #$c3
4c62 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
4c65 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c67 : 68                       pla         ;load status
                                eor_flag 0
4c68 : 0908            >            ora #decmode        ;ignore decimal mode bit
4c6a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4c6c : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
4c6f : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c71 : ca                       dex
4c72 : 10dd                     bpl tldy                  
                        
4c74 : a203                     ldx #3
4c76 :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
4c76 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4c78 : 48              >            pha         ;use stack to load status
4c79 : 28              >            plp
                        
4c7a : b40b                     ldy zp1,x
4c7c : 08                       php         ;test stores do not alter flags
4c7d : 98                       tya
4c7e : 49c3                     eor #$c3
4c80 : 28                       plp
4c81 : 9d0302                   sta abst,x
4c84 : 08                       php         ;flags after load/store sequence
4c85 : 49c3                     eor #$c3
4c87 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
4c8a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c8c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4c8d : 0908            >            ora #decmode        ;ignore decimal mode bit
4c8f : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4c91 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
4c94 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c96 : ca                       dex
4c97 : 10dd                     bpl tldy1                  
                        
4c99 : a203                     ldx #3
4c9b :                  tldy2   
                                set_stat 0
                       >            load_flag 0
4c9b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4c9d : 48              >            pha         ;use stack to load status
4c9e : 28              >            plp
                        
4c9f : bc1802                   ldy abs1,x
4ca2 : 08                       php         ;test stores do not alter flags
4ca3 : 98                       tya
4ca4 : 49c3                     eor #$c3
4ca6 : a8                       tay
4ca7 : 28                       plp
4ca8 : 9402                     sty zpt,x
4caa : 08                       php         ;flags after load/store sequence
4cab : 49c3                     eor #$c3
4cad : d50b                     cmp zp1,x   ;test result
                                trap_ne
4caf : d0fe            >        bne *           ;failed not equal (non zero)
                        
4cb1 : 68                       pla         ;load status
                                eor_flag 0
4cb2 : 0908            >            ora #decmode        ;ignore decimal mode bit
4cb4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4cb6 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
4cb9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4cbb : ca                       dex
4cbc : 10dd                     bpl tldy2                  
                        
4cbe : a203                     ldx #3
4cc0 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
4cc0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4cc2 : 48              >            pha         ;use stack to load status
4cc3 : 28              >            plp
                        
4cc4 : bc1802                   ldy abs1,x
4cc7 : 08                       php         ;test stores do not alter flags
4cc8 : 98                       tya
4cc9 : 49c3                     eor #$c3
4ccb : a8                       tay
4ccc : 28                       plp
4ccd : 9402                     sty zpt,x
4ccf : 08                       php         ;flags after load/store sequence
4cd0 : 49c3                     eor #$c3
4cd2 : d50b                     cmp zp1,x   ;test result
                                trap_ne
4cd4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4cd6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4cd7 : 0908            >            ora #decmode        ;ignore decimal mode bit
4cd9 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4cdb : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
4cde : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ce0 : ca                       dex
4ce1 : 10dd                     bpl tldy3
                        
4ce3 : a203                     ldx #3      ;testing store result
4ce5 : a000                     ldy #0
4ce7 : b502             tsty    lda zpt,x
4ce9 : 49c3                     eor #$c3
4ceb : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
4ced : d0fe            >        bne *           ;failed not equal (non zero)
                        
4cef : 9402                     sty zpt,x   ;clear                
4cf1 : bd0302                   lda abst,x
4cf4 : 49c3                     eor #$c3
4cf6 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
4cf9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4cfb : 8a                       txa
4cfc : 9d0302                   sta abst,x  ;clear                
4cff : ca                       dex
4d00 : 10e5                     bpl tsty
                                next_test
4d02 : ad0002          >            lda test_case   ;previous test
4d05 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4d07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
4d09 : a912            >            lda #test_num   ;*** next tests' number
4d0b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
4d0e : a2fd                     ldx #3+$fa
4d10 : b411             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
4d12 : 98                       tya
4d13 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
4d16 : ca                       dex
4d17 : e0fa                     cpx #$fa
4d19 : b0f5                     bcs tldy4                  
4d1b : a2fd                     ldx #3+$fa
4d1d : bc1e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
4d20 : 9408                     sty zpt-$fa&$ff,x
4d22 : ca                       dex
4d23 : e0fa                     cpx #$fa
4d25 : b0f6                     bcs tldy5                  
4d27 : a203                     ldx #3      ;testing wraparound result
4d29 : a000                     ldy #0
4d2b : b502             tsty1   lda zpt,x
4d2d : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
4d2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d31 : 9402                     sty zpt,x   ;clear                
4d33 : bd0302                   lda abst,x
4d36 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
4d39 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d3b : 8a                       txa
4d3c : 9d0302                   sta abst,x  ;clear                
4d3f : ca                       dex
4d40 : 10e9                     bpl tsty1
                                next_test
4d42 : ad0002          >            lda test_case   ;previous test
4d45 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4d47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
4d49 : a913            >            lda #test_num   ;*** next tests' number
4d4b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
4d4e : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
4d50 : 48              >            pha         ;use stack to load status
4d51 : 28              >            plp
                        
4d52 : a60b                     ldx zp1
4d54 : 08                       php         ;test stores do not alter flags
4d55 : 8a                       txa
4d56 : 49c3                     eor #$c3
4d58 : aa                       tax
4d59 : 28                       plp
4d5a : 8e0302                   stx abst
4d5d : 08                       php         ;flags after load/store sequence
4d5e : 49c3                     eor #$c3
4d60 : aa                       tax
4d61 : e0c3                     cpx #$c3    ;test result
                                trap_ne
4d63 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d65 : 68                       pla         ;load status
                                eor_flag 0
4d66 : 0908            >            ora #decmode        ;ignore decimal mode bit
4d68 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4d6a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
4d6d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4d6f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4d71 : 48              >            pha         ;use stack to load status
4d72 : 28              >            plp
                        
4d73 : a60c                     ldx zp1+1
4d75 : 08                       php         ;test stores do not alter flags
4d76 : 8a                       txa
4d77 : 49c3                     eor #$c3
4d79 : aa                       tax
4d7a : 28                       plp
4d7b : 8e0402                   stx abst+1
4d7e : 08                       php         ;flags after load/store sequence
4d7f : 49c3                     eor #$c3
4d81 : aa                       tax
4d82 : e082                     cpx #$82    ;test result
                                trap_ne
4d84 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d86 : 68                       pla         ;load status
                                eor_flag 0
4d87 : 0908            >            ora #decmode        ;ignore decimal mode bit
4d89 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4d8b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
4d8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4d90 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4d92 : 48              >            pha         ;use stack to load status
4d93 : 28              >            plp
                        
4d94 : a60d                     ldx zp1+2
4d96 : 08                       php         ;test stores do not alter flags
4d97 : 8a                       txa
4d98 : 49c3                     eor #$c3
4d9a : aa                       tax
4d9b : 28                       plp
4d9c : 8e0502                   stx abst+2
4d9f : 08                       php         ;flags after load/store sequence
4da0 : 49c3                     eor #$c3
4da2 : aa                       tax
4da3 : e041                     cpx #$41    ;test result
                                trap_ne
4da5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4da7 : 68                       pla         ;load status
                                eor_flag 0
4da8 : 0908            >            ora #decmode        ;ignore decimal mode bit
4daa : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4dac : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
4daf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4db1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4db3 : 48              >            pha         ;use stack to load status
4db4 : 28              >            plp
                        
4db5 : a60e                     ldx zp1+3
4db7 : 08                       php         ;test stores do not alter flags
4db8 : 8a                       txa
4db9 : 49c3                     eor #$c3
4dbb : aa                       tax
4dbc : 28                       plp
4dbd : 8e0602                   stx abst+3
4dc0 : 08                       php         ;flags after load/store sequence
4dc1 : 49c3                     eor #$c3
4dc3 : aa                       tax
4dc4 : e000                     cpx #0      ;test result
                                trap_ne
4dc6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4dc8 : 68                       pla         ;load status
                                eor_flag 0
4dc9 : 0908            >            ora #decmode        ;ignore decimal mode bit
4dcb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4dcd : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
4dd0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
4dd2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4dd4 : 48              >            pha         ;use stack to load status
4dd5 : 28              >            plp
                        
4dd6 : a60b                     ldx zp1  
4dd8 : 08                       php         ;test stores do not alter flags
4dd9 : 8a                       txa
4dda : 49c3                     eor #$c3
4ddc : aa                       tax
4ddd : 28                       plp
4dde : 8e0302                   stx abst  
4de1 : 08                       php         ;flags after load/store sequence
4de2 : 49c3                     eor #$c3
4de4 : aa                       tax
4de5 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
4de7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4de9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4dea : 0908            >            ora #decmode        ;ignore decimal mode bit
4dec : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4dee : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
4df1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4df3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4df5 : 48              >            pha         ;use stack to load status
4df6 : 28              >            plp
                        
4df7 : a60c                     ldx zp1+1
4df9 : 08                       php         ;test stores do not alter flags
4dfa : 8a                       txa
4dfb : 49c3                     eor #$c3
4dfd : aa                       tax
4dfe : 28                       plp
4dff : 8e0402                   stx abst+1
4e02 : 08                       php         ;flags after load/store sequence
4e03 : 49c3                     eor #$c3
4e05 : aa                       tax
4e06 : e082                     cpx #$82    ;test result
                                trap_ne
4e08 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e0a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e0b : 0908            >            ora #decmode        ;ignore decimal mode bit
4e0d : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4e0f : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
4e12 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4e14 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e16 : 48              >            pha         ;use stack to load status
4e17 : 28              >            plp
                        
4e18 : a60d                     ldx zp1+2
4e1a : 08                       php         ;test stores do not alter flags
4e1b : 8a                       txa
4e1c : 49c3                     eor #$c3
4e1e : aa                       tax
4e1f : 28                       plp
4e20 : 8e0502                   stx abst+2
4e23 : 08                       php         ;flags after load/store sequence
4e24 : 49c3                     eor #$c3
4e26 : aa                       tax
4e27 : e041                     cpx #$41    ;test result
                                trap_ne     ;
4e29 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e2b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e2c : 0908            >            ora #decmode        ;ignore decimal mode bit
4e2e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4e30 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
4e33 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4e35 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e37 : 48              >            pha         ;use stack to load status
4e38 : 28              >            plp
                        
4e39 : a60e                     ldx zp1+3
4e3b : 08                       php         ;test stores do not alter flags
4e3c : 8a                       txa
4e3d : 49c3                     eor #$c3
4e3f : aa                       tax
4e40 : 28                       plp
4e41 : 8e0602                   stx abst+3
4e44 : 08                       php         ;flags after load/store sequence
4e45 : 49c3                     eor #$c3
4e47 : aa                       tax
4e48 : e000                     cpx #0      ;test result
                                trap_ne
4e4a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e4c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e4d : 0908            >            ora #decmode        ;ignore decimal mode bit
4e4f : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4e51 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
4e54 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
4e56 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e58 : 48              >            pha         ;use stack to load status
4e59 : 28              >            plp
                        
4e5a : ae1802                   ldx abs1  
4e5d : 08                       php         ;test stores do not alter flags
4e5e : 8a                       txa
4e5f : 49c3                     eor #$c3
4e61 : aa                       tax
4e62 : 28                       plp
4e63 : 8602                     stx zpt  
4e65 : 08                       php         ;flags after load/store sequence
4e66 : 49c3                     eor #$c3
4e68 : c50b                     cmp zp1     ;test result
                                trap_ne
4e6a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e6c : 68                       pla         ;load status
                                eor_flag 0
4e6d : 0908            >            ora #decmode        ;ignore decimal mode bit
4e6f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4e71 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
4e74 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4e76 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e78 : 48              >            pha         ;use stack to load status
4e79 : 28              >            plp
                        
4e7a : ae1902                   ldx abs1+1
4e7d : 08                       php         ;test stores do not alter flags
4e7e : 8a                       txa
4e7f : 49c3                     eor #$c3
4e81 : aa                       tax
4e82 : 28                       plp
4e83 : 8603                     stx zpt+1
4e85 : 08                       php         ;flags after load/store sequence
4e86 : 49c3                     eor #$c3
4e88 : c50c                     cmp zp1+1   ;test result
                                trap_ne
4e8a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e8c : 68                       pla         ;load status
                                eor_flag 0
4e8d : 0908            >            ora #decmode        ;ignore decimal mode bit
4e8f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4e91 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
4e94 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4e96 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e98 : 48              >            pha         ;use stack to load status
4e99 : 28              >            plp
                        
4e9a : ae1a02                   ldx abs1+2
4e9d : 08                       php         ;test stores do not alter flags
4e9e : 8a                       txa
4e9f : 49c3                     eor #$c3
4ea1 : aa                       tax
4ea2 : 28                       plp
4ea3 : 8604                     stx zpt+2
4ea5 : 08                       php         ;flags after load/store sequence
4ea6 : 49c3                     eor #$c3
4ea8 : c50d                     cmp zp1+2   ;test result
                                trap_ne
4eaa : d0fe            >        bne *           ;failed not equal (non zero)
                        
4eac : 68                       pla         ;load status
                                eor_flag 0
4ead : 0908            >            ora #decmode        ;ignore decimal mode bit
4eaf : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4eb1 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
4eb4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4eb6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4eb8 : 48              >            pha         ;use stack to load status
4eb9 : 28              >            plp
                        
4eba : ae1b02                   ldx abs1+3
4ebd : 08                       php         ;test stores do not alter flags
4ebe : 8a                       txa
4ebf : 49c3                     eor #$c3
4ec1 : aa                       tax
4ec2 : 28                       plp
4ec3 : 8605                     stx zpt+3
4ec5 : 08                       php         ;flags after load/store sequence
4ec6 : 49c3                     eor #$c3
4ec8 : c50e                     cmp zp1+3   ;test result
                                trap_ne
4eca : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ecc : 68                       pla         ;load status
                                eor_flag 0
4ecd : 0908            >            ora #decmode        ;ignore decimal mode bit
4ecf : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4ed1 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
4ed4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
4ed6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4ed8 : 48              >            pha         ;use stack to load status
4ed9 : 28              >            plp
                        
4eda : ae1802                   ldx abs1  
4edd : 08                       php         ;test stores do not alter flags
4ede : 8a                       txa
4edf : 49c3                     eor #$c3
4ee1 : aa                       tax
4ee2 : 28                       plp
4ee3 : 8602                     stx zpt  
4ee5 : 08                       php         ;flags after load/store sequence
4ee6 : 49c3                     eor #$c3
4ee8 : aa                       tax
4ee9 : e40b                     cpx zp1     ;test result
                                trap_ne
4eeb : d0fe            >        bne *           ;failed not equal (non zero)
                        
4eed : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4eee : 0908            >            ora #decmode        ;ignore decimal mode bit
4ef0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4ef2 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
4ef5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4ef7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4ef9 : 48              >            pha         ;use stack to load status
4efa : 28              >            plp
                        
4efb : ae1902                   ldx abs1+1
4efe : 08                       php         ;test stores do not alter flags
4eff : 8a                       txa
4f00 : 49c3                     eor #$c3
4f02 : aa                       tax
4f03 : 28                       plp
4f04 : 8603                     stx zpt+1
4f06 : 08                       php         ;flags after load/store sequence
4f07 : 49c3                     eor #$c3
4f09 : aa                       tax
4f0a : e40c                     cpx zp1+1   ;test result
                                trap_ne
4f0c : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f0e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4f0f : 0908            >            ora #decmode        ;ignore decimal mode bit
4f11 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4f13 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
4f16 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4f18 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4f1a : 48              >            pha         ;use stack to load status
4f1b : 28              >            plp
                        
4f1c : ae1a02                   ldx abs1+2
4f1f : 08                       php         ;test stores do not alter flags
4f20 : 8a                       txa
4f21 : 49c3                     eor #$c3
4f23 : aa                       tax
4f24 : 28                       plp
4f25 : 8604                     stx zpt+2
4f27 : 08                       php         ;flags after load/store sequence
4f28 : 49c3                     eor #$c3
4f2a : aa                       tax
4f2b : e40d                     cpx zp1+2   ;test result
                                trap_ne
4f2d : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f2f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4f30 : 0908            >            ora #decmode        ;ignore decimal mode bit
4f32 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4f34 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
4f37 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4f39 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4f3b : 48              >            pha         ;use stack to load status
4f3c : 28              >            plp
                        
4f3d : ae1b02                   ldx abs1+3
4f40 : 08                       php         ;test stores do not alter flags
4f41 : 8a                       txa
4f42 : 49c3                     eor #$c3
4f44 : aa                       tax
4f45 : 28                       plp
4f46 : 8605                     stx zpt+3
4f48 : 08                       php         ;flags after load/store sequence
4f49 : 49c3                     eor #$c3
4f4b : aa                       tax
4f4c : e40e                     cpx zp1+3   ;test result
                                trap_ne
4f4e : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f50 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4f51 : 0908            >            ora #decmode        ;ignore decimal mode bit
4f53 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4f55 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
4f58 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0  
                       >            load_flag 0  
4f5a : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
4f5c : 48              >            pha         ;use stack to load status
4f5d : 28              >            plp
                        
4f5e : a2c3                     ldx #$c3
4f60 : 08                       php
4f61 : ec1802                   cpx abs1    ;test result
                                trap_ne
4f64 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f66 : 68                       pla         ;load status
                                eor_flag 0
4f67 : 0908            >            ora #decmode        ;ignore decimal mode bit
4f69 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4f6b : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
4f6e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4f70 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4f72 : 48              >            pha         ;use stack to load status
4f73 : 28              >            plp
                        
4f74 : a282                     ldx #$82
4f76 : 08                       php
4f77 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
4f7a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f7c : 68                       pla         ;load status
                                eor_flag 0
4f7d : 0908            >            ora #decmode        ;ignore decimal mode bit
4f7f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4f81 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
4f84 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4f86 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4f88 : 48              >            pha         ;use stack to load status
4f89 : 28              >            plp
                        
4f8a : a241                     ldx #$41
4f8c : 08                       php
4f8d : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
4f90 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f92 : 68                       pla         ;load status
                                eor_flag 0
4f93 : 0908            >            ora #decmode        ;ignore decimal mode bit
4f95 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4f97 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
4f9a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4f9c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4f9e : 48              >            pha         ;use stack to load status
4f9f : 28              >            plp
                        
4fa0 : a200                     ldx #0
4fa2 : 08                       php
4fa3 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
4fa6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4fa8 : 68                       pla         ;load status
                                eor_flag 0
4fa9 : 0908            >            ora #decmode        ;ignore decimal mode bit
4fab : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
4fad : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
4fb0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
4fb2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4fb4 : 48              >            pha         ;use stack to load status
4fb5 : 28              >            plp
                        
4fb6 : a2c3                     ldx #$c3  
4fb8 : 08                       php
4fb9 : ec1802                   cpx abs1    ;test result
                                trap_ne
4fbc : d0fe            >        bne *           ;failed not equal (non zero)
                        
4fbe : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4fbf : 0908            >            ora #decmode        ;ignore decimal mode bit
4fc1 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4fc3 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
4fc6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4fc8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4fca : 48              >            pha         ;use stack to load status
4fcb : 28              >            plp
                        
4fcc : a282                     ldx #$82
4fce : 08                       php
4fcf : ec1902                   cpx abs1+1  ;test result
                                trap_ne
4fd2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4fd4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4fd5 : 0908            >            ora #decmode        ;ignore decimal mode bit
4fd7 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4fd9 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
4fdc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4fde : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4fe0 : 48              >            pha         ;use stack to load status
4fe1 : 28              >            plp
                        
4fe2 : a241                     ldx #$41
4fe4 : 08                       php
4fe5 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
4fe8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4fea : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4feb : 0908            >            ora #decmode        ;ignore decimal mode bit
4fed : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
4fef : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
4ff2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4ff4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4ff6 : 48              >            pha         ;use stack to load status
4ff7 : 28              >            plp
                        
4ff8 : a200                     ldx #0
4ffa : 08                       php
4ffb : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
4ffe : d0fe            >        bne *           ;failed not equal (non zero)
                        
5000 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5001 : 0908            >            ora #decmode        ;ignore decimal mode bit
5003 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5005 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
5008 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
500a : a200                     ldx #0
500c : a502                     lda zpt  
500e : 49c3                     eor #$c3
5010 : c50b                     cmp zp1  
                                trap_ne     ;store to zp data
5012 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5014 : 8602                     stx zpt     ;clear                
5016 : ad0302                   lda abst  
5019 : 49c3                     eor #$c3
501b : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
501e : d0fe            >        bne *           ;failed not equal (non zero)
                        
5020 : 8e0302                   stx abst    ;clear                
5023 : a503                     lda zpt+1
5025 : 49c3                     eor #$c3
5027 : c50c                     cmp zp1+1
                                trap_ne     ;store to zp data
5029 : d0fe            >        bne *           ;failed not equal (non zero)
                        
502b : 8603                     stx zpt+1   ;clear                
502d : ad0402                   lda abst+1
5030 : 49c3                     eor #$c3
5032 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
5035 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5037 : 8e0402                   stx abst+1  ;clear                
503a : a504                     lda zpt+2
503c : 49c3                     eor #$c3
503e : c50d                     cmp zp1+2
                                trap_ne     ;store to zp data
5040 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5042 : 8604                     stx zpt+2   ;clear                
5044 : ad0502                   lda abst+2
5047 : 49c3                     eor #$c3
5049 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
504c : d0fe            >        bne *           ;failed not equal (non zero)
                        
504e : 8e0502                   stx abst+2  ;clear                
5051 : a505                     lda zpt+3
5053 : 49c3                     eor #$c3
5055 : c50e                     cmp zp1+3
                                trap_ne     ;store to zp data
5057 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5059 : 8605                     stx zpt+3   ;clear                
505b : ad0602                   lda abst+3
505e : 49c3                     eor #$c3
5060 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
5063 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5065 : 8e0602                   stx abst+3  ;clear                
                                next_test
5068 : ad0002          >            lda test_case   ;previous test
506b : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
506d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
506f : a914            >            lda #test_num   ;*** next tests' number
5071 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
5074 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5076 : 48              >            pha         ;use stack to load status
5077 : 28              >            plp
                        
5078 : a40b                     ldy zp1  
507a : 08                       php         ;test stores do not alter flags
507b : 98                       tya
507c : 49c3                     eor #$c3
507e : a8                       tay
507f : 28                       plp
5080 : 8c0302                   sty abst  
5083 : 08                       php         ;flags after load/store sequence
5084 : 49c3                     eor #$c3
5086 : a8                       tay
5087 : c0c3                     cpy #$c3    ;test result
                                trap_ne
5089 : d0fe            >        bne *           ;failed not equal (non zero)
                        
508b : 68                       pla         ;load status
                                eor_flag 0
508c : 0908            >            ora #decmode        ;ignore decimal mode bit
508e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5090 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
5093 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
5095 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5097 : 48              >            pha         ;use stack to load status
5098 : 28              >            plp
                        
5099 : a40c                     ldy zp1+1
509b : 08                       php         ;test stores do not alter flags
509c : 98                       tya
509d : 49c3                     eor #$c3
509f : a8                       tay
50a0 : 28                       plp
50a1 : 8c0402                   sty abst+1
50a4 : 08                       php         ;flags after load/store sequence
50a5 : 49c3                     eor #$c3
50a7 : a8                       tay
50a8 : c082                     cpy #$82    ;test result
                                trap_ne
50aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
50ac : 68                       pla         ;load status
                                eor_flag 0
50ad : 0908            >            ora #decmode        ;ignore decimal mode bit
50af : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
50b1 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
50b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
50b6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
50b8 : 48              >            pha         ;use stack to load status
50b9 : 28              >            plp
                        
50ba : a40d                     ldy zp1+2
50bc : 08                       php         ;test stores do not alter flags
50bd : 98                       tya
50be : 49c3                     eor #$c3
50c0 : a8                       tay
50c1 : 28                       plp
50c2 : 8c0502                   sty abst+2
50c5 : 08                       php         ;flags after load/store sequence
50c6 : 49c3                     eor #$c3
50c8 : a8                       tay
50c9 : c041                     cpy #$41    ;test result
                                trap_ne
50cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
50cd : 68                       pla         ;load status
                                eor_flag 0
50ce : 0908            >            ora #decmode        ;ignore decimal mode bit
50d0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
50d2 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
50d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
50d7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
50d9 : 48              >            pha         ;use stack to load status
50da : 28              >            plp
                        
50db : a40e                     ldy zp1+3
50dd : 08                       php         ;test stores do not alter flags
50de : 98                       tya
50df : 49c3                     eor #$c3
50e1 : a8                       tay
50e2 : 28                       plp
50e3 : 8c0602                   sty abst+3
50e6 : 08                       php         ;flags after load/store sequence
50e7 : 49c3                     eor #$c3
50e9 : a8                       tay
50ea : c000                     cpy #0      ;test result
                                trap_ne
50ec : d0fe            >        bne *           ;failed not equal (non zero)
                        
50ee : 68                       pla         ;load status
                                eor_flag 0
50ef : 0908            >            ora #decmode        ;ignore decimal mode bit
50f1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
50f3 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
50f6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
50f8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
50fa : 48              >            pha         ;use stack to load status
50fb : 28              >            plp
                        
50fc : a40b                     ldy zp1  
50fe : 08                       php         ;test stores do not alter flags
50ff : 98                       tya
5100 : 49c3                     eor #$c3
5102 : a8                       tay
5103 : 28                       plp
5104 : 8c0302                   sty abst  
5107 : 08                       php         ;flags after load/store sequence
5108 : 49c3                     eor #$c3
510a : a8                       tay
510b : c0c3                     cpy #$c3    ;test result
                                trap_ne
510d : d0fe            >        bne *           ;failed not equal (non zero)
                        
510f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5110 : 0908            >            ora #decmode        ;ignore decimal mode bit
5112 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5114 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
5117 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5119 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
511b : 48              >            pha         ;use stack to load status
511c : 28              >            plp
                        
511d : a40c                     ldy zp1+1
511f : 08                       php         ;test stores do not alter flags
5120 : 98                       tya
5121 : 49c3                     eor #$c3
5123 : a8                       tay
5124 : 28                       plp
5125 : 8c0402                   sty abst+1
5128 : 08                       php         ;flags after load/store sequence
5129 : 49c3                     eor #$c3
512b : a8                       tay
512c : c082                     cpy #$82   ;test result
                                trap_ne
512e : d0fe            >        bne *           ;failed not equal (non zero)
                        
5130 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5131 : 0908            >            ora #decmode        ;ignore decimal mode bit
5133 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5135 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
5138 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
513a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
513c : 48              >            pha         ;use stack to load status
513d : 28              >            plp
                        
513e : a40d                     ldy zp1+2
5140 : 08                       php         ;test stores do not alter flags
5141 : 98                       tya
5142 : 49c3                     eor #$c3
5144 : a8                       tay
5145 : 28                       plp
5146 : 8c0502                   sty abst+2
5149 : 08                       php         ;flags after load/store sequence
514a : 49c3                     eor #$c3
514c : a8                       tay
514d : c041                     cpy #$41    ;test result
                                trap_ne
514f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5151 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5152 : 0908            >            ora #decmode        ;ignore decimal mode bit
5154 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5156 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
5159 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
515b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
515d : 48              >            pha         ;use stack to load status
515e : 28              >            plp
                        
515f : a40e                     ldy zp1+3
5161 : 08                       php         ;test stores do not alter flags
5162 : 98                       tya
5163 : 49c3                     eor #$c3
5165 : a8                       tay
5166 : 28                       plp
5167 : 8c0602                   sty abst+3
516a : 08                       php         ;flags after load/store sequence
516b : 49c3                     eor #$c3
516d : a8                       tay
516e : c000                     cpy #0      ;test result
                                trap_ne
5170 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5172 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5173 : 0908            >            ora #decmode        ;ignore decimal mode bit
5175 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5177 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
517a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                                set_stat 0
                       >            load_flag 0
517c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
517e : 48              >            pha         ;use stack to load status
517f : 28              >            plp
                        
5180 : ac1802                   ldy abs1  
5183 : 08                       php         ;test stores do not alter flags
5184 : 98                       tya
5185 : 49c3                     eor #$c3
5187 : a8                       tay
5188 : 28                       plp
5189 : 8402                     sty zpt  
518b : 08                       php         ;flags after load/store sequence
518c : 49c3                     eor #$c3
518e : a8                       tay
518f : c40b                     cpy zp1     ;test result
                                trap_ne
5191 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5193 : 68                       pla         ;load status
                                eor_flag 0
5194 : 0908            >            ora #decmode        ;ignore decimal mode bit
5196 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5198 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
519b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
519d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
519f : 48              >            pha         ;use stack to load status
51a0 : 28              >            plp
                        
51a1 : ac1902                   ldy abs1+1
51a4 : 08                       php         ;test stores do not alter flags
51a5 : 98                       tya
51a6 : 49c3                     eor #$c3
51a8 : a8                       tay
51a9 : 28                       plp
51aa : 8403                     sty zpt+1
51ac : 08                       php         ;flags after load/store sequence
51ad : 49c3                     eor #$c3
51af : a8                       tay
51b0 : c40c                     cpy zp1+1   ;test result
                                trap_ne
51b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
51b4 : 68                       pla         ;load status
                                eor_flag 0
51b5 : 0908            >            ora #decmode        ;ignore decimal mode bit
51b7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
51b9 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
51bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
51be : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
51c0 : 48              >            pha         ;use stack to load status
51c1 : 28              >            plp
                        
51c2 : ac1a02                   ldy abs1+2
51c5 : 08                       php         ;test stores do not alter flags
51c6 : 98                       tya
51c7 : 49c3                     eor #$c3
51c9 : a8                       tay
51ca : 28                       plp
51cb : 8404                     sty zpt+2
51cd : 08                       php         ;flags after load/store sequence
51ce : 49c3                     eor #$c3
51d0 : a8                       tay
51d1 : c40d                     cpy zp1+2   ;test result
                                trap_ne
51d3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
51d5 : 68                       pla         ;load status
                                eor_flag 0
51d6 : 0908            >            ora #decmode        ;ignore decimal mode bit
51d8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
51da : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
51dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
51df : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
51e1 : 48              >            pha         ;use stack to load status
51e2 : 28              >            plp
                        
51e3 : ac1b02                   ldy abs1+3
51e6 : 08                       php         ;test stores do not alter flags
51e7 : 98                       tya
51e8 : 49c3                     eor #$c3
51ea : a8                       tay
51eb : 28                       plp
51ec : 8405                     sty zpt+3
51ee : 08                       php         ;flags after load/store sequence
51ef : 49c3                     eor #$c3
51f1 : a8                       tay
51f2 : c40e                     cpy zp1+3   ;test result
                                trap_ne
51f4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
51f6 : 68                       pla         ;load status
                                eor_flag 0
51f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
51f9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
51fb : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
51fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
5200 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5202 : 48              >            pha         ;use stack to load status
5203 : 28              >            plp
                        
5204 : ac1802                   ldy abs1  
5207 : 08                       php         ;test stores do not alter flags
5208 : 98                       tya
5209 : 49c3                     eor #$c3
520b : a8                       tay
520c : 28                       plp
520d : 8402                     sty zpt  
520f : 08                       php         ;flags after load/store sequence
5210 : 49c3                     eor #$c3
5212 : a8                       tay
5213 : c50b                     cmp zp1     ;test result
                                trap_ne
5215 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5217 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5218 : 0908            >            ora #decmode        ;ignore decimal mode bit
521a : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
521c : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
521f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5221 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5223 : 48              >            pha         ;use stack to load status
5224 : 28              >            plp
                        
5225 : ac1902                   ldy abs1+1
5228 : 08                       php         ;test stores do not alter flags
5229 : 98                       tya
522a : 49c3                     eor #$c3
522c : a8                       tay
522d : 28                       plp
522e : 8403                     sty zpt+1
5230 : 08                       php         ;flags after load/store sequence
5231 : 49c3                     eor #$c3
5233 : a8                       tay
5234 : c50c                     cmp zp1+1   ;test result
                                trap_ne
5236 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5238 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5239 : 0908            >            ora #decmode        ;ignore decimal mode bit
523b : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
523d : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
5240 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5242 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5244 : 48              >            pha         ;use stack to load status
5245 : 28              >            plp
                        
5246 : ac1a02                   ldy abs1+2
5249 : 08                       php         ;test stores do not alter flags
524a : 98                       tya
524b : 49c3                     eor #$c3
524d : a8                       tay
524e : 28                       plp
524f : 8404                     sty zpt+2
5251 : 08                       php         ;flags after load/store sequence
5252 : 49c3                     eor #$c3
5254 : a8                       tay
5255 : c50d                     cmp zp1+2   ;test result
                                trap_ne
5257 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5259 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
525a : 0908            >            ora #decmode        ;ignore decimal mode bit
525c : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
525e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
5261 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5263 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5265 : 48              >            pha         ;use stack to load status
5266 : 28              >            plp
                        
5267 : ac1b02                   ldy abs1+3
526a : 08                       php         ;test stores do not alter flags
526b : 98                       tya
526c : 49c3                     eor #$c3
526e : a8                       tay
526f : 28                       plp
5270 : 8405                     sty zpt+3
5272 : 08                       php         ;flags after load/store sequence
5273 : 49c3                     eor #$c3
5275 : a8                       tay
5276 : c50e                     cmp zp1+3   ;test result
                                trap_ne
5278 : d0fe            >        bne *           ;failed not equal (non zero)
                        
527a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
527b : 0908            >            ora #decmode        ;ignore decimal mode bit
527d : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
527f : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
5282 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
5284 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5286 : 48              >            pha         ;use stack to load status
5287 : 28              >            plp
                        
5288 : a0c3                     ldy #$c3  
528a : 08                       php
528b : cc1802                   cpy abs1    ;test result
                                trap_ne
528e : d0fe            >        bne *           ;failed not equal (non zero)
                        
5290 : 68                       pla         ;load status
                                eor_flag 0
5291 : 0908            >            ora #decmode        ;ignore decimal mode bit
5293 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5295 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
5298 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
529a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
529c : 48              >            pha         ;use stack to load status
529d : 28              >            plp
                        
529e : a082                     ldy #$82
52a0 : 08                       php
52a1 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
52a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
52a6 : 68                       pla         ;load status
                                eor_flag 0
52a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
52a9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
52ab : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
52ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
52b0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
52b2 : 48              >            pha         ;use stack to load status
52b3 : 28              >            plp
                        
52b4 : a041                     ldy #$41
52b6 : 08                       php
52b7 : cc1a02                   cpy abs1+2  ;test result
                                trap_ne
52ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
52bc : 68                       pla         ;load status
                                eor_flag 0
52bd : 0908            >            ora #decmode        ;ignore decimal mode bit
52bf : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
52c1 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
52c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
52c6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
52c8 : 48              >            pha         ;use stack to load status
52c9 : 28              >            plp
                        
52ca : a000                     ldy #0
52cc : 08                       php
52cd : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
52d0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
52d2 : 68                       pla         ;load status
                                eor_flag 0
52d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
52d5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
52d7 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
52da : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
52dc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
52de : 48              >            pha         ;use stack to load status
52df : 28              >            plp
                        
52e0 : a0c3                     ldy #$c3  
52e2 : 08                       php
52e3 : cc1802                   cpy abs1    ;test result
                                trap_ne
52e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
52e8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
52e9 : 0908            >            ora #decmode        ;ignore decimal mode bit
52eb : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
52ed : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
52f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
52f2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
52f4 : 48              >            pha         ;use stack to load status
52f5 : 28              >            plp
                        
52f6 : a082                     ldy #$82
52f8 : 08                       php
52f9 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
52fc : d0fe            >        bne *           ;failed not equal (non zero)
                        
52fe : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
52ff : 0908            >            ora #decmode        ;ignore decimal mode bit
5301 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5303 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
5306 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5308 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
530a : 48              >            pha         ;use stack to load status
530b : 28              >            plp
                        
530c : a041                     ldy #$41
530e : 08                       php
530f : cc1a02                   cpy abs1+2   ;test result
                                trap_ne
5312 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5314 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5315 : 0908            >            ora #decmode        ;ignore decimal mode bit
5317 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5319 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
531c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
531e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5320 : 48              >            pha         ;use stack to load status
5321 : 28              >            plp
                        
5322 : a000                     ldy #0
5324 : 08                       php
5325 : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
5328 : d0fe            >        bne *           ;failed not equal (non zero)
                        
532a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
532b : 0908            >            ora #decmode        ;ignore decimal mode bit
532d : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
532f : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
5332 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
5334 : a000                     ldy #0
5336 : a502                     lda zpt  
5338 : 49c3                     eor #$c3
533a : c50b                     cmp zp1  
                                trap_ne     ;store to zp   data
533c : d0fe            >        bne *           ;failed not equal (non zero)
                        
533e : 8402                     sty zpt     ;clear                
5340 : ad0302                   lda abst  
5343 : 49c3                     eor #$c3
5345 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs   data
5348 : d0fe            >        bne *           ;failed not equal (non zero)
                        
534a : 8c0302                   sty abst    ;clear                
534d : a503                     lda zpt+1
534f : 49c3                     eor #$c3
5351 : c50c                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
5353 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5355 : 8403                     sty zpt+1   ;clear                
5357 : ad0402                   lda abst+1
535a : 49c3                     eor #$c3
535c : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
535f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5361 : 8c0402                   sty abst+1  ;clear                
5364 : a504                     lda zpt+2
5366 : 49c3                     eor #$c3
5368 : c50d                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
536a : d0fe            >        bne *           ;failed not equal (non zero)
                        
536c : 8404                     sty zpt+2   ;clear                
536e : ad0502                   lda abst+2
5371 : 49c3                     eor #$c3
5373 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
5376 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5378 : 8c0502                   sty abst+2  ;clear                
537b : a505                     lda zpt+3
537d : 49c3                     eor #$c3
537f : c50e                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
5381 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5383 : 8405                     sty zpt+3   ;clear                
5385 : ad0602                   lda abst+3
5388 : 49c3                     eor #$c3
538a : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
538d : d0fe            >        bne *           ;failed not equal (non zero)
                        
538f : 8c0602                   sty abst+3  ;clear                
                                next_test
5392 : ad0002          >            lda test_case   ;previous test
5395 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5397 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
5399 : a915            >            lda #test_num   ;*** next tests' number
539b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
539e : a203                     ldx #3
53a0 :                  tldax    
                                set_stat 0
                       >            load_flag 0
53a0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
53a2 : 48              >            pha         ;use stack to load status
53a3 : 28              >            plp
                        
53a4 : b50b                     lda zp1,x
53a6 : 08                       php         ;test stores do not alter flags
53a7 : 49c3                     eor #$c3
53a9 : 28                       plp
53aa : 9d0302                   sta abst,x
53ad : 08                       php         ;flags after load/store sequence
53ae : 49c3                     eor #$c3
53b0 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
53b3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
53b5 : 68                       pla         ;load status
                                eor_flag 0
53b6 : 0908            >            ora #decmode        ;ignore decimal mode bit
53b8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
53ba : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
53bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
53bf : ca                       dex
53c0 : 10de                     bpl tldax                  
                        
53c2 : a203                     ldx #3
53c4 :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
53c4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
53c6 : 48              >            pha         ;use stack to load status
53c7 : 28              >            plp
                        
53c8 : b50b                     lda zp1,x
53ca : 08                       php         ;test stores do not alter flags
53cb : 49c3                     eor #$c3
53cd : 28                       plp
53ce : 9d0302                   sta abst,x
53d1 : 08                       php         ;flags after load/store sequence
53d2 : 49c3                     eor #$c3
53d4 : dd1802                   cmp abs1,x   ;test result
                                trap_ne
53d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
53d9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
53da : 0908            >            ora #decmode        ;ignore decimal mode bit
53dc : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
53de : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
53e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
53e3 : ca                       dex
53e4 : 10de                     bpl tldax1                  
                        
53e6 : a203                     ldx #3
53e8 :                  tldax2   
                                set_stat 0
                       >            load_flag 0
53e8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
53ea : 48              >            pha         ;use stack to load status
53eb : 28              >            plp
                        
53ec : bd1802                   lda abs1,x
53ef : 08                       php         ;test stores do not alter flags
53f0 : 49c3                     eor #$c3
53f2 : 28                       plp
53f3 : 9502                     sta zpt,x
53f5 : 08                       php         ;flags after load/store sequence
53f6 : 49c3                     eor #$c3
53f8 : d50b                     cmp zp1,x   ;test result
                                trap_ne
53fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
53fc : 68                       pla         ;load status
                                eor_flag 0
53fd : 0908            >            ora #decmode        ;ignore decimal mode bit
53ff : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5401 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
5404 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5406 : ca                       dex
5407 : 10df                     bpl tldax2                  
                        
5409 : a203                     ldx #3
540b :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
540b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
540d : 48              >            pha         ;use stack to load status
540e : 28              >            plp
                        
540f : bd1802                   lda abs1,x
5412 : 08                       php         ;test stores do not alter flags
5413 : 49c3                     eor #$c3
5415 : 28                       plp
5416 : 9502                     sta zpt,x
5418 : 08                       php         ;flags after load/store sequence
5419 : 49c3                     eor #$c3
541b : d50b                     cmp zp1,x   ;test result
                                trap_ne
541d : d0fe            >        bne *           ;failed not equal (non zero)
                        
541f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5420 : 0908            >            ora #decmode        ;ignore decimal mode bit
5422 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5424 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
5427 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5429 : ca                       dex
542a : 10df                     bpl tldax3
                        
542c : a203                     ldx #3      ;testing store result
542e : a000                     ldy #0
5430 : b502             tstax   lda zpt,x
5432 : 49c3                     eor #$c3
5434 : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
5436 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5438 : 9402                     sty zpt,x   ;clear                
543a : bd0302                   lda abst,x
543d : 49c3                     eor #$c3
543f : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
5442 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5444 : 8a                       txa
5445 : 9d0302                   sta abst,x  ;clear                
5448 : ca                       dex
5449 : 10e5                     bpl tstax
                                next_test
544b : ad0002          >            lda test_case   ;previous test
544e : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5450 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0016 =                 >test_num = test_num + 1
5452 : a916            >            lda #test_num   ;*** next tests' number
5454 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
5457 : a003                     ldy #3
5459 :                  tlday    
                                set_stat 0
                       >            load_flag 0
5459 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
545b : 48              >            pha         ;use stack to load status
545c : 28              >            plp
                        
545d : b11c                     lda (ind1),y
545f : 08                       php         ;test stores do not alter flags
5460 : 49c3                     eor #$c3
5462 : 28                       plp
5463 : 990302                   sta abst,y
5466 : 08                       php         ;flags after load/store sequence
5467 : 49c3                     eor #$c3
5469 : d91802                   cmp abs1,y  ;test result
                                trap_ne
546c : d0fe            >        bne *           ;failed not equal (non zero)
                        
546e : 68                       pla         ;load status
                                eor_flag 0
546f : 0908            >            ora #decmode        ;ignore decimal mode bit
5471 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5473 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
5476 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5478 : 88                       dey
5479 : 10de                     bpl tlday                  
                        
547b : a003                     ldy #3
547d :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
547d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
547f : 48              >            pha         ;use stack to load status
5480 : 28              >            plp
                        
5481 : b11c                     lda (ind1),y
5483 : 08                       php         ;test stores do not alter flags
5484 : 49c3                     eor #$c3
5486 : 28                       plp
5487 : 990302                   sta abst,y
548a : 08                       php         ;flags after load/store sequence
548b : 49c3                     eor #$c3
548d : d91802                   cmp abs1,y  ;test result
                                trap_ne
5490 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5492 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5493 : 0908            >            ora #decmode        ;ignore decimal mode bit
5495 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5497 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
549a : d0fe            >        bne *           ;failed not equal (non zero)
                        
549c : 88                       dey
549d : 10de                     bpl tlday1                  
                        
549f : a003                     ldy #3      ;testing store result
54a1 : a200                     ldx #0
54a3 : b90302           tstay   lda abst,y
54a6 : 49c3                     eor #$c3
54a8 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
54ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
54ad : 8a                       txa
54ae : 990302                   sta abst,y  ;clear                
54b1 : 88                       dey
54b2 : 10ef                     bpl tstay
                        
54b4 : a003                     ldy #3
54b6 :                  tlday2   
                                set_stat 0
                       >            load_flag 0
54b6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
54b8 : 48              >            pha         ;use stack to load status
54b9 : 28              >            plp
                        
54ba : b91802                   lda abs1,y
54bd : 08                       php         ;test stores do not alter flags
54be : 49c3                     eor #$c3
54c0 : 28                       plp
54c1 : 9128                     sta (indt),y
54c3 : 08                       php         ;flags after load/store sequence
54c4 : 49c3                     eor #$c3
54c6 : d11c                     cmp (ind1),y    ;test result
                                trap_ne
54c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
54ca : 68                       pla         ;load status
                                eor_flag 0
54cb : 0908            >            ora #decmode        ;ignore decimal mode bit
54cd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
54cf : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
54d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
54d4 : 88                       dey
54d5 : 10df                     bpl tlday2                  
                        
54d7 : a003                     ldy #3
54d9 :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
54d9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
54db : 48              >            pha         ;use stack to load status
54dc : 28              >            plp
                        
54dd : b91802                   lda abs1,y
54e0 : 08                       php         ;test stores do not alter flags
54e1 : 49c3                     eor #$c3
54e3 : 28                       plp
54e4 : 9128                     sta (indt),y
54e6 : 08                       php         ;flags after load/store sequence
54e7 : 49c3                     eor #$c3
54e9 : d11c                     cmp (ind1),y   ;test result
                                trap_ne
54eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
54ed : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
54ee : 0908            >            ora #decmode        ;ignore decimal mode bit
54f0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
54f2 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
54f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
54f7 : 88                       dey
54f8 : 10df                     bpl tlday3
                                
54fa : a003                     ldy #3      ;testing store result
54fc : a200                     ldx #0
54fe : b90302           tstay1  lda abst,y
5501 : 49c3                     eor #$c3
5503 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
5506 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5508 : 8a                       txa
5509 : 990302                   sta abst,y  ;clear                
550c : 88                       dey
550d : 10ef                     bpl tstay1
                                
550f : a206                     ldx #6
5511 : a003                     ldy #3
5513 :                  tldax4   
                                set_stat 0
                       >            load_flag 0
5513 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5515 : 48              >            pha         ;use stack to load status
5516 : 28              >            plp
                        
5517 : a11c                     lda (ind1,x)
5519 : 08                       php         ;test stores do not alter flags
551a : 49c3                     eor #$c3
551c : 28                       plp
551d : 8128                     sta (indt,x)
551f : 08                       php         ;flags after load/store sequence
5520 : 49c3                     eor #$c3
5522 : d91802                   cmp abs1,y  ;test result
                                trap_ne
5525 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5527 : 68                       pla         ;load status
                                eor_flag 0
5528 : 0908            >            ora #decmode        ;ignore decimal mode bit
552a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
552c : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
552f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5531 : ca                       dex
5532 : ca                       dex
5533 : 88                       dey
5534 : 10dd                     bpl tldax4                  
                        
5536 : a206                     ldx #6
5538 : a003                     ldy #3
553a :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
553a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
553c : 48              >            pha         ;use stack to load status
553d : 28              >            plp
                        
553e : a11c                     lda (ind1,x)
5540 : 08                       php         ;test stores do not alter flags
5541 : 49c3                     eor #$c3
5543 : 28                       plp
5544 : 8128                     sta (indt,x)
5546 : 08                       php         ;flags after load/store sequence
5547 : 49c3                     eor #$c3
5549 : d91802                   cmp abs1,y  ;test result
                                trap_ne
554c : d0fe            >        bne *           ;failed not equal (non zero)
                        
554e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
554f : 0908            >            ora #decmode        ;ignore decimal mode bit
5551 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5553 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
5556 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5558 : ca                       dex
5559 : ca                       dex
555a : 88                       dey
555b : 10dd                     bpl tldax5
                        
555d : a003                     ldy #3      ;testing store result
555f : a200                     ldx #0
5561 : b90302           tstay2  lda abst,y
5564 : 49c3                     eor #$c3
5566 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
5569 : d0fe            >        bne *           ;failed not equal (non zero)
                        
556b : 8a                       txa
556c : 990302                   sta abst,y  ;clear                
556f : 88                       dey
5570 : 10ef                     bpl tstay2
                                next_test
5572 : ad0002          >            lda test_case   ;previous test
5575 : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5577 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0017 =                 >test_num = test_num + 1
5579 : a917            >            lda #test_num   ;*** next tests' number
557b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
557e : a2fd                     ldx #3+$fa
5580 : b511             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
5582 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
5585 : ca                       dex
5586 : e0fa                     cpx #$fa
5588 : b0f6                     bcs tldax6                  
558a : a2fd                     ldx #3+$fa
558c : bd1e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
558f : 9508                     sta zpt-$fa&$ff,x
5591 : ca                       dex
5592 : e0fa                     cpx #$fa
5594 : b0f6                     bcs tldax7
                                                  
5596 : a203                     ldx #3      ;testing wraparound result
5598 : a000                     ldy #0
559a : b502             tstax1  lda zpt,x
559c : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
559e : d0fe            >        bne *           ;failed not equal (non zero)
                        
55a0 : 9402                     sty zpt,x   ;clear                
55a2 : bd0302                   lda abst,x
55a5 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
55a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
55aa : 8a                       txa
55ab : 9d0302                   sta abst,x  ;clear                
55ae : ca                       dex
55af : 10e9                     bpl tstax1
                        
55b1 : a0fb                     ldy #3+$f8
55b3 : a2fe                     ldx #6+$f8
55b5 : a124             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
55b7 : 990b01                   sta abst-$f8,y
55ba : ca                       dex
55bb : ca                       dex
55bc : 88                       dey
55bd : c0f8                     cpy #$f8
55bf : b0f4                     bcs tlday4
55c1 : a003                     ldy #3      ;testing wraparound result
55c3 : a200                     ldx #0
55c5 : b90302           tstay4  lda abst,y
55c8 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
55cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
55cd : 8a                       txa
55ce : 990302                   sta abst,y  ;clear                
55d1 : 88                       dey
55d2 : 10f1                     bpl tstay4
                                
55d4 : a0fb                     ldy #3+$f8
55d6 : b92001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
55d9 : 9130                     sta (inwt),y
55db : 88                       dey
55dc : c0f8                     cpy #$f8
55de : b0f6                     bcs tlday5                  
55e0 : a003                     ldy #3      ;testing wraparound result
55e2 : a200                     ldx #0
55e4 : b90302           tstay5  lda abst,y
55e7 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
55ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
55ec : 8a                       txa
55ed : 990302                   sta abst,y  ;clear                
55f0 : 88                       dey
55f1 : 10f1                     bpl tstay5
                        
55f3 : a0fb                     ldy #3+$f8
55f5 : a2fe                     ldx #6+$f8
55f7 : b126             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
55f9 : 8130                     sta (indt-$f8&$ff,x)
55fb : ca                       dex
55fc : ca                       dex
55fd : 88                       dey
55fe : c0f8                     cpy #$f8
5600 : b0f5                     bcs tlday6
5602 : a003                     ldy #3      ;testing wraparound result
5604 : a200                     ldx #0
5606 : b90302           tstay6  lda abst,y
5609 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
560c : d0fe            >        bne *           ;failed not equal (non zero)
                        
560e : 8a                       txa
560f : 990302                   sta abst,y  ;clear                
5612 : 88                       dey
5613 : 10f1                     bpl tstay6
                                next_test
5615 : ad0002          >            lda test_case   ;previous test
5618 : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
561a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0018 =                 >test_num = test_num + 1
561c : a918            >            lda #test_num   ;*** next tests' number
561e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
5621 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
5623 : 48              >            pha         ;use stack to load status
5624 : 28              >            plp
                        
5625 : a50b                     lda zp1
5627 : 08                       php         ;test stores do not alter flags
5628 : 49c3                     eor #$c3
562a : 28                       plp
562b : 8d0302                   sta abst
562e : 08                       php         ;flags after load/store sequence
562f : 49c3                     eor #$c3
5631 : c9c3                     cmp #$c3    ;test result
                                trap_ne
5633 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5635 : 68                       pla         ;load status
                                eor_flag 0
5636 : 0908            >            ora #decmode        ;ignore decimal mode bit
5638 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
563a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
563d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
563f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5641 : 48              >            pha         ;use stack to load status
5642 : 28              >            plp
                        
5643 : a50c                     lda zp1+1
5645 : 08                       php         ;test stores do not alter flags
5646 : 49c3                     eor #$c3
5648 : 28                       plp
5649 : 8d0402                   sta abst+1
564c : 08                       php         ;flags after load/store sequence
564d : 49c3                     eor #$c3
564f : c982                     cmp #$82    ;test result
                                trap_ne
5651 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5653 : 68                       pla         ;load status
                                eor_flag 0
5654 : 0908            >            ora #decmode        ;ignore decimal mode bit
5656 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5658 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
565b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
565d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
565f : 48              >            pha         ;use stack to load status
5660 : 28              >            plp
                        
5661 : a50d                     lda zp1+2
5663 : 08                       php         ;test stores do not alter flags
5664 : 49c3                     eor #$c3
5666 : 28                       plp
5667 : 8d0502                   sta abst+2
566a : 08                       php         ;flags after load/store sequence
566b : 49c3                     eor #$c3
566d : c941                     cmp #$41    ;test result
                                trap_ne
566f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5671 : 68                       pla         ;load status
                                eor_flag 0
5672 : 0908            >            ora #decmode        ;ignore decimal mode bit
5674 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5676 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
5679 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
567b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
567d : 48              >            pha         ;use stack to load status
567e : 28              >            plp
                        
567f : a50e                     lda zp1+3
5681 : 08                       php         ;test stores do not alter flags
5682 : 49c3                     eor #$c3
5684 : 28                       plp
5685 : 8d0602                   sta abst+3
5688 : 08                       php         ;flags after load/store sequence
5689 : 49c3                     eor #$c3
568b : c900                     cmp #0      ;test result
                                trap_ne
568d : d0fe            >        bne *           ;failed not equal (non zero)
                        
568f : 68                       pla         ;load status
                                eor_flag 0
5690 : 0908            >            ora #decmode        ;ignore decimal mode bit
5692 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5694 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
5697 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5699 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
569b : 48              >            pha         ;use stack to load status
569c : 28              >            plp
                        
569d : a50b                     lda zp1  
569f : 08                       php         ;test stores do not alter flags
56a0 : 49c3                     eor #$c3
56a2 : 28                       plp
56a3 : 8d0302                   sta abst  
56a6 : 08                       php         ;flags after load/store sequence
56a7 : 49c3                     eor #$c3
56a9 : c9c3                     cmp #$c3    ;test result
                                trap_ne
56ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
56ad : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
56ae : 0908            >            ora #decmode        ;ignore decimal mode bit
56b0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
56b2 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
56b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
56b7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
56b9 : 48              >            pha         ;use stack to load status
56ba : 28              >            plp
                        
56bb : a50c                     lda zp1+1
56bd : 08                       php         ;test stores do not alter flags
56be : 49c3                     eor #$c3
56c0 : 28                       plp
56c1 : 8d0402                   sta abst+1
56c4 : 08                       php         ;flags after load/store sequence
56c5 : 49c3                     eor #$c3
56c7 : c982                     cmp #$82    ;test result
                                trap_ne
56c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
56cb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
56cc : 0908            >            ora #decmode        ;ignore decimal mode bit
56ce : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
56d0 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
56d3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
56d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
56d7 : 48              >            pha         ;use stack to load status
56d8 : 28              >            plp
                        
56d9 : a50d                     lda zp1+2
56db : 08                       php         ;test stores do not alter flags
56dc : 49c3                     eor #$c3
56de : 28                       plp
56df : 8d0502                   sta abst+2
56e2 : 08                       php         ;flags after load/store sequence
56e3 : 49c3                     eor #$c3
56e5 : c941                     cmp #$41    ;test result
                                trap_ne
56e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
56e9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
56ea : 0908            >            ora #decmode        ;ignore decimal mode bit
56ec : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
56ee : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
56f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
56f3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
56f5 : 48              >            pha         ;use stack to load status
56f6 : 28              >            plp
                        
56f7 : a50e                     lda zp1+3
56f9 : 08                       php         ;test stores do not alter flags
56fa : 49c3                     eor #$c3
56fc : 28                       plp
56fd : 8d0602                   sta abst+3
5700 : 08                       php         ;flags after load/store sequence
5701 : 49c3                     eor #$c3
5703 : c900                     cmp #0      ;test result
                                trap_ne
5705 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5707 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5708 : 0908            >            ora #decmode        ;ignore decimal mode bit
570a : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
570c : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
570f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
5711 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5713 : 48              >            pha         ;use stack to load status
5714 : 28              >            plp
                        
5715 : ad1802                   lda abs1  
5718 : 08                       php         ;test stores do not alter flags
5719 : 49c3                     eor #$c3
571b : 28                       plp
571c : 8502                     sta zpt  
571e : 08                       php         ;flags after load/store sequence
571f : 49c3                     eor #$c3
5721 : c50b                     cmp zp1     ;test result
                                trap_ne
5723 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5725 : 68                       pla         ;load status
                                eor_flag 0
5726 : 0908            >            ora #decmode        ;ignore decimal mode bit
5728 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
572a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
572d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
572f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5731 : 48              >            pha         ;use stack to load status
5732 : 28              >            plp
                        
5733 : ad1902                   lda abs1+1
5736 : 08                       php         ;test stores do not alter flags
5737 : 49c3                     eor #$c3
5739 : 28                       plp
573a : 8503                     sta zpt+1
573c : 08                       php         ;flags after load/store sequence
573d : 49c3                     eor #$c3
573f : c50c                     cmp zp1+1   ;test result
                                trap_ne
5741 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5743 : 68                       pla         ;load status
                                eor_flag 0
5744 : 0908            >            ora #decmode        ;ignore decimal mode bit
5746 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5748 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
574b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
574d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
574f : 48              >            pha         ;use stack to load status
5750 : 28              >            plp
                        
5751 : ad1a02                   lda abs1+2
5754 : 08                       php         ;test stores do not alter flags
5755 : 49c3                     eor #$c3
5757 : 28                       plp
5758 : 8504                     sta zpt+2
575a : 08                       php         ;flags after load/store sequence
575b : 49c3                     eor #$c3
575d : c50d                     cmp zp1+2   ;test result
                                trap_ne
575f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5761 : 68                       pla         ;load status
                                eor_flag 0
5762 : 0908            >            ora #decmode        ;ignore decimal mode bit
5764 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5766 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
5769 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
576b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
576d : 48              >            pha         ;use stack to load status
576e : 28              >            plp
                        
576f : ad1b02                   lda abs1+3
5772 : 08                       php         ;test stores do not alter flags
5773 : 49c3                     eor #$c3
5775 : 28                       plp
5776 : 8505                     sta zpt+3
5778 : 08                       php         ;flags after load/store sequence
5779 : 49c3                     eor #$c3
577b : c50e                     cmp zp1+3   ;test result
                                trap_ne
577d : d0fe            >        bne *           ;failed not equal (non zero)
                        
577f : 68                       pla         ;load status
                                eor_flag 0
5780 : 0908            >            ora #decmode        ;ignore decimal mode bit
5782 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5784 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
5787 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5789 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
578b : 48              >            pha         ;use stack to load status
578c : 28              >            plp
                        
578d : ad1802                   lda abs1  
5790 : 08                       php         ;test stores do not alter flags
5791 : 49c3                     eor #$c3
5793 : 28                       plp
5794 : 8502                     sta zpt  
5796 : 08                       php         ;flags after load/store sequence
5797 : 49c3                     eor #$c3
5799 : c50b                     cmp zp1     ;test result
                                trap_ne
579b : d0fe            >        bne *           ;failed not equal (non zero)
                        
579d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
579e : 0908            >            ora #decmode        ;ignore decimal mode bit
57a0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
57a2 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
57a5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
57a7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
57a9 : 48              >            pha         ;use stack to load status
57aa : 28              >            plp
                        
57ab : ad1902                   lda abs1+1
57ae : 08                       php         ;test stores do not alter flags
57af : 49c3                     eor #$c3
57b1 : 28                       plp
57b2 : 8503                     sta zpt+1
57b4 : 08                       php         ;flags after load/store sequence
57b5 : 49c3                     eor #$c3
57b7 : c50c                     cmp zp1+1   ;test result
                                trap_ne
57b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
57bb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
57bc : 0908            >            ora #decmode        ;ignore decimal mode bit
57be : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
57c0 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
57c3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
57c5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
57c7 : 48              >            pha         ;use stack to load status
57c8 : 28              >            plp
                        
57c9 : ad1a02                   lda abs1+2
57cc : 08                       php         ;test stores do not alter flags
57cd : 49c3                     eor #$c3
57cf : 28                       plp
57d0 : 8504                     sta zpt+2
57d2 : 08                       php         ;flags after load/store sequence
57d3 : 49c3                     eor #$c3
57d5 : c50d                     cmp zp1+2   ;test result
                                trap_ne
57d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
57d9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
57da : 0908            >            ora #decmode        ;ignore decimal mode bit
57dc : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
57de : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
57e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
57e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
57e5 : 48              >            pha         ;use stack to load status
57e6 : 28              >            plp
                        
57e7 : ad1b02                   lda abs1+3
57ea : 08                       php         ;test stores do not alter flags
57eb : 49c3                     eor #$c3
57ed : 28                       plp
57ee : 8505                     sta zpt+3
57f0 : 08                       php         ;flags after load/store sequence
57f1 : 49c3                     eor #$c3
57f3 : c50e                     cmp zp1+3   ;test result
                                trap_ne
57f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
57f7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
57f8 : 0908            >            ora #decmode        ;ignore decimal mode bit
57fa : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
57fc : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
57ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0  
                       >            load_flag 0  
5801 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
5803 : 48              >            pha         ;use stack to load status
5804 : 28              >            plp
                        
5805 : a9c3                     lda #$c3
5807 : 08                       php
5808 : cd1802                   cmp abs1    ;test result
                                trap_ne
580b : d0fe            >        bne *           ;failed not equal (non zero)
                        
580d : 68                       pla         ;load status
                                eor_flag 0
580e : 0908            >            ora #decmode        ;ignore decimal mode bit
5810 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5812 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
5815 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
5817 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5819 : 48              >            pha         ;use stack to load status
581a : 28              >            plp
                        
581b : a982                     lda #$82
581d : 08                       php
581e : cd1902                   cmp abs1+1  ;test result
                                trap_ne
5821 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5823 : 68                       pla         ;load status
                                eor_flag 0
5824 : 0908            >            ora #decmode        ;ignore decimal mode bit
5826 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5828 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
582b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
582d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
582f : 48              >            pha         ;use stack to load status
5830 : 28              >            plp
                        
5831 : a941                     lda #$41
5833 : 08                       php
5834 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
5837 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5839 : 68                       pla         ;load status
                                eor_flag 0
583a : 0908            >            ora #decmode        ;ignore decimal mode bit
583c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
583e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
5841 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
5843 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5845 : 48              >            pha         ;use stack to load status
5846 : 28              >            plp
                        
5847 : a900                     lda #0
5849 : 08                       php
584a : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
584d : d0fe            >        bne *           ;failed not equal (non zero)
                        
584f : 68                       pla         ;load status
                                eor_flag 0
5850 : 0908            >            ora #decmode        ;ignore decimal mode bit
5852 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
5854 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
5857 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
5859 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
585b : 48              >            pha         ;use stack to load status
585c : 28              >            plp
                        
585d : a9c3                     lda #$c3  
585f : 08                       php
5860 : cd1802                   cmp abs1    ;test result
                                trap_ne
5863 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5865 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5866 : 0908            >            ora #decmode        ;ignore decimal mode bit
5868 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
586a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
586d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
586f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5871 : 48              >            pha         ;use stack to load status
5872 : 28              >            plp
                        
5873 : a982                     lda #$82
5875 : 08                       php
5876 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
5879 : d0fe            >        bne *           ;failed not equal (non zero)
                        
587b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
587c : 0908            >            ora #decmode        ;ignore decimal mode bit
587e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5880 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
5883 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5885 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5887 : 48              >            pha         ;use stack to load status
5888 : 28              >            plp
                        
5889 : a941                     lda #$41
588b : 08                       php
588c : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
588f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5891 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5892 : 0908            >            ora #decmode        ;ignore decimal mode bit
5894 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
5896 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
5899 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
589b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
589d : 48              >            pha         ;use stack to load status
589e : 28              >            plp
                        
589f : a900                     lda #0
58a1 : 08                       php
58a2 : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
58a5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
58a7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
58a8 : 0908            >            ora #decmode        ;ignore decimal mode bit
58aa : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
58ac : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
58af : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
58b1 : a200                     ldx #0
58b3 : a502                     lda zpt  
58b5 : 49c3                     eor #$c3
58b7 : c50b                     cmp zp1  
                                trap_ne     ;store to zp data
58b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
58bb : 8602                     stx zpt     ;clear                
58bd : ad0302                   lda abst  
58c0 : 49c3                     eor #$c3
58c2 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
58c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
58c7 : 8e0302                   stx abst    ;clear                
58ca : a503                     lda zpt+1
58cc : 49c3                     eor #$c3
58ce : c50c                     cmp zp1+1
                                trap_ne     ;store to zp data
58d0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
58d2 : 8603                     stx zpt+1   ;clear                
58d4 : ad0402                   lda abst+1
58d7 : 49c3                     eor #$c3
58d9 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
58dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
58de : 8e0402                   stx abst+1  ;clear                
58e1 : a504                     lda zpt+2
58e3 : 49c3                     eor #$c3
58e5 : c50d                     cmp zp1+2
                                trap_ne     ;store to zp data
58e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
58e9 : 8604                     stx zpt+2   ;clear                
58eb : ad0502                   lda abst+2
58ee : 49c3                     eor #$c3
58f0 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
58f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
58f5 : 8e0502                   stx abst+2  ;clear                
58f8 : a505                     lda zpt+3
58fa : 49c3                     eor #$c3
58fc : c50e                     cmp zp1+3
                                trap_ne     ;store to zp data
58fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
5900 : 8605                     stx zpt+3   ;clear                
5902 : ad0602                   lda abst+3
5905 : 49c3                     eor #$c3
5907 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
590a : d0fe            >        bne *           ;failed not equal (non zero)
                        
590c : 8e0602                   stx abst+3  ;clear                
                                next_test
590f : ad0002          >            lda test_case   ;previous test
5912 : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5914 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0019 =                 >test_num = test_num + 1
5916 : a919            >            lda #test_num   ;*** next tests' number
5918 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
591b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
591d : 48              >            pha         ;use stack to load status
591e : a9ff            >            lda #$ff     ;precharge accu
5920 : 28              >            plp
                        
5921 : 240e                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
5923 : 08              >            php         ;save flags
5924 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
5926 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5928 : 68              >            pla         ;load status
5929 : 48              >            pha
                       >            cmp_flag fz 
592a : 0908            >            ora #decmode        ;ignore decimal mode bit
592c : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
592e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5930 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5931 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5933 : 48              >            pha         ;use stack to load status
5934 : a901            >            lda #1     ;precharge accu
5936 : 28              >            plp
                        
5937 : 240d                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
5939 : 08              >            php         ;save flags
593a : c901            >            cmp #1     ;test result
                       >            trap_ne
593c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
593e : 68              >            pla         ;load status
593f : 48              >            pha
                       >            cmp_flag fv
5940 : 0908            >            ora #decmode        ;ignore decimal mode bit
5942 : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5944 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5946 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5947 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5949 : 48              >            pha         ;use stack to load status
594a : a901            >            lda #1     ;precharge accu
594c : 28              >            plp
                        
594d : 240c                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
594f : 08              >            php         ;save flags
5950 : c901            >            cmp #1     ;test result
                       >            trap_ne
5952 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5954 : 68              >            pla         ;load status
5955 : 48              >            pha
                       >            cmp_flag fnz
5956 : 0908            >            ora #decmode        ;ignore decimal mode bit
5958 : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
595a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
595c : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
595d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
595f : 48              >            pha         ;use stack to load status
5960 : a901            >            lda #1     ;precharge accu
5962 : 28              >            plp
                        
5963 : 240b                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
5965 : 08              >            php         ;save flags
5966 : c901            >            cmp #1     ;test result
                       >            trap_ne
5968 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
596a : 68              >            pla         ;load status
596b : 48              >            pha
                       >            cmp_flag fnv
596c : 0908            >            ora #decmode        ;ignore decimal mode bit
596e : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5970 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5972 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
5973 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5975 : 48              >            pha         ;use stack to load status
5976 : a9ff            >            lda #$ff     ;precharge accu
5978 : 28              >            plp
                        
5979 : 240e                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
597b : 08              >            php         ;save flags
597c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
597e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5980 : 68              >            pla         ;load status
5981 : 48              >            pha
                       >            cmp_flag ~fnv 
5982 : 0908            >            ora #decmode        ;ignore decimal mode bit
5984 : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5986 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5988 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5989 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
598b : 48              >            pha         ;use stack to load status
598c : a901            >            lda #1     ;precharge accu
598e : 28              >            plp
                        
598f : 240d                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
5991 : 08              >            php         ;save flags
5992 : c901            >            cmp #1     ;test result
                       >            trap_ne
5994 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5996 : 68              >            pla         ;load status
5997 : 48              >            pha
                       >            cmp_flag ~fnz
5998 : 0908            >            ora #decmode        ;ignore decimal mode bit
599a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
599c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
599e : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
599f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
59a1 : 48              >            pha         ;use stack to load status
59a2 : a901            >            lda #1     ;precharge accu
59a4 : 28              >            plp
                        
59a5 : 240c                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
59a7 : 08              >            php         ;save flags
59a8 : c901            >            cmp #1     ;test result
                       >            trap_ne
59aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59ac : 68              >            pla         ;load status
59ad : 48              >            pha
                       >            cmp_flag ~fv
59ae : 0908            >            ora #decmode        ;ignore decimal mode bit
59b0 : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
59b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59b4 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
59b5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
59b7 : 48              >            pha         ;use stack to load status
59b8 : a901            >            lda #1     ;precharge accu
59ba : 28              >            plp
                        
59bb : 240b                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
59bd : 08              >            php         ;save flags
59be : c901            >            cmp #1     ;test result
                       >            trap_ne
59c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59c2 : 68              >            pla         ;load status
59c3 : 48              >            pha
                       >            cmp_flag ~fz
59c4 : 0908            >            ora #decmode        ;ignore decimal mode bit
59c6 : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
59c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59ca : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
59cb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59cd : 48              >            pha         ;use stack to load status
59ce : a9ff            >            lda #$ff     ;precharge accu
59d0 : 28              >            plp
                        
59d1 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
59d4 : 08              >            php         ;save flags
59d5 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
59d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59d9 : 68              >            pla         ;load status
59da : 48              >            pha
                       >            cmp_flag fz 
59db : 0908            >            ora #decmode        ;ignore decimal mode bit
59dd : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
59df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59e1 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
59e2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59e4 : 48              >            pha         ;use stack to load status
59e5 : a901            >            lda #1     ;precharge accu
59e7 : 28              >            plp
                        
59e8 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
59eb : 08              >            php         ;save flags
59ec : c901            >            cmp #1     ;test result
                       >            trap_ne
59ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59f0 : 68              >            pla         ;load status
59f1 : 48              >            pha
                       >            cmp_flag fv
59f2 : 0908            >            ora #decmode        ;ignore decimal mode bit
59f4 : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
59f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59f8 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
59f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59fb : 48              >            pha         ;use stack to load status
59fc : a901            >            lda #1     ;precharge accu
59fe : 28              >            plp
                        
59ff : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
5a02 : 08              >            php         ;save flags
5a03 : c901            >            cmp #1     ;test result
                       >            trap_ne
5a05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a07 : 68              >            pla         ;load status
5a08 : 48              >            pha
                       >            cmp_flag fnz
5a09 : 0908            >            ora #decmode        ;ignore decimal mode bit
5a0b : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5a0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a0f : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5a10 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5a12 : 48              >            pha         ;use stack to load status
5a13 : a901            >            lda #1     ;precharge accu
5a15 : 28              >            plp
                        
5a16 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
5a19 : 08              >            php         ;save flags
5a1a : c901            >            cmp #1     ;test result
                       >            trap_ne
5a1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a1e : 68              >            pla         ;load status
5a1f : 48              >            pha
                       >            cmp_flag fnv
5a20 : 0908            >            ora #decmode        ;ignore decimal mode bit
5a22 : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5a24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a26 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
5a27 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a29 : 48              >            pha         ;use stack to load status
5a2a : a9ff            >            lda #$ff     ;precharge accu
5a2c : 28              >            plp
                        
5a2d : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
5a30 : 08              >            php         ;save flags
5a31 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
5a33 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a35 : 68              >            pla         ;load status
5a36 : 48              >            pha
                       >            cmp_flag ~fnv 
5a37 : 0908            >            ora #decmode        ;ignore decimal mode bit
5a39 : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5a3b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a3d : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5a3e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a40 : 48              >            pha         ;use stack to load status
5a41 : a901            >            lda #1     ;precharge accu
5a43 : 28              >            plp
                        
5a44 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
5a47 : 08              >            php         ;save flags
5a48 : c901            >            cmp #1     ;test result
                       >            trap_ne
5a4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a4c : 68              >            pla         ;load status
5a4d : 48              >            pha
                       >            cmp_flag ~fnz
5a4e : 0908            >            ora #decmode        ;ignore decimal mode bit
5a50 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5a52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a54 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5a55 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a57 : 48              >            pha         ;use stack to load status
5a58 : a901            >            lda #1     ;precharge accu
5a5a : 28              >            plp
                        
5a5b : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
5a5e : 08              >            php         ;save flags
5a5f : c901            >            cmp #1     ;test result
                       >            trap_ne
5a61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a63 : 68              >            pla         ;load status
5a64 : 48              >            pha
                       >            cmp_flag ~fv
5a65 : 0908            >            ora #decmode        ;ignore decimal mode bit
5a67 : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5a69 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a6b : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5a6c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a6e : 48              >            pha         ;use stack to load status
5a6f : a901            >            lda #1     ;precharge accu
5a71 : 28              >            plp
                        
5a72 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
5a75 : 08              >            php         ;save flags
5a76 : c901            >            cmp #1     ;test result
                       >            trap_ne
5a78 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a7a : 68              >            pla         ;load status
5a7b : 48              >            pha
                       >            cmp_flag ~fz
5a7c : 0908            >            ora #decmode        ;ignore decimal mode bit
5a7e : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5a80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a82 : 28              >            plp         ;restore status
                        
                                next_test
5a83 : ad0002          >            lda test_case   ;previous test
5a86 : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5a88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001a =                 >test_num = test_num + 1
5a8a : a91a            >            lda #test_num   ;*** next tests' number
5a8c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
5a8f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5a91 : 48              >            pha         ;use stack to load status
5a92 : a280            >            ldx #$80     ;precharge index x
5a94 : 28              >            plp
                        
5a95 : e40f                     cpx zp7f
                                tst_stat fc
5a97 : 08              >            php         ;save status
5a98 : 68              >            pla         ;use stack to retrieve status
5a99 : 48              >            pha
                       >            cmp_flag fc
5a9a : 0908            >            ora #decmode        ;ignore decimal mode bit
5a9c : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5a9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5aa0 : 28              >            plp         ;restore status
                        
5aa1 : ca                       dex
5aa2 : e40f                     cpx zp7f
                                tst_stat fzc
5aa4 : 08              >            php         ;save status
5aa5 : 68              >            pla         ;use stack to retrieve status
5aa6 : 48              >            pha
                       >            cmp_flag fzc
5aa7 : 0908            >            ora #decmode        ;ignore decimal mode bit
5aa9 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5aab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5aad : 28              >            plp         ;restore status
                        
5aae : ca                       dex
5aaf : e40f                     cpx zp7f
                                tst_x $7e,fn
5ab1 : 08              >            php         ;save flags
5ab2 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5ab4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ab6 : 68              >            pla         ;load status
5ab7 : 48              >            pha
                       >            cmp_flag fn
5ab8 : 0908            >            ora #decmode        ;ignore decimal mode bit
5aba : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5abc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5abe : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
5abf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ac1 : 48              >            pha         ;use stack to load status
5ac2 : a280            >            ldx #$80     ;precharge index x
5ac4 : 28              >            plp
                        
5ac5 : e40f                     cpx zp7f
                                tst_stat ~fnz
5ac7 : 08              >            php         ;save status
5ac8 : 68              >            pla         ;use stack to retrieve status
5ac9 : 48              >            pha
                       >            cmp_flag ~fnz
5aca : 0908            >            ora #decmode        ;ignore decimal mode bit
5acc : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5ace : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ad0 : 28              >            plp         ;restore status
                        
5ad1 : ca                       dex
5ad2 : e40f                     cpx zp7f
                                tst_stat ~fn
5ad4 : 08              >            php         ;save status
5ad5 : 68              >            pla         ;use stack to retrieve status
5ad6 : 48              >            pha
                       >            cmp_flag ~fn
5ad7 : 0908            >            ora #decmode        ;ignore decimal mode bit
5ad9 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5adb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5add : 28              >            plp         ;restore status
                        
5ade : ca                       dex
5adf : e40f                     cpx zp7f
                                tst_x $7e,~fzc
5ae1 : 08              >            php         ;save flags
5ae2 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5ae4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ae6 : 68              >            pla         ;load status
5ae7 : 48              >            pha
                       >            cmp_flag ~fzc
5ae8 : 0908            >            ora #decmode        ;ignore decimal mode bit
5aea : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5aec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5aee : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
5aef : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5af1 : 48              >            pha         ;use stack to load status
5af2 : a280            >            ldx #$80     ;precharge index x
5af4 : 28              >            plp
                        
5af5 : ec1c02                   cpx abs7f
                                tst_stat fc
5af8 : 08              >            php         ;save status
5af9 : 68              >            pla         ;use stack to retrieve status
5afa : 48              >            pha
                       >            cmp_flag fc
5afb : 0908            >            ora #decmode        ;ignore decimal mode bit
5afd : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5aff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b01 : 28              >            plp         ;restore status
                        
5b02 : ca                       dex
5b03 : ec1c02                   cpx abs7f
                                tst_stat fzc
5b06 : 08              >            php         ;save status
5b07 : 68              >            pla         ;use stack to retrieve status
5b08 : 48              >            pha
                       >            cmp_flag fzc
5b09 : 0908            >            ora #decmode        ;ignore decimal mode bit
5b0b : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b0f : 28              >            plp         ;restore status
                        
5b10 : ca                       dex
5b11 : ec1c02                   cpx abs7f
                                tst_x $7e,fn
5b14 : 08              >            php         ;save flags
5b15 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5b17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b19 : 68              >            pla         ;load status
5b1a : 48              >            pha
                       >            cmp_flag fn
5b1b : 0908            >            ora #decmode        ;ignore decimal mode bit
5b1d : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b1f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b21 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
5b22 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b24 : 48              >            pha         ;use stack to load status
5b25 : a280            >            ldx #$80     ;precharge index x
5b27 : 28              >            plp
                        
5b28 : ec1c02                   cpx abs7f
                                tst_stat ~fnz
5b2b : 08              >            php         ;save status
5b2c : 68              >            pla         ;use stack to retrieve status
5b2d : 48              >            pha
                       >            cmp_flag ~fnz
5b2e : 0908            >            ora #decmode        ;ignore decimal mode bit
5b30 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b34 : 28              >            plp         ;restore status
                        
5b35 : ca                       dex
5b36 : ec1c02                   cpx abs7f
                                tst_stat ~fn
5b39 : 08              >            php         ;save status
5b3a : 68              >            pla         ;use stack to retrieve status
5b3b : 48              >            pha
                       >            cmp_flag ~fn
5b3c : 0908            >            ora #decmode        ;ignore decimal mode bit
5b3e : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b42 : 28              >            plp         ;restore status
                        
5b43 : ca                       dex
5b44 : ec1c02                   cpx abs7f
                                tst_x $7e,~fzc
5b47 : 08              >            php         ;save flags
5b48 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5b4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b4c : 68              >            pla         ;load status
5b4d : 48              >            pha
                       >            cmp_flag ~fzc
5b4e : 0908            >            ora #decmode        ;ignore decimal mode bit
5b50 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b54 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
5b55 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5b57 : 48              >            pha         ;use stack to load status
5b58 : a280            >            ldx #$80     ;precharge index x
5b5a : 28              >            plp
                        
5b5b : e07f                     cpx #$7f
                                tst_stat fc
5b5d : 08              >            php         ;save status
5b5e : 68              >            pla         ;use stack to retrieve status
5b5f : 48              >            pha
                       >            cmp_flag fc
5b60 : 0908            >            ora #decmode        ;ignore decimal mode bit
5b62 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b66 : 28              >            plp         ;restore status
                        
5b67 : ca                       dex
5b68 : e07f                     cpx #$7f
                                tst_stat fzc
5b6a : 08              >            php         ;save status
5b6b : 68              >            pla         ;use stack to retrieve status
5b6c : 48              >            pha
                       >            cmp_flag fzc
5b6d : 0908            >            ora #decmode        ;ignore decimal mode bit
5b6f : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b71 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b73 : 28              >            plp         ;restore status
                        
5b74 : ca                       dex
5b75 : e07f                     cpx #$7f
                                tst_x $7e,fn
5b77 : 08              >            php         ;save flags
5b78 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5b7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b7c : 68              >            pla         ;load status
5b7d : 48              >            pha
                       >            cmp_flag fn
5b7e : 0908            >            ora #decmode        ;ignore decimal mode bit
5b80 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b84 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
5b85 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b87 : 48              >            pha         ;use stack to load status
5b88 : a280            >            ldx #$80     ;precharge index x
5b8a : 28              >            plp
                        
5b8b : e07f                     cpx #$7f
                                tst_stat ~fnz
5b8d : 08              >            php         ;save status
5b8e : 68              >            pla         ;use stack to retrieve status
5b8f : 48              >            pha
                       >            cmp_flag ~fnz
5b90 : 0908            >            ora #decmode        ;ignore decimal mode bit
5b92 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5b94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b96 : 28              >            plp         ;restore status
                        
5b97 : ca                       dex
5b98 : e07f                     cpx #$7f
                                tst_stat ~fn
5b9a : 08              >            php         ;save status
5b9b : 68              >            pla         ;use stack to retrieve status
5b9c : 48              >            pha
                       >            cmp_flag ~fn
5b9d : 0908            >            ora #decmode        ;ignore decimal mode bit
5b9f : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5ba1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ba3 : 28              >            plp         ;restore status
                        
5ba4 : ca                       dex
5ba5 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
5ba7 : 08              >            php         ;save flags
5ba8 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5baa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bac : 68              >            pla         ;load status
5bad : 48              >            pha
                       >            cmp_flag ~fzc
5bae : 0908            >            ora #decmode        ;ignore decimal mode bit
5bb0 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5bb2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bb4 : 28              >            plp         ;restore status
                        
                                next_test
5bb5 : ad0002          >            lda test_case   ;previous test
5bb8 : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5bba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001b =                 >test_num = test_num + 1
5bbc : a91b            >            lda #test_num   ;*** next tests' number
5bbe : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
5bc1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5bc3 : 48              >            pha         ;use stack to load status
5bc4 : a080            >            ldy #$80     ;precharge index y
5bc6 : 28              >            plp
                        
5bc7 : c40f                     cpy zp7f
                                tst_stat fc
5bc9 : 08              >            php         ;save status
5bca : 68              >            pla         ;use stack to retrieve status
5bcb : 48              >            pha
                       >            cmp_flag fc
5bcc : 0908            >            ora #decmode        ;ignore decimal mode bit
5bce : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5bd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bd2 : 28              >            plp         ;restore status
                        
5bd3 : 88                       dey
5bd4 : c40f                     cpy zp7f
                                tst_stat fzc
5bd6 : 08              >            php         ;save status
5bd7 : 68              >            pla         ;use stack to retrieve status
5bd8 : 48              >            pha
                       >            cmp_flag fzc
5bd9 : 0908            >            ora #decmode        ;ignore decimal mode bit
5bdb : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5bdd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bdf : 28              >            plp         ;restore status
                        
5be0 : 88                       dey
5be1 : c40f                     cpy zp7f
                                tst_y $7e,fn
5be3 : 08              >            php         ;save flags
5be4 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5be6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5be8 : 68              >            pla         ;load status
5be9 : 48              >            pha
                       >            cmp_flag fn
5bea : 0908            >            ora #decmode        ;ignore decimal mode bit
5bec : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5bee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bf0 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
5bf1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5bf3 : 48              >            pha         ;use stack to load status
5bf4 : a080            >            ldy #$80     ;precharge index y
5bf6 : 28              >            plp
                        
5bf7 : c40f                     cpy zp7f
                                tst_stat ~fnz
5bf9 : 08              >            php         ;save status
5bfa : 68              >            pla         ;use stack to retrieve status
5bfb : 48              >            pha
                       >            cmp_flag ~fnz
5bfc : 0908            >            ora #decmode        ;ignore decimal mode bit
5bfe : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c02 : 28              >            plp         ;restore status
                        
5c03 : 88                       dey
5c04 : c40f                     cpy zp7f
                                tst_stat ~fn
5c06 : 08              >            php         ;save status
5c07 : 68              >            pla         ;use stack to retrieve status
5c08 : 48              >            pha
                       >            cmp_flag ~fn
5c09 : 0908            >            ora #decmode        ;ignore decimal mode bit
5c0b : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c0f : 28              >            plp         ;restore status
                        
5c10 : 88                       dey
5c11 : c40f                     cpy zp7f
                                tst_y $7e,~fzc
5c13 : 08              >            php         ;save flags
5c14 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5c16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c18 : 68              >            pla         ;load status
5c19 : 48              >            pha
                       >            cmp_flag ~fzc
5c1a : 0908            >            ora #decmode        ;ignore decimal mode bit
5c1c : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c20 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
5c21 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c23 : 48              >            pha         ;use stack to load status
5c24 : a080            >            ldy #$80     ;precharge index y
5c26 : 28              >            plp
                        
5c27 : cc1c02                   cpy abs7f
                                tst_stat fc
5c2a : 08              >            php         ;save status
5c2b : 68              >            pla         ;use stack to retrieve status
5c2c : 48              >            pha
                       >            cmp_flag fc
5c2d : 0908            >            ora #decmode        ;ignore decimal mode bit
5c2f : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c33 : 28              >            plp         ;restore status
                        
5c34 : 88                       dey
5c35 : cc1c02                   cpy abs7f
                                tst_stat fzc
5c38 : 08              >            php         ;save status
5c39 : 68              >            pla         ;use stack to retrieve status
5c3a : 48              >            pha
                       >            cmp_flag fzc
5c3b : 0908            >            ora #decmode        ;ignore decimal mode bit
5c3d : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c41 : 28              >            plp         ;restore status
                        
5c42 : 88                       dey
5c43 : cc1c02                   cpy abs7f
                                tst_y $7e,fn
5c46 : 08              >            php         ;save flags
5c47 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5c49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c4b : 68              >            pla         ;load status
5c4c : 48              >            pha
                       >            cmp_flag fn
5c4d : 0908            >            ora #decmode        ;ignore decimal mode bit
5c4f : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c53 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
5c54 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c56 : 48              >            pha         ;use stack to load status
5c57 : a080            >            ldy #$80     ;precharge index y
5c59 : 28              >            plp
                        
5c5a : cc1c02                   cpy abs7f
                                tst_stat ~fnz
5c5d : 08              >            php         ;save status
5c5e : 68              >            pla         ;use stack to retrieve status
5c5f : 48              >            pha
                       >            cmp_flag ~fnz
5c60 : 0908            >            ora #decmode        ;ignore decimal mode bit
5c62 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c66 : 28              >            plp         ;restore status
                        
5c67 : 88                       dey
5c68 : cc1c02                   cpy abs7f
                                tst_stat ~fn
5c6b : 08              >            php         ;save status
5c6c : 68              >            pla         ;use stack to retrieve status
5c6d : 48              >            pha
                       >            cmp_flag ~fn
5c6e : 0908            >            ora #decmode        ;ignore decimal mode bit
5c70 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c74 : 28              >            plp         ;restore status
                        
5c75 : 88                       dey
5c76 : cc1c02                   cpy abs7f
                                tst_y $7e,~fzc
5c79 : 08              >            php         ;save flags
5c7a : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5c7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c7e : 68              >            pla         ;load status
5c7f : 48              >            pha
                       >            cmp_flag ~fzc
5c80 : 0908            >            ora #decmode        ;ignore decimal mode bit
5c82 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c86 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
5c87 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c89 : 48              >            pha         ;use stack to load status
5c8a : a080            >            ldy #$80     ;precharge index y
5c8c : 28              >            plp
                        
5c8d : c07f                     cpy #$7f
                                tst_stat fc
5c8f : 08              >            php         ;save status
5c90 : 68              >            pla         ;use stack to retrieve status
5c91 : 48              >            pha
                       >            cmp_flag fc
5c92 : 0908            >            ora #decmode        ;ignore decimal mode bit
5c94 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5c96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c98 : 28              >            plp         ;restore status
                        
5c99 : 88                       dey
5c9a : c07f                     cpy #$7f
                                tst_stat fzc
5c9c : 08              >            php         ;save status
5c9d : 68              >            pla         ;use stack to retrieve status
5c9e : 48              >            pha
                       >            cmp_flag fzc
5c9f : 0908            >            ora #decmode        ;ignore decimal mode bit
5ca1 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5ca3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ca5 : 28              >            plp         ;restore status
                        
5ca6 : 88                       dey
5ca7 : c07f                     cpy #$7f
                                tst_y $7e,fn
5ca9 : 08              >            php         ;save flags
5caa : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5cac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cae : 68              >            pla         ;load status
5caf : 48              >            pha
                       >            cmp_flag fn
5cb0 : 0908            >            ora #decmode        ;ignore decimal mode bit
5cb2 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5cb4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cb6 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
5cb7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5cb9 : 48              >            pha         ;use stack to load status
5cba : a080            >            ldy #$80     ;precharge index y
5cbc : 28              >            plp
                        
5cbd : c07f                     cpy #$7f
                                tst_stat ~fnz
5cbf : 08              >            php         ;save status
5cc0 : 68              >            pla         ;use stack to retrieve status
5cc1 : 48              >            pha
                       >            cmp_flag ~fnz
5cc2 : 0908            >            ora #decmode        ;ignore decimal mode bit
5cc4 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5cc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cc8 : 28              >            plp         ;restore status
                        
5cc9 : 88                       dey
5cca : c07f                     cpy #$7f
                                tst_stat ~fn
5ccc : 08              >            php         ;save status
5ccd : 68              >            pla         ;use stack to retrieve status
5cce : 48              >            pha
                       >            cmp_flag ~fn
5ccf : 0908            >            ora #decmode        ;ignore decimal mode bit
5cd1 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5cd3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cd5 : 28              >            plp         ;restore status
                        
5cd6 : 88                       dey
5cd7 : c07f                     cpy #$7f
                                tst_y $7e,~fzc
5cd9 : 08              >            php         ;save flags
5cda : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5cdc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cde : 68              >            pla         ;load status
5cdf : 48              >            pha
                       >            cmp_flag ~fzc
5ce0 : 0908            >            ora #decmode        ;ignore decimal mode bit
5ce2 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5ce4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ce6 : 28              >            plp         ;restore status
                        
                                next_test
5ce7 : ad0002          >            lda test_case   ;previous test
5cea : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5cec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001c =                 >test_num = test_num + 1
5cee : a91c            >            lda #test_num   ;*** next tests' number
5cf0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
5cf3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5cf5 : 48              >            pha         ;use stack to load status
5cf6 : a980            >            lda #$80     ;precharge accu
5cf8 : 28              >            plp
                        
5cf9 : c50f                     cmp zp7f
                                tst_a $80,fc
5cfb : 08              >            php         ;save flags
5cfc : c980            >            cmp #$80     ;test result
                       >            trap_ne
5cfe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d00 : 68              >            pla         ;load status
5d01 : 48              >            pha
                       >            cmp_flag fc
5d02 : 0908            >            ora #decmode        ;ignore decimal mode bit
5d04 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5d06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d08 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5d09 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d0b : 48              >            pha         ;use stack to load status
5d0c : a97f            >            lda #$7f     ;precharge accu
5d0e : 28              >            plp
                        
5d0f : c50f                     cmp zp7f
                                tst_a $7f,fzc
5d11 : 08              >            php         ;save flags
5d12 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5d14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d16 : 68              >            pla         ;load status
5d17 : 48              >            pha
                       >            cmp_flag fzc
5d18 : 0908            >            ora #decmode        ;ignore decimal mode bit
5d1a : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5d1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d1e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5d1f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d21 : 48              >            pha         ;use stack to load status
5d22 : a97e            >            lda #$7e     ;precharge accu
5d24 : 28              >            plp
                        
5d25 : c50f                     cmp zp7f
                                tst_a $7e,fn
5d27 : 08              >            php         ;save flags
5d28 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5d2a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d2c : 68              >            pla         ;load status
5d2d : 48              >            pha
                       >            cmp_flag fn
5d2e : 0908            >            ora #decmode        ;ignore decimal mode bit
5d30 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5d32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d34 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5d35 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d37 : 48              >            pha         ;use stack to load status
5d38 : a980            >            lda #$80     ;precharge accu
5d3a : 28              >            plp
                        
5d3b : c50f                     cmp zp7f
                                tst_a $80,~fnz
5d3d : 08              >            php         ;save flags
5d3e : c980            >            cmp #$80     ;test result
                       >            trap_ne
5d40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d42 : 68              >            pla         ;load status
5d43 : 48              >            pha
                       >            cmp_flag ~fnz
5d44 : 0908            >            ora #decmode        ;ignore decimal mode bit
5d46 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5d48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d4a : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5d4b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d4d : 48              >            pha         ;use stack to load status
5d4e : a97f            >            lda #$7f     ;precharge accu
5d50 : 28              >            plp
                        
5d51 : c50f                     cmp zp7f
                                tst_a $7f,~fn
5d53 : 08              >            php         ;save flags
5d54 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5d56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d58 : 68              >            pla         ;load status
5d59 : 48              >            pha
                       >            cmp_flag ~fn
5d5a : 0908            >            ora #decmode        ;ignore decimal mode bit
5d5c : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5d5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d60 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5d61 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d63 : 48              >            pha         ;use stack to load status
5d64 : a97e            >            lda #$7e     ;precharge accu
5d66 : 28              >            plp
                        
5d67 : c50f                     cmp zp7f
                                tst_a $7e,~fzc
5d69 : 08              >            php         ;save flags
5d6a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5d6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d6e : 68              >            pla         ;load status
5d6f : 48              >            pha
                       >            cmp_flag ~fzc
5d70 : 0908            >            ora #decmode        ;ignore decimal mode bit
5d72 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5d74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d76 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
5d77 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d79 : 48              >            pha         ;use stack to load status
5d7a : a980            >            lda #$80     ;precharge accu
5d7c : 28              >            plp
                        
5d7d : cd1c02                   cmp abs7f
                                tst_a $80,fc
5d80 : 08              >            php         ;save flags
5d81 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5d83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d85 : 68              >            pla         ;load status
5d86 : 48              >            pha
                       >            cmp_flag fc
5d87 : 0908            >            ora #decmode        ;ignore decimal mode bit
5d89 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5d8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d8d : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5d8e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d90 : 48              >            pha         ;use stack to load status
5d91 : a97f            >            lda #$7f     ;precharge accu
5d93 : 28              >            plp
                        
5d94 : cd1c02                   cmp abs7f
                                tst_a $7f,fzc
5d97 : 08              >            php         ;save flags
5d98 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5d9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d9c : 68              >            pla         ;load status
5d9d : 48              >            pha
                       >            cmp_flag fzc
5d9e : 0908            >            ora #decmode        ;ignore decimal mode bit
5da0 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5da2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5da4 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5da5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5da7 : 48              >            pha         ;use stack to load status
5da8 : a97e            >            lda #$7e     ;precharge accu
5daa : 28              >            plp
                        
5dab : cd1c02                   cmp abs7f
                                tst_a $7e,fn
5dae : 08              >            php         ;save flags
5daf : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5db1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5db3 : 68              >            pla         ;load status
5db4 : 48              >            pha
                       >            cmp_flag fn
5db5 : 0908            >            ora #decmode        ;ignore decimal mode bit
5db7 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5db9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dbb : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5dbc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5dbe : 48              >            pha         ;use stack to load status
5dbf : a980            >            lda #$80     ;precharge accu
5dc1 : 28              >            plp
                        
5dc2 : cd1c02                   cmp abs7f
                                tst_a $80,~fnz
5dc5 : 08              >            php         ;save flags
5dc6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5dc8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dca : 68              >            pla         ;load status
5dcb : 48              >            pha
                       >            cmp_flag ~fnz
5dcc : 0908            >            ora #decmode        ;ignore decimal mode bit
5dce : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5dd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dd2 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5dd3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5dd5 : 48              >            pha         ;use stack to load status
5dd6 : a97f            >            lda #$7f     ;precharge accu
5dd8 : 28              >            plp
                        
5dd9 : cd1c02                   cmp abs7f
                                tst_a $7f,~fn
5ddc : 08              >            php         ;save flags
5ddd : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5ddf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5de1 : 68              >            pla         ;load status
5de2 : 48              >            pha
                       >            cmp_flag ~fn
5de3 : 0908            >            ora #decmode        ;ignore decimal mode bit
5de5 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5de7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5de9 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5dea : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5dec : 48              >            pha         ;use stack to load status
5ded : a97e            >            lda #$7e     ;precharge accu
5def : 28              >            plp
                        
5df0 : cd1c02                   cmp abs7f
                                tst_a $7e,~fzc
5df3 : 08              >            php         ;save flags
5df4 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5df6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5df8 : 68              >            pla         ;load status
5df9 : 48              >            pha
                       >            cmp_flag ~fzc
5dfa : 0908            >            ora #decmode        ;ignore decimal mode bit
5dfc : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5dfe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e00 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
5e01 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e03 : 48              >            pha         ;use stack to load status
5e04 : a980            >            lda #$80     ;precharge accu
5e06 : 28              >            plp
                        
5e07 : c97f                     cmp #$7f
                                tst_a $80,fc
5e09 : 08              >            php         ;save flags
5e0a : c980            >            cmp #$80     ;test result
                       >            trap_ne
5e0c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e0e : 68              >            pla         ;load status
5e0f : 48              >            pha
                       >            cmp_flag fc
5e10 : 0908            >            ora #decmode        ;ignore decimal mode bit
5e12 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5e14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e16 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5e17 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e19 : 48              >            pha         ;use stack to load status
5e1a : a97f            >            lda #$7f     ;precharge accu
5e1c : 28              >            plp
                        
5e1d : c97f                     cmp #$7f
                                tst_a $7f,fzc
5e1f : 08              >            php         ;save flags
5e20 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5e22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e24 : 68              >            pla         ;load status
5e25 : 48              >            pha
                       >            cmp_flag fzc
5e26 : 0908            >            ora #decmode        ;ignore decimal mode bit
5e28 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5e2a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e2c : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5e2d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e2f : 48              >            pha         ;use stack to load status
5e30 : a97e            >            lda #$7e     ;precharge accu
5e32 : 28              >            plp
                        
5e33 : c97f                     cmp #$7f
                                tst_a $7e,fn
5e35 : 08              >            php         ;save flags
5e36 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5e38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e3a : 68              >            pla         ;load status
5e3b : 48              >            pha
                       >            cmp_flag fn
5e3c : 0908            >            ora #decmode        ;ignore decimal mode bit
5e3e : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5e40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e42 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5e43 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e45 : 48              >            pha         ;use stack to load status
5e46 : a980            >            lda #$80     ;precharge accu
5e48 : 28              >            plp
                        
5e49 : c97f                     cmp #$7f
                                tst_a $80,~fnz
5e4b : 08              >            php         ;save flags
5e4c : c980            >            cmp #$80     ;test result
                       >            trap_ne
5e4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e50 : 68              >            pla         ;load status
5e51 : 48              >            pha
                       >            cmp_flag ~fnz
5e52 : 0908            >            ora #decmode        ;ignore decimal mode bit
5e54 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5e56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e58 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5e59 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e5b : 48              >            pha         ;use stack to load status
5e5c : a97f            >            lda #$7f     ;precharge accu
5e5e : 28              >            plp
                        
5e5f : c97f                     cmp #$7f
                                tst_a $7f,~fn
5e61 : 08              >            php         ;save flags
5e62 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5e64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e66 : 68              >            pla         ;load status
5e67 : 48              >            pha
                       >            cmp_flag ~fn
5e68 : 0908            >            ora #decmode        ;ignore decimal mode bit
5e6a : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5e6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e6e : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5e6f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e71 : 48              >            pha         ;use stack to load status
5e72 : a97e            >            lda #$7e     ;precharge accu
5e74 : 28              >            plp
                        
5e75 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
5e77 : 08              >            php         ;save flags
5e78 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5e7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e7c : 68              >            pla         ;load status
5e7d : 48              >            pha
                       >            cmp_flag ~fzc
5e7e : 0908            >            ora #decmode        ;ignore decimal mode bit
5e80 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5e82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e84 : 28              >            plp         ;restore status
                        
                        
5e85 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
5e87 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e89 : 48              >            pha         ;use stack to load status
5e8a : a980            >            lda #$80     ;precharge accu
5e8c : 28              >            plp
                        
5e8d : d50b                     cmp zp1,x
                                tst_a $80,fc
5e8f : 08              >            php         ;save flags
5e90 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5e92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e94 : 68              >            pla         ;load status
5e95 : 48              >            pha
                       >            cmp_flag fc
5e96 : 0908            >            ora #decmode        ;ignore decimal mode bit
5e98 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5e9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e9c : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5e9d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e9f : 48              >            pha         ;use stack to load status
5ea0 : a97f            >            lda #$7f     ;precharge accu
5ea2 : 28              >            plp
                        
5ea3 : d50b                     cmp zp1,x
                                tst_a $7f,fzc
5ea5 : 08              >            php         ;save flags
5ea6 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5ea8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5eaa : 68              >            pla         ;load status
5eab : 48              >            pha
                       >            cmp_flag fzc
5eac : 0908            >            ora #decmode        ;ignore decimal mode bit
5eae : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5eb0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5eb2 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5eb3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5eb5 : 48              >            pha         ;use stack to load status
5eb6 : a97e            >            lda #$7e     ;precharge accu
5eb8 : 28              >            plp
                        
5eb9 : d50b                     cmp zp1,x
                                tst_a $7e,fn
5ebb : 08              >            php         ;save flags
5ebc : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5ebe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ec0 : 68              >            pla         ;load status
5ec1 : 48              >            pha
                       >            cmp_flag fn
5ec2 : 0908            >            ora #decmode        ;ignore decimal mode bit
5ec4 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5ec6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ec8 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5ec9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ecb : 48              >            pha         ;use stack to load status
5ecc : a980            >            lda #$80     ;precharge accu
5ece : 28              >            plp
                        
5ecf : d50b                     cmp zp1,x
                                tst_a $80,~fnz
5ed1 : 08              >            php         ;save flags
5ed2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5ed4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ed6 : 68              >            pla         ;load status
5ed7 : 48              >            pha
                       >            cmp_flag ~fnz
5ed8 : 0908            >            ora #decmode        ;ignore decimal mode bit
5eda : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5edc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ede : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5edf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ee1 : 48              >            pha         ;use stack to load status
5ee2 : a97f            >            lda #$7f     ;precharge accu
5ee4 : 28              >            plp
                        
5ee5 : d50b                     cmp zp1,x
                                tst_a $7f,~fn
5ee7 : 08              >            php         ;save flags
5ee8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5eea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5eec : 68              >            pla         ;load status
5eed : 48              >            pha
                       >            cmp_flag ~fn
5eee : 0908            >            ora #decmode        ;ignore decimal mode bit
5ef0 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5ef2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ef4 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5ef5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ef7 : 48              >            pha         ;use stack to load status
5ef8 : a97e            >            lda #$7e     ;precharge accu
5efa : 28              >            plp
                        
5efb : d50b                     cmp zp1,x
                                tst_a $7e,~fzc
5efd : 08              >            php         ;save flags
5efe : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5f00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f02 : 68              >            pla         ;load status
5f03 : 48              >            pha
                       >            cmp_flag ~fzc
5f04 : 0908            >            ora #decmode        ;ignore decimal mode bit
5f06 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5f08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f0a : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
5f0b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f0d : 48              >            pha         ;use stack to load status
5f0e : a980            >            lda #$80     ;precharge accu
5f10 : 28              >            plp
                        
5f11 : dd1802                   cmp abs1,x
                                tst_a $80,fc
5f14 : 08              >            php         ;save flags
5f15 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5f17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f19 : 68              >            pla         ;load status
5f1a : 48              >            pha
                       >            cmp_flag fc
5f1b : 0908            >            ora #decmode        ;ignore decimal mode bit
5f1d : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5f1f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f21 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5f22 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f24 : 48              >            pha         ;use stack to load status
5f25 : a97f            >            lda #$7f     ;precharge accu
5f27 : 28              >            plp
                        
5f28 : dd1802                   cmp abs1,x
                                tst_a $7f,fzc
5f2b : 08              >            php         ;save flags
5f2c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5f2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f30 : 68              >            pla         ;load status
5f31 : 48              >            pha
                       >            cmp_flag fzc
5f32 : 0908            >            ora #decmode        ;ignore decimal mode bit
5f34 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5f36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f38 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5f39 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f3b : 48              >            pha         ;use stack to load status
5f3c : a97e            >            lda #$7e     ;precharge accu
5f3e : 28              >            plp
                        
5f3f : dd1802                   cmp abs1,x
                                tst_a $7e,fn
5f42 : 08              >            php         ;save flags
5f43 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5f45 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f47 : 68              >            pla         ;load status
5f48 : 48              >            pha
                       >            cmp_flag fn
5f49 : 0908            >            ora #decmode        ;ignore decimal mode bit
5f4b : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5f4d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f4f : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5f50 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5f52 : 48              >            pha         ;use stack to load status
5f53 : a980            >            lda #$80     ;precharge accu
5f55 : 28              >            plp
                        
5f56 : dd1802                   cmp abs1,x
                                tst_a $80,~fnz
5f59 : 08              >            php         ;save flags
5f5a : c980            >            cmp #$80     ;test result
                       >            trap_ne
5f5c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f5e : 68              >            pla         ;load status
5f5f : 48              >            pha
                       >            cmp_flag ~fnz
5f60 : 0908            >            ora #decmode        ;ignore decimal mode bit
5f62 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5f64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f66 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5f67 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5f69 : 48              >            pha         ;use stack to load status
5f6a : a97f            >            lda #$7f     ;precharge accu
5f6c : 28              >            plp
                        
5f6d : dd1802                   cmp abs1,x
                                tst_a $7f,~fn
5f70 : 08              >            php         ;save flags
5f71 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5f73 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f75 : 68              >            pla         ;load status
5f76 : 48              >            pha
                       >            cmp_flag ~fn
5f77 : 0908            >            ora #decmode        ;ignore decimal mode bit
5f79 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5f7b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f7d : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5f7e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5f80 : 48              >            pha         ;use stack to load status
5f81 : a97e            >            lda #$7e     ;precharge accu
5f83 : 28              >            plp
                        
5f84 : dd1802                   cmp abs1,x
                                tst_a $7e,~fzc
5f87 : 08              >            php         ;save flags
5f88 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5f8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f8c : 68              >            pla         ;load status
5f8d : 48              >            pha
                       >            cmp_flag ~fzc
5f8e : 0908            >            ora #decmode        ;ignore decimal mode bit
5f90 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5f92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f94 : 28              >            plp         ;restore status
                        
                        
5f95 : a004                     ldy #4          ;with indexing by Y
5f97 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
5f99 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f9b : 48              >            pha         ;use stack to load status
5f9c : a980            >            lda #$80     ;precharge accu
5f9e : 28              >            plp
                        
5f9f : d91802                   cmp abs1,y
                                tst_a $80,fc
5fa2 : 08              >            php         ;save flags
5fa3 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5fa5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5fa7 : 68              >            pla         ;load status
5fa8 : 48              >            pha
                       >            cmp_flag fc
5fa9 : 0908            >            ora #decmode        ;ignore decimal mode bit
5fab : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5fad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5faf : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5fb0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5fb2 : 48              >            pha         ;use stack to load status
5fb3 : a97f            >            lda #$7f     ;precharge accu
5fb5 : 28              >            plp
                        
5fb6 : d91802                   cmp abs1,y
                                tst_a $7f,fzc
5fb9 : 08              >            php         ;save flags
5fba : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5fbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5fbe : 68              >            pla         ;load status
5fbf : 48              >            pha
                       >            cmp_flag fzc
5fc0 : 0908            >            ora #decmode        ;ignore decimal mode bit
5fc2 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5fc4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5fc6 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5fc7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5fc9 : 48              >            pha         ;use stack to load status
5fca : a97e            >            lda #$7e     ;precharge accu
5fcc : 28              >            plp
                        
5fcd : d91802                   cmp abs1,y
                                tst_a $7e,fn
5fd0 : 08              >            php         ;save flags
5fd1 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5fd3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5fd5 : 68              >            pla         ;load status
5fd6 : 48              >            pha
                       >            cmp_flag fn
5fd7 : 0908            >            ora #decmode        ;ignore decimal mode bit
5fd9 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5fdb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5fdd : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5fde : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5fe0 : 48              >            pha         ;use stack to load status
5fe1 : a980            >            lda #$80     ;precharge accu
5fe3 : 28              >            plp
                        
5fe4 : d91802                   cmp abs1,y
                                tst_a $80,~fnz
5fe7 : 08              >            php         ;save flags
5fe8 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5fea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5fec : 68              >            pla         ;load status
5fed : 48              >            pha
                       >            cmp_flag ~fnz
5fee : 0908            >            ora #decmode        ;ignore decimal mode bit
5ff0 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
5ff2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ff4 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5ff5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ff7 : 48              >            pha         ;use stack to load status
5ff8 : a97f            >            lda #$7f     ;precharge accu
5ffa : 28              >            plp
                        
5ffb : d91802                   cmp abs1,y
                                tst_a $7f,~fn
5ffe : 08              >            php         ;save flags
5fff : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
6001 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6003 : 68              >            pla         ;load status
6004 : 48              >            pha
                       >            cmp_flag ~fn
6005 : 0908            >            ora #decmode        ;ignore decimal mode bit
6007 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
6009 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
600b : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
600c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
600e : 48              >            pha         ;use stack to load status
600f : a97e            >            lda #$7e     ;precharge accu
6011 : 28              >            plp
                        
6012 : d91802                   cmp abs1,y
                                tst_a $7e,~fzc
6015 : 08              >            php         ;save flags
6016 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
6018 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
601a : 68              >            pla         ;load status
601b : 48              >            pha
                       >            cmp_flag ~fzc
601c : 0908            >            ora #decmode        ;ignore decimal mode bit
601e : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
6020 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6022 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
6023 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6025 : 48              >            pha         ;use stack to load status
6026 : a980            >            lda #$80     ;precharge accu
6028 : 28              >            plp
                        
6029 : c11c                     cmp (ind1,x)
                                tst_a $80,fc
602b : 08              >            php         ;save flags
602c : c980            >            cmp #$80     ;test result
                       >            trap_ne
602e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6030 : 68              >            pla         ;load status
6031 : 48              >            pha
                       >            cmp_flag fc
6032 : 0908            >            ora #decmode        ;ignore decimal mode bit
6034 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
6036 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6038 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
6039 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
603b : 48              >            pha         ;use stack to load status
603c : a97f            >            lda #$7f     ;precharge accu
603e : 28              >            plp
                        
603f : c11c                     cmp (ind1,x)
                                tst_a $7f,fzc
6041 : 08              >            php         ;save flags
6042 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
6044 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6046 : 68              >            pla         ;load status
6047 : 48              >            pha
                       >            cmp_flag fzc
6048 : 0908            >            ora #decmode        ;ignore decimal mode bit
604a : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
604c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
604e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
604f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6051 : 48              >            pha         ;use stack to load status
6052 : a97e            >            lda #$7e     ;precharge accu
6054 : 28              >            plp
                        
6055 : c11c                     cmp (ind1,x)
                                tst_a $7e,fn
6057 : 08              >            php         ;save flags
6058 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
605a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
605c : 68              >            pla         ;load status
605d : 48              >            pha
                       >            cmp_flag fn
605e : 0908            >            ora #decmode        ;ignore decimal mode bit
6060 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
6062 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6064 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
6065 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6067 : 48              >            pha         ;use stack to load status
6068 : a980            >            lda #$80     ;precharge accu
606a : 28              >            plp
                        
606b : c11c                     cmp (ind1,x)
                                tst_a $80,~fnz
606d : 08              >            php         ;save flags
606e : c980            >            cmp #$80     ;test result
                       >            trap_ne
6070 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6072 : 68              >            pla         ;load status
6073 : 48              >            pha
                       >            cmp_flag ~fnz
6074 : 0908            >            ora #decmode        ;ignore decimal mode bit
6076 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
6078 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
607a : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
607b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
607d : 48              >            pha         ;use stack to load status
607e : a97f            >            lda #$7f     ;precharge accu
6080 : 28              >            plp
                        
6081 : c11c                     cmp (ind1,x)
                                tst_a $7f,~fn
6083 : 08              >            php         ;save flags
6084 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
6086 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6088 : 68              >            pla         ;load status
6089 : 48              >            pha
                       >            cmp_flag ~fn
608a : 0908            >            ora #decmode        ;ignore decimal mode bit
608c : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
608e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6090 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
6091 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6093 : 48              >            pha         ;use stack to load status
6094 : a97e            >            lda #$7e     ;precharge accu
6096 : 28              >            plp
                        
6097 : c11c                     cmp (ind1,x)
                                tst_a $7e,~fzc
6099 : 08              >            php         ;save flags
609a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
609c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
609e : 68              >            pla         ;load status
609f : 48              >            pha
                       >            cmp_flag ~fzc
60a0 : 0908            >            ora #decmode        ;ignore decimal mode bit
60a2 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
60a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60a6 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
60a7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
60a9 : 48              >            pha         ;use stack to load status
60aa : a980            >            lda #$80     ;precharge accu
60ac : 28              >            plp
                        
60ad : d11c                     cmp (ind1),y
                                tst_a $80,fc
60af : 08              >            php         ;save flags
60b0 : c980            >            cmp #$80     ;test result
                       >            trap_ne
60b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60b4 : 68              >            pla         ;load status
60b5 : 48              >            pha
                       >            cmp_flag fc
60b6 : 0908            >            ora #decmode        ;ignore decimal mode bit
60b8 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
60ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60bc : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
60bd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
60bf : 48              >            pha         ;use stack to load status
60c0 : a97f            >            lda #$7f     ;precharge accu
60c2 : 28              >            plp
                        
60c3 : d11c                     cmp (ind1),y
                                tst_a $7f,fzc
60c5 : 08              >            php         ;save flags
60c6 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
60c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60ca : 68              >            pla         ;load status
60cb : 48              >            pha
                       >            cmp_flag fzc
60cc : 0908            >            ora #decmode        ;ignore decimal mode bit
60ce : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
60d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60d2 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
60d3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
60d5 : 48              >            pha         ;use stack to load status
60d6 : a97e            >            lda #$7e     ;precharge accu
60d8 : 28              >            plp
                        
60d9 : d11c                     cmp (ind1),y
                                tst_a $7e,fn
60db : 08              >            php         ;save flags
60dc : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
60de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60e0 : 68              >            pla         ;load status
60e1 : 48              >            pha
                       >            cmp_flag fn
60e2 : 0908            >            ora #decmode        ;ignore decimal mode bit
60e4 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
60e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60e8 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
60e9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
60eb : 48              >            pha         ;use stack to load status
60ec : a980            >            lda #$80     ;precharge accu
60ee : 28              >            plp
                        
60ef : d11c                     cmp (ind1),y
                                tst_a $80,~fnz
60f1 : 08              >            php         ;save flags
60f2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
60f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60f6 : 68              >            pla         ;load status
60f7 : 48              >            pha
                       >            cmp_flag ~fnz
60f8 : 0908            >            ora #decmode        ;ignore decimal mode bit
60fa : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
60fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60fe : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
60ff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6101 : 48              >            pha         ;use stack to load status
6102 : a97f            >            lda #$7f     ;precharge accu
6104 : 28              >            plp
                        
6105 : d11c                     cmp (ind1),y
                                tst_a $7f,~fn
6107 : 08              >            php         ;save flags
6108 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
610a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
610c : 68              >            pla         ;load status
610d : 48              >            pha
                       >            cmp_flag ~fn
610e : 0908            >            ora #decmode        ;ignore decimal mode bit
6110 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
6112 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6114 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
6115 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6117 : 48              >            pha         ;use stack to load status
6118 : a97e            >            lda #$7e     ;precharge accu
611a : 28              >            plp
                        
611b : d11c                     cmp (ind1),y
                                tst_a $7e,~fzc
611d : 08              >            php         ;save flags
611e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
6120 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6122 : 68              >            pla         ;load status
6123 : 48              >            pha
                       >            cmp_flag ~fzc
6124 : 0908            >            ora #decmode        ;ignore decimal mode bit
6126 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
6128 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
612a : 28              >            plp         ;restore status
                        
                                next_test
612b : ad0002          >            lda test_case   ;previous test
612e : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6130 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001d =                 >test_num = test_num + 1
6132 : a91d            >            lda #test_num   ;*** next tests' number
6134 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
6137 : a205                     ldx #5
6139 :                  tasl
                                set_ax zps,0
                       >            load_flag 0
6139 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
613b : 48              >            pha         ;use stack to load status
613c : b509            >            lda zps,x    ;precharge accu
613e : 28              >            plp
                        
613f : 0a                       asl a
                                tst_ax rASL,fASL,0
6140 : 08              >            php         ;save flags
6141 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
6144 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6146 : 68              >            pla         ;load status
                       >            eor_flag 0
6147 : 0908            >            ora #decmode        ;ignore decimal mode bit
6149 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
614b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
614e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6150 : ca                       dex
6151 : 10e6                     bpl tasl
6153 : a205                     ldx #5
6155 :                  tasl1
                                set_ax zps,$ff
                       >            load_flag $ff
6155 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6157 : 48              >            pha         ;use stack to load status
6158 : b509            >            lda zps,x    ;precharge accu
615a : 28              >            plp
                        
615b : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
615c : 08              >            php         ;save flags
615d : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
6160 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6162 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6163 : 0908            >            ora #decmode        ;ignore decimal mode bit
6165 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6167 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
616a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
616c : ca                       dex
616d : 10e6                     bpl tasl1
                        
616f : a205                     ldx #5
6171 :                  tlsr
                                set_ax zps,0
                       >            load_flag 0
6171 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6173 : 48              >            pha         ;use stack to load status
6174 : b509            >            lda zps,x    ;precharge accu
6176 : 28              >            plp
                        
6177 : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
6178 : 08              >            php         ;save flags
6179 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
617c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
617e : 68              >            pla         ;load status
                       >            eor_flag 0
617f : 0908            >            ora #decmode        ;ignore decimal mode bit
6181 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6183 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
6186 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6188 : ca                       dex
6189 : 10e6                     bpl tlsr
618b : a205                     ldx #5
618d :                  tlsr1
                                set_ax zps,$ff
                       >            load_flag $ff
618d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
618f : 48              >            pha         ;use stack to load status
6190 : b509            >            lda zps,x    ;precharge accu
6192 : 28              >            plp
                        
6193 : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
6194 : 08              >            php         ;save flags
6195 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
6198 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
619a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
619b : 0908            >            ora #decmode        ;ignore decimal mode bit
619d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
619f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
61a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
61a4 : ca                       dex
61a5 : 10e6                     bpl tlsr1
                        
61a7 : a205                     ldx #5
61a9 :                  trol
                                set_ax zps,0
                       >            load_flag 0
61a9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
61ab : 48              >            pha         ;use stack to load status
61ac : b509            >            lda zps,x    ;precharge accu
61ae : 28              >            plp
                        
61af : 2a                       rol a
                                tst_ax rROL,fROL,0
61b0 : 08              >            php         ;save flags
61b1 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
61b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
61b6 : 68              >            pla         ;load status
                       >            eor_flag 0
61b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
61b9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
61bb : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
61be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
61c0 : ca                       dex
61c1 : 10e6                     bpl trol
61c3 : a205                     ldx #5
61c5 :                  trol1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
61c5 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
61c7 : 48              >            pha         ;use stack to load status
61c8 : b509            >            lda zps,x    ;precharge accu
61ca : 28              >            plp
                        
61cb : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
61cc : 08              >            php         ;save flags
61cd : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
61d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
61d2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
61d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
61d5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
61d7 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
61da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
61dc : ca                       dex
61dd : 10e6                     bpl trol1
                        
61df : a205                     ldx #5
61e1 :                  trolc
                                set_ax zps,fc
                       >            load_flag fc
61e1 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
61e3 : 48              >            pha         ;use stack to load status
61e4 : b509            >            lda zps,x    ;precharge accu
61e6 : 28              >            plp
                        
61e7 : 2a                       rol a
                                tst_ax rROLc,fROLc,0
61e8 : 08              >            php         ;save flags
61e9 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
61ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
61ee : 68              >            pla         ;load status
                       >            eor_flag 0
61ef : 0908            >            ora #decmode        ;ignore decimal mode bit
61f1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
61f3 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
61f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
61f8 : ca                       dex
61f9 : 10e6                     bpl trolc
61fb : a205                     ldx #5
61fd :                  trolc1
                                set_ax zps,$ff
                       >            load_flag $ff
61fd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
61ff : 48              >            pha         ;use stack to load status
6200 : b509            >            lda zps,x    ;precharge accu
6202 : 28              >            plp
                        
6203 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
6204 : 08              >            php         ;save flags
6205 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
6208 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
620a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
620b : 0908            >            ora #decmode        ;ignore decimal mode bit
620d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
620f : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
6212 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6214 : ca                       dex
6215 : 10e6                     bpl trolc1
                        
6217 : a205                     ldx #5
6219 :                  tror
                                set_ax zps,0
                       >            load_flag 0
6219 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
621b : 48              >            pha         ;use stack to load status
621c : b509            >            lda zps,x    ;precharge accu
621e : 28              >            plp
                        
621f : 6a                       ror a
                                tst_ax rROR,fROR,0
6220 : 08              >            php         ;save flags
6221 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
6224 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6226 : 68              >            pla         ;load status
                       >            eor_flag 0
6227 : 0908            >            ora #decmode        ;ignore decimal mode bit
6229 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
622b : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
622e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6230 : ca                       dex
6231 : 10e6                     bpl tror
6233 : a205                     ldx #5
6235 :                  tror1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
6235 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6237 : 48              >            pha         ;use stack to load status
6238 : b509            >            lda zps,x    ;precharge accu
623a : 28              >            plp
                        
623b : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
623c : 08              >            php         ;save flags
623d : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
6240 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6242 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6243 : 0908            >            ora #decmode        ;ignore decimal mode bit
6245 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6247 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
624a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
624c : ca                       dex
624d : 10e6                     bpl tror1
                        
624f : a205                     ldx #5
6251 :                  trorc
                                set_ax zps,fc
                       >            load_flag fc
6251 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
6253 : 48              >            pha         ;use stack to load status
6254 : b509            >            lda zps,x    ;precharge accu
6256 : 28              >            plp
                        
6257 : 6a                       ror a
                                tst_ax rRORc,fRORc,0
6258 : 08              >            php         ;save flags
6259 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
625c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
625e : 68              >            pla         ;load status
                       >            eor_flag 0
625f : 0908            >            ora #decmode        ;ignore decimal mode bit
6261 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6263 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
6266 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6268 : ca                       dex
6269 : 10e6                     bpl trorc
626b : a205                     ldx #5
626d :                  trorc1
                                set_ax zps,$ff
                       >            load_flag $ff
626d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
626f : 48              >            pha         ;use stack to load status
6270 : b509            >            lda zps,x    ;precharge accu
6272 : 28              >            plp
                        
6273 : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
6274 : 08              >            php         ;save flags
6275 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
6278 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
627a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
627b : 0908            >            ora #decmode        ;ignore decimal mode bit
627d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
627f : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
6282 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6284 : ca                       dex
6285 : 10e6                     bpl trorc1
                                next_test
6287 : ad0002          >            lda test_case   ;previous test
628a : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
628c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001e =                 >test_num = test_num + 1
628e : a91e            >            lda #test_num   ;*** next tests' number
6290 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
6293 : a205                     ldx #5
6295 :                  tasl2
                                set_z zps,0
                       >            load_flag 0
6295 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6297 : 48              >            pha         ;use stack to load status
6298 : b509            >            lda zps,x    ;load to zeropage
629a : 8502            >            sta zpt
629c : 28              >            plp
                        
629d : 0602                     asl zpt
                                tst_z rASL,fASL,0
629f : 08              >            php         ;save flags
62a0 : a502            >            lda zpt
62a2 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
62a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
62a7 : 68              >            pla         ;load status
                       >            eor_flag 0
62a8 : 0908            >            ora #decmode        ;ignore decimal mode bit
62aa : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
62ac : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
62af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
62b1 : ca                       dex
62b2 : 10e1                     bpl tasl2
62b4 : a205                     ldx #5
62b6 :                  tasl3
                                set_z zps,$ff
                       >            load_flag $ff
62b6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
62b8 : 48              >            pha         ;use stack to load status
62b9 : b509            >            lda zps,x    ;load to zeropage
62bb : 8502            >            sta zpt
62bd : 28              >            plp
                        
62be : 0602                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
62c0 : 08              >            php         ;save flags
62c1 : a502            >            lda zpt
62c3 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
62c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
62c8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
62c9 : 0908            >            ora #decmode        ;ignore decimal mode bit
62cb : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
62cd : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
62d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
62d2 : ca                       dex
62d3 : 10e1                     bpl tasl3
                        
62d5 : a205                     ldx #5
62d7 :                  tlsr2
                                set_z zps,0
                       >            load_flag 0
62d7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
62d9 : 48              >            pha         ;use stack to load status
62da : b509            >            lda zps,x    ;load to zeropage
62dc : 8502            >            sta zpt
62de : 28              >            plp
                        
62df : 4602                     lsr zpt
                                tst_z rLSR,fLSR,0
62e1 : 08              >            php         ;save flags
62e2 : a502            >            lda zpt
62e4 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
62e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
62e9 : 68              >            pla         ;load status
                       >            eor_flag 0
62ea : 0908            >            ora #decmode        ;ignore decimal mode bit
62ec : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
62ee : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
62f1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
62f3 : ca                       dex
62f4 : 10e1                     bpl tlsr2
62f6 : a205                     ldx #5
62f8 :                  tlsr3
                                set_z zps,$ff
                       >            load_flag $ff
62f8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
62fa : 48              >            pha         ;use stack to load status
62fb : b509            >            lda zps,x    ;load to zeropage
62fd : 8502            >            sta zpt
62ff : 28              >            plp
                        
6300 : 4602                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
6302 : 08              >            php         ;save flags
6303 : a502            >            lda zpt
6305 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
6308 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
630a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
630b : 0908            >            ora #decmode        ;ignore decimal mode bit
630d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
630f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6312 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6314 : ca                       dex
6315 : 10e1                     bpl tlsr3
                        
6317 : a205                     ldx #5
6319 :                  trol2
                                set_z zps,0
                       >            load_flag 0
6319 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
631b : 48              >            pha         ;use stack to load status
631c : b509            >            lda zps,x    ;load to zeropage
631e : 8502            >            sta zpt
6320 : 28              >            plp
                        
6321 : 2602                     rol zpt
                                tst_z rROL,fROL,0
6323 : 08              >            php         ;save flags
6324 : a502            >            lda zpt
6326 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
6329 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
632b : 68              >            pla         ;load status
                       >            eor_flag 0
632c : 0908            >            ora #decmode        ;ignore decimal mode bit
632e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6330 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
6333 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6335 : ca                       dex
6336 : 10e1                     bpl trol2
6338 : a205                     ldx #5
633a :                  trol3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
633a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
633c : 48              >            pha         ;use stack to load status
633d : b509            >            lda zps,x    ;load to zeropage
633f : 8502            >            sta zpt
6341 : 28              >            plp
                        
6342 : 2602                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
6344 : 08              >            php         ;save flags
6345 : a502            >            lda zpt
6347 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
634a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
634c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
634d : 0908            >            ora #decmode        ;ignore decimal mode bit
634f : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6351 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
6354 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6356 : ca                       dex
6357 : 10e1                     bpl trol3
                        
6359 : a205                     ldx #5
635b :                  trolc2
                                set_z zps,fc
                       >            load_flag fc
635b : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
635d : 48              >            pha         ;use stack to load status
635e : b509            >            lda zps,x    ;load to zeropage
6360 : 8502            >            sta zpt
6362 : 28              >            plp
                        
6363 : 2602                     rol zpt
                                tst_z rROLc,fROLc,0
6365 : 08              >            php         ;save flags
6366 : a502            >            lda zpt
6368 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
636b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
636d : 68              >            pla         ;load status
                       >            eor_flag 0
636e : 0908            >            ora #decmode        ;ignore decimal mode bit
6370 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6372 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
6375 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6377 : ca                       dex
6378 : 10e1                     bpl trolc2
637a : a205                     ldx #5
637c :                  trolc3
                                set_z zps,$ff
                       >            load_flag $ff
637c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
637e : 48              >            pha         ;use stack to load status
637f : b509            >            lda zps,x    ;load to zeropage
6381 : 8502            >            sta zpt
6383 : 28              >            plp
                        
6384 : 2602                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
6386 : 08              >            php         ;save flags
6387 : a502            >            lda zpt
6389 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
638c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
638e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
638f : 0908            >            ora #decmode        ;ignore decimal mode bit
6391 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6393 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
6396 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6398 : ca                       dex
6399 : 10e1                     bpl trolc3
                        
639b : a205                     ldx #5
639d :                  tror2
                                set_z zps,0
                       >            load_flag 0
639d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
639f : 48              >            pha         ;use stack to load status
63a0 : b509            >            lda zps,x    ;load to zeropage
63a2 : 8502            >            sta zpt
63a4 : 28              >            plp
                        
63a5 : 6602                     ror zpt
                                tst_z rROR,fROR,0
63a7 : 08              >            php         ;save flags
63a8 : a502            >            lda zpt
63aa : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
63ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
63af : 68              >            pla         ;load status
                       >            eor_flag 0
63b0 : 0908            >            ora #decmode        ;ignore decimal mode bit
63b2 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
63b4 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
63b7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
63b9 : ca                       dex
63ba : 10e1                     bpl tror2
63bc : a205                     ldx #5
63be :                  tror3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
63be : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
63c0 : 48              >            pha         ;use stack to load status
63c1 : b509            >            lda zps,x    ;load to zeropage
63c3 : 8502            >            sta zpt
63c5 : 28              >            plp
                        
63c6 : 6602                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
63c8 : 08              >            php         ;save flags
63c9 : a502            >            lda zpt
63cb : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
63ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
63d0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
63d1 : 0908            >            ora #decmode        ;ignore decimal mode bit
63d3 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
63d5 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
63d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
63da : ca                       dex
63db : 10e1                     bpl tror3
                        
63dd : a205                     ldx #5
63df :                  trorc2
                                set_z zps,fc
                       >            load_flag fc
63df : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
63e1 : 48              >            pha         ;use stack to load status
63e2 : b509            >            lda zps,x    ;load to zeropage
63e4 : 8502            >            sta zpt
63e6 : 28              >            plp
                        
63e7 : 6602                     ror zpt
                                tst_z rRORc,fRORc,0
63e9 : 08              >            php         ;save flags
63ea : a502            >            lda zpt
63ec : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
63ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
63f1 : 68              >            pla         ;load status
                       >            eor_flag 0
63f2 : 0908            >            ora #decmode        ;ignore decimal mode bit
63f4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
63f6 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
63f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
63fb : ca                       dex
63fc : 10e1                     bpl trorc2
63fe : a205                     ldx #5
6400 :                  trorc3
                                set_z zps,$ff
                       >            load_flag $ff
6400 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6402 : 48              >            pha         ;use stack to load status
6403 : b509            >            lda zps,x    ;load to zeropage
6405 : 8502            >            sta zpt
6407 : 28              >            plp
                        
6408 : 6602                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
640a : 08              >            php         ;save flags
640b : a502            >            lda zpt
640d : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
6410 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6412 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6413 : 0908            >            ora #decmode        ;ignore decimal mode bit
6415 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6417 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
641a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
641c : ca                       dex
641d : 10e1                     bpl trorc3
                                next_test
641f : ad0002          >            lda test_case   ;previous test
6422 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6424 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001f =                 >test_num = test_num + 1
6426 : a91f            >            lda #test_num   ;*** next tests' number
6428 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
642b : a205                     ldx #5
642d :                  tasl4
                                set_abs zps,0
                       >            load_flag 0
642d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
642f : 48              >            pha         ;use stack to load status
6430 : b509            >            lda zps,x    ;load to memory
6432 : 8d0302          >            sta abst
6435 : 28              >            plp
                        
6436 : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
6439 : 08              >            php         ;save flags
643a : ad0302          >            lda abst
643d : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
6440 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6442 : 68              >            pla         ;load status
                       >            eor_flag 0
6443 : 0908            >            ora #decmode        ;ignore decimal mode bit
6445 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6447 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
644a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
644c : ca                       dex
644d : 10de                     bpl tasl4
644f : a205                     ldx #5
6451 :                  tasl5
                                set_abs zps,$ff
                       >            load_flag $ff
6451 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6453 : 48              >            pha         ;use stack to load status
6454 : b509            >            lda zps,x    ;load to memory
6456 : 8d0302          >            sta abst
6459 : 28              >            plp
                        
645a : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
645d : 08              >            php         ;save flags
645e : ad0302          >            lda abst
6461 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
6464 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6466 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6467 : 0908            >            ora #decmode        ;ignore decimal mode bit
6469 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
646b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
646e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6470 : ca                       dex
6471 : 10de                     bpl tasl5
                        
6473 : a205                     ldx #5
6475 :                  tlsr4
                                set_abs zps,0
                       >            load_flag 0
6475 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6477 : 48              >            pha         ;use stack to load status
6478 : b509            >            lda zps,x    ;load to memory
647a : 8d0302          >            sta abst
647d : 28              >            plp
                        
647e : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
6481 : 08              >            php         ;save flags
6482 : ad0302          >            lda abst
6485 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
6488 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
648a : 68              >            pla         ;load status
                       >            eor_flag 0
648b : 0908            >            ora #decmode        ;ignore decimal mode bit
648d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
648f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6492 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6494 : ca                       dex
6495 : 10de                     bpl tlsr4
6497 : a205                     ldx #5
6499 :                  tlsr5
                                set_abs zps,$ff
                       >            load_flag $ff
6499 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
649b : 48              >            pha         ;use stack to load status
649c : b509            >            lda zps,x    ;load to memory
649e : 8d0302          >            sta abst
64a1 : 28              >            plp
                        
64a2 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
64a5 : 08              >            php         ;save flags
64a6 : ad0302          >            lda abst
64a9 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
64ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
64ae : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
64af : 0908            >            ora #decmode        ;ignore decimal mode bit
64b1 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
64b3 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
64b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
64b8 : ca                       dex
64b9 : 10de                     bpl tlsr5
                        
64bb : a205                     ldx #5
64bd :                  trol4
                                set_abs zps,0
                       >            load_flag 0
64bd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
64bf : 48              >            pha         ;use stack to load status
64c0 : b509            >            lda zps,x    ;load to memory
64c2 : 8d0302          >            sta abst
64c5 : 28              >            plp
                        
64c6 : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
64c9 : 08              >            php         ;save flags
64ca : ad0302          >            lda abst
64cd : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
64d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
64d2 : 68              >            pla         ;load status
                       >            eor_flag 0
64d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
64d5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
64d7 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
64da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
64dc : ca                       dex
64dd : 10de                     bpl trol4
64df : a205                     ldx #5
64e1 :                  trol5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
64e1 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
64e3 : 48              >            pha         ;use stack to load status
64e4 : b509            >            lda zps,x    ;load to memory
64e6 : 8d0302          >            sta abst
64e9 : 28              >            plp
                        
64ea : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
64ed : 08              >            php         ;save flags
64ee : ad0302          >            lda abst
64f1 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
64f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
64f6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
64f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
64f9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
64fb : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
64fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6500 : ca                       dex
6501 : 10de                     bpl trol5
                        
6503 : a205                     ldx #5
6505 :                  trolc4
                                set_abs zps,fc
                       >            load_flag fc
6505 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
6507 : 48              >            pha         ;use stack to load status
6508 : b509            >            lda zps,x    ;load to memory
650a : 8d0302          >            sta abst
650d : 28              >            plp
                        
650e : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
6511 : 08              >            php         ;save flags
6512 : ad0302          >            lda abst
6515 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
6518 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
651a : 68              >            pla         ;load status
                       >            eor_flag 0
651b : 0908            >            ora #decmode        ;ignore decimal mode bit
651d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
651f : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
6522 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6524 : ca                       dex
6525 : 10de                     bpl trolc4
6527 : a205                     ldx #5
6529 :                  trolc5
                                set_abs zps,$ff
                       >            load_flag $ff
6529 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
652b : 48              >            pha         ;use stack to load status
652c : b509            >            lda zps,x    ;load to memory
652e : 8d0302          >            sta abst
6531 : 28              >            plp
                        
6532 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
6535 : 08              >            php         ;save flags
6536 : ad0302          >            lda abst
6539 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
653c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
653e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
653f : 0908            >            ora #decmode        ;ignore decimal mode bit
6541 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6543 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
6546 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6548 : ca                       dex
6549 : 10de                     bpl trolc5
                        
654b : a205                     ldx #5
654d :                  tror4
                                set_abs zps,0
                       >            load_flag 0
654d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
654f : 48              >            pha         ;use stack to load status
6550 : b509            >            lda zps,x    ;load to memory
6552 : 8d0302          >            sta abst
6555 : 28              >            plp
                        
6556 : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
6559 : 08              >            php         ;save flags
655a : ad0302          >            lda abst
655d : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
6560 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6562 : 68              >            pla         ;load status
                       >            eor_flag 0
6563 : 0908            >            ora #decmode        ;ignore decimal mode bit
6565 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6567 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
656a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
656c : ca                       dex
656d : 10de                     bpl tror4
656f : a205                     ldx #5
6571 :                  tror5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
6571 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6573 : 48              >            pha         ;use stack to load status
6574 : b509            >            lda zps,x    ;load to memory
6576 : 8d0302          >            sta abst
6579 : 28              >            plp
                        
657a : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
657d : 08              >            php         ;save flags
657e : ad0302          >            lda abst
6581 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
6584 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6586 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6587 : 0908            >            ora #decmode        ;ignore decimal mode bit
6589 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
658b : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
658e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6590 : ca                       dex
6591 : 10de                     bpl tror5
                        
6593 : a205                     ldx #5
6595 :                  trorc4
                                set_abs zps,fc
                       >            load_flag fc
6595 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
6597 : 48              >            pha         ;use stack to load status
6598 : b509            >            lda zps,x    ;load to memory
659a : 8d0302          >            sta abst
659d : 28              >            plp
                        
659e : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
65a1 : 08              >            php         ;save flags
65a2 : ad0302          >            lda abst
65a5 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
65a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
65aa : 68              >            pla         ;load status
                       >            eor_flag 0
65ab : 0908            >            ora #decmode        ;ignore decimal mode bit
65ad : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
65af : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
65b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
65b4 : ca                       dex
65b5 : 10de                     bpl trorc4
65b7 : a205                     ldx #5
65b9 :                  trorc5
                                set_abs zps,$ff
                       >            load_flag $ff
65b9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
65bb : 48              >            pha         ;use stack to load status
65bc : b509            >            lda zps,x    ;load to memory
65be : 8d0302          >            sta abst
65c1 : 28              >            plp
                        
65c2 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
65c5 : 08              >            php         ;save flags
65c6 : ad0302          >            lda abst
65c9 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
65cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
65ce : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
65cf : 0908            >            ora #decmode        ;ignore decimal mode bit
65d1 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
65d3 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
65d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
65d8 : ca                       dex
65d9 : 10de                     bpl trorc5
                                next_test
65db : ad0002          >            lda test_case   ;previous test
65de : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
65e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0020 =                 >test_num = test_num + 1
65e2 : a920            >            lda #test_num   ;*** next tests' number
65e4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
65e7 : a205                     ldx #5
65e9 :                  tasl6
                                set_zx zps,0
                       >            load_flag 0
65e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
65eb : 48              >            pha         ;use stack to load status
65ec : b509            >            lda zps,x    ;load to indexed zeropage
65ee : 9502            >            sta zpt,x
65f0 : 28              >            plp
                        
65f1 : 1602                     asl zpt,x
                                tst_zx rASL,fASL,0
65f3 : 08              >            php         ;save flags
65f4 : b502            >            lda zpt,x
65f6 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
65f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
65fb : 68              >            pla         ;load status
                       >            eor_flag 0
65fc : 0908            >            ora #decmode        ;ignore decimal mode bit
65fe : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6600 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
6603 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6605 : ca                       dex
6606 : 10e1                     bpl tasl6
6608 : a205                     ldx #5
660a :                  tasl7
                                set_zx zps,$ff
                       >            load_flag $ff
660a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
660c : 48              >            pha         ;use stack to load status
660d : b509            >            lda zps,x    ;load to indexed zeropage
660f : 9502            >            sta zpt,x
6611 : 28              >            plp
                        
6612 : 1602                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
6614 : 08              >            php         ;save flags
6615 : b502            >            lda zpt,x
6617 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
661a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
661c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
661d : 0908            >            ora #decmode        ;ignore decimal mode bit
661f : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6621 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
6624 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6626 : ca                       dex
6627 : 10e1                     bpl tasl7
                        
6629 : a205                     ldx #5
662b :                  tlsr6
                                set_zx zps,0
                       >            load_flag 0
662b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
662d : 48              >            pha         ;use stack to load status
662e : b509            >            lda zps,x    ;load to indexed zeropage
6630 : 9502            >            sta zpt,x
6632 : 28              >            plp
                        
6633 : 5602                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
6635 : 08              >            php         ;save flags
6636 : b502            >            lda zpt,x
6638 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
663b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
663d : 68              >            pla         ;load status
                       >            eor_flag 0
663e : 0908            >            ora #decmode        ;ignore decimal mode bit
6640 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6642 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6645 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6647 : ca                       dex
6648 : 10e1                     bpl tlsr6
664a : a205                     ldx #5
664c :                  tlsr7
                                set_zx zps,$ff
                       >            load_flag $ff
664c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
664e : 48              >            pha         ;use stack to load status
664f : b509            >            lda zps,x    ;load to indexed zeropage
6651 : 9502            >            sta zpt,x
6653 : 28              >            plp
                        
6654 : 5602                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
6656 : 08              >            php         ;save flags
6657 : b502            >            lda zpt,x
6659 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
665c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
665e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
665f : 0908            >            ora #decmode        ;ignore decimal mode bit
6661 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6663 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6666 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6668 : ca                       dex
6669 : 10e1                     bpl tlsr7
                        
666b : a205                     ldx #5
666d :                  trol6
                                set_zx zps,0
                       >            load_flag 0
666d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
666f : 48              >            pha         ;use stack to load status
6670 : b509            >            lda zps,x    ;load to indexed zeropage
6672 : 9502            >            sta zpt,x
6674 : 28              >            plp
                        
6675 : 3602                     rol zpt,x
                                tst_zx rROL,fROL,0
6677 : 08              >            php         ;save flags
6678 : b502            >            lda zpt,x
667a : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
667d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
667f : 68              >            pla         ;load status
                       >            eor_flag 0
6680 : 0908            >            ora #decmode        ;ignore decimal mode bit
6682 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6684 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
6687 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6689 : ca                       dex
668a : 10e1                     bpl trol6
668c : a205                     ldx #5
668e :                  trol7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
668e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6690 : 48              >            pha         ;use stack to load status
6691 : b509            >            lda zps,x    ;load to indexed zeropage
6693 : 9502            >            sta zpt,x
6695 : 28              >            plp
                        
6696 : 3602                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
6698 : 08              >            php         ;save flags
6699 : b502            >            lda zpt,x
669b : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
669e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
66a0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
66a1 : 0908            >            ora #decmode        ;ignore decimal mode bit
66a3 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
66a5 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
66a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
66aa : ca                       dex
66ab : 10e1                     bpl trol7
                        
66ad : a205                     ldx #5
66af :                  trolc6
                                set_zx zps,fc
                       >            load_flag fc
66af : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
66b1 : 48              >            pha         ;use stack to load status
66b2 : b509            >            lda zps,x    ;load to indexed zeropage
66b4 : 9502            >            sta zpt,x
66b6 : 28              >            plp
                        
66b7 : 3602                     rol zpt,x
                                tst_zx rROLc,fROLc,0
66b9 : 08              >            php         ;save flags
66ba : b502            >            lda zpt,x
66bc : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
66bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
66c1 : 68              >            pla         ;load status
                       >            eor_flag 0
66c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
66c4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
66c6 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
66c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
66cb : ca                       dex
66cc : 10e1                     bpl trolc6
66ce : a205                     ldx #5
66d0 :                  trolc7
                                set_zx zps,$ff
                       >            load_flag $ff
66d0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
66d2 : 48              >            pha         ;use stack to load status
66d3 : b509            >            lda zps,x    ;load to indexed zeropage
66d5 : 9502            >            sta zpt,x
66d7 : 28              >            plp
                        
66d8 : 3602                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
66da : 08              >            php         ;save flags
66db : b502            >            lda zpt,x
66dd : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
66e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
66e2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
66e3 : 0908            >            ora #decmode        ;ignore decimal mode bit
66e5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
66e7 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
66ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
66ec : ca                       dex
66ed : 10e1                     bpl trolc7
                        
66ef : a205                     ldx #5
66f1 :                  tror6
                                set_zx zps,0
                       >            load_flag 0
66f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
66f3 : 48              >            pha         ;use stack to load status
66f4 : b509            >            lda zps,x    ;load to indexed zeropage
66f6 : 9502            >            sta zpt,x
66f8 : 28              >            plp
                        
66f9 : 7602                     ror zpt,x
                                tst_zx rROR,fROR,0
66fb : 08              >            php         ;save flags
66fc : b502            >            lda zpt,x
66fe : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
6701 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6703 : 68              >            pla         ;load status
                       >            eor_flag 0
6704 : 0908            >            ora #decmode        ;ignore decimal mode bit
6706 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6708 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
670b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
670d : ca                       dex
670e : 10e1                     bpl tror6
6710 : a205                     ldx #5
6712 :                  tror7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
6712 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6714 : 48              >            pha         ;use stack to load status
6715 : b509            >            lda zps,x    ;load to indexed zeropage
6717 : 9502            >            sta zpt,x
6719 : 28              >            plp
                        
671a : 7602                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
671c : 08              >            php         ;save flags
671d : b502            >            lda zpt,x
671f : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
6722 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6724 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6725 : 0908            >            ora #decmode        ;ignore decimal mode bit
6727 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6729 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
672c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
672e : ca                       dex
672f : 10e1                     bpl tror7
                        
6731 : a205                     ldx #5
6733 :                  trorc6
                                set_zx zps,fc
                       >            load_flag fc
6733 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
6735 : 48              >            pha         ;use stack to load status
6736 : b509            >            lda zps,x    ;load to indexed zeropage
6738 : 9502            >            sta zpt,x
673a : 28              >            plp
                        
673b : 7602                     ror zpt,x
                                tst_zx rRORc,fRORc,0
673d : 08              >            php         ;save flags
673e : b502            >            lda zpt,x
6740 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
6743 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6745 : 68              >            pla         ;load status
                       >            eor_flag 0
6746 : 0908            >            ora #decmode        ;ignore decimal mode bit
6748 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
674a : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
674d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
674f : ca                       dex
6750 : 10e1                     bpl trorc6
6752 : a205                     ldx #5
6754 :                  trorc7
                                set_zx zps,$ff
                       >            load_flag $ff
6754 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6756 : 48              >            pha         ;use stack to load status
6757 : b509            >            lda zps,x    ;load to indexed zeropage
6759 : 9502            >            sta zpt,x
675b : 28              >            plp
                        
675c : 7602                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
675e : 08              >            php         ;save flags
675f : b502            >            lda zpt,x
6761 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
6764 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6766 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6767 : 0908            >            ora #decmode        ;ignore decimal mode bit
6769 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
676b : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
676e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6770 : ca                       dex
6771 : 10e1                     bpl trorc7
                                next_test
6773 : ad0002          >            lda test_case   ;previous test
6776 : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6778 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0021 =                 >test_num = test_num + 1
677a : a921            >            lda #test_num   ;*** next tests' number
677c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
677f : a205                     ldx #5
6781 :                  tasl8
                                set_absx zps,0
                       >            load_flag 0
6781 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6783 : 48              >            pha         ;use stack to load status
6784 : b509            >            lda zps,x    ;load to indexed memory
6786 : 9d0302          >            sta abst,x
6789 : 28              >            plp
                        
678a : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
678d : 08              >            php         ;save flags
678e : bd0302          >            lda abst,x
6791 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
6794 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6796 : 68              >            pla         ;load status
                       >            eor_flag 0
6797 : 0908            >            ora #decmode        ;ignore decimal mode bit
6799 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
679b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
679e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
67a0 : ca                       dex
67a1 : 10de                     bpl tasl8
67a3 : a205                     ldx #5
67a5 :                  tasl9
                                set_absx zps,$ff
                       >            load_flag $ff
67a5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
67a7 : 48              >            pha         ;use stack to load status
67a8 : b509            >            lda zps,x    ;load to indexed memory
67aa : 9d0302          >            sta abst,x
67ad : 28              >            plp
                        
67ae : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
67b1 : 08              >            php         ;save flags
67b2 : bd0302          >            lda abst,x
67b5 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
67b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
67ba : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
67bb : 0908            >            ora #decmode        ;ignore decimal mode bit
67bd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
67bf : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
67c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
67c4 : ca                       dex
67c5 : 10de                     bpl tasl9
                        
67c7 : a205                     ldx #5
67c9 :                  tlsr8
                                set_absx zps,0
                       >            load_flag 0
67c9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
67cb : 48              >            pha         ;use stack to load status
67cc : b509            >            lda zps,x    ;load to indexed memory
67ce : 9d0302          >            sta abst,x
67d1 : 28              >            plp
                        
67d2 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
67d5 : 08              >            php         ;save flags
67d6 : bd0302          >            lda abst,x
67d9 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
67dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
67de : 68              >            pla         ;load status
                       >            eor_flag 0
67df : 0908            >            ora #decmode        ;ignore decimal mode bit
67e1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
67e3 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
67e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
67e8 : ca                       dex
67e9 : 10de                     bpl tlsr8
67eb : a205                     ldx #5
67ed :                  tlsr9
                                set_absx zps,$ff
                       >            load_flag $ff
67ed : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
67ef : 48              >            pha         ;use stack to load status
67f0 : b509            >            lda zps,x    ;load to indexed memory
67f2 : 9d0302          >            sta abst,x
67f5 : 28              >            plp
                        
67f6 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
67f9 : 08              >            php         ;save flags
67fa : bd0302          >            lda abst,x
67fd : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
6800 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6802 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6803 : 0908            >            ora #decmode        ;ignore decimal mode bit
6805 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6807 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
680a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
680c : ca                       dex
680d : 10de                     bpl tlsr9
                        
680f : a205                     ldx #5
6811 :                  trol8
                                set_absx zps,0
                       >            load_flag 0
6811 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6813 : 48              >            pha         ;use stack to load status
6814 : b509            >            lda zps,x    ;load to indexed memory
6816 : 9d0302          >            sta abst,x
6819 : 28              >            plp
                        
681a : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
681d : 08              >            php         ;save flags
681e : bd0302          >            lda abst,x
6821 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
6824 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6826 : 68              >            pla         ;load status
                       >            eor_flag 0
6827 : 0908            >            ora #decmode        ;ignore decimal mode bit
6829 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
682b : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
682e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6830 : ca                       dex
6831 : 10de                     bpl trol8
6833 : a205                     ldx #5
6835 :                  trol9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
6835 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6837 : 48              >            pha         ;use stack to load status
6838 : b509            >            lda zps,x    ;load to indexed memory
683a : 9d0302          >            sta abst,x
683d : 28              >            plp
                        
683e : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
6841 : 08              >            php         ;save flags
6842 : bd0302          >            lda abst,x
6845 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
6848 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
684a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
684b : 0908            >            ora #decmode        ;ignore decimal mode bit
684d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
684f : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
6852 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6854 : ca                       dex
6855 : 10de                     bpl trol9
                        
6857 : a205                     ldx #5
6859 :                  trolc8
                                set_absx zps,fc
                       >            load_flag fc
6859 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
685b : 48              >            pha         ;use stack to load status
685c : b509            >            lda zps,x    ;load to indexed memory
685e : 9d0302          >            sta abst,x
6861 : 28              >            plp
                        
6862 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
6865 : 08              >            php         ;save flags
6866 : bd0302          >            lda abst,x
6869 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
686c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
686e : 68              >            pla         ;load status
                       >            eor_flag 0
686f : 0908            >            ora #decmode        ;ignore decimal mode bit
6871 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6873 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
6876 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6878 : ca                       dex
6879 : 10de                     bpl trolc8
687b : a205                     ldx #5
687d :                  trolc9
                                set_absx zps,$ff
                       >            load_flag $ff
687d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
687f : 48              >            pha         ;use stack to load status
6880 : b509            >            lda zps,x    ;load to indexed memory
6882 : 9d0302          >            sta abst,x
6885 : 28              >            plp
                        
6886 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
6889 : 08              >            php         ;save flags
688a : bd0302          >            lda abst,x
688d : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
6890 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6892 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6893 : 0908            >            ora #decmode        ;ignore decimal mode bit
6895 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6897 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
689a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
689c : ca                       dex
689d : 10de                     bpl trolc9
                        
689f : a205                     ldx #5
68a1 :                  tror8
                                set_absx zps,0
                       >            load_flag 0
68a1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
68a3 : 48              >            pha         ;use stack to load status
68a4 : b509            >            lda zps,x    ;load to indexed memory
68a6 : 9d0302          >            sta abst,x
68a9 : 28              >            plp
                        
68aa : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
68ad : 08              >            php         ;save flags
68ae : bd0302          >            lda abst,x
68b1 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
68b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
68b6 : 68              >            pla         ;load status
                       >            eor_flag 0
68b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
68b9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
68bb : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
68be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
68c0 : ca                       dex
68c1 : 10de                     bpl tror8
68c3 : a205                     ldx #5
68c5 :                  tror9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
68c5 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
68c7 : 48              >            pha         ;use stack to load status
68c8 : b509            >            lda zps,x    ;load to indexed memory
68ca : 9d0302          >            sta abst,x
68cd : 28              >            plp
                        
68ce : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
68d1 : 08              >            php         ;save flags
68d2 : bd0302          >            lda abst,x
68d5 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
68d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
68da : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
68db : 0908            >            ora #decmode        ;ignore decimal mode bit
68dd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
68df : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
68e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
68e4 : ca                       dex
68e5 : 10de                     bpl tror9
                        
68e7 : a205                     ldx #5
68e9 :                  trorc8
                                set_absx zps,fc
                       >            load_flag fc
68e9 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
68eb : 48              >            pha         ;use stack to load status
68ec : b509            >            lda zps,x    ;load to indexed memory
68ee : 9d0302          >            sta abst,x
68f1 : 28              >            plp
                        
68f2 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
68f5 : 08              >            php         ;save flags
68f6 : bd0302          >            lda abst,x
68f9 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
68fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
68fe : 68              >            pla         ;load status
                       >            eor_flag 0
68ff : 0908            >            ora #decmode        ;ignore decimal mode bit
6901 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6903 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6906 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6908 : ca                       dex
6909 : 10de                     bpl trorc8
690b : a205                     ldx #5
690d :                  trorc9
                                set_absx zps,$ff
                       >            load_flag $ff
690d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
690f : 48              >            pha         ;use stack to load status
6910 : b509            >            lda zps,x    ;load to indexed memory
6912 : 9d0302          >            sta abst,x
6915 : 28              >            plp
                        
6916 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
6919 : 08              >            php         ;save flags
691a : bd0302          >            lda abst,x
691d : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
6920 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6922 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6923 : 0908            >            ora #decmode        ;ignore decimal mode bit
6925 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
6927 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
692a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
692c : ca                       dex
692d : 10de                     bpl trorc9
                                next_test
692f : ad0002          >            lda test_case   ;previous test
6932 : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6934 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0022 =                 >test_num = test_num + 1
6936 : a922            >            lda #test_num   ;*** next tests' number
6938 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
693b : a200                     ldx #0
693d : a97e                     lda #$7e
693f : 8502                     sta zpt
6941 :                  tinc    
                                set_stat 0
                       >            load_flag 0
6941 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6943 : 48              >            pha         ;use stack to load status
6944 : 28              >            plp
                        
6945 : e602                     inc zpt
                                tst_z rINC,fINC,0
6947 : 08              >            php         ;save flags
6948 : a502            >            lda zpt
694a : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
694d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
694f : 68              >            pla         ;load status
                       >            eor_flag 0
6950 : 0908            >            ora #decmode        ;ignore decimal mode bit
6952 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6954 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6957 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6959 : e8                       inx
695a : e002                     cpx #2
695c : d004                     bne tinc1
695e : a9fe                     lda #$fe
6960 : 8502                     sta zpt
6962 : e005             tinc1   cpx #5
6964 : d0db                     bne tinc
6966 : ca                       dex
6967 : e602                     inc zpt
6969 :                  tdec    
                                set_stat 0
                       >            load_flag 0
6969 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
696b : 48              >            pha         ;use stack to load status
696c : 28              >            plp
                        
696d : c602                     dec zpt
                                tst_z rINC,fINC,0
696f : 08              >            php         ;save flags
6970 : a502            >            lda zpt
6972 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6975 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6977 : 68              >            pla         ;load status
                       >            eor_flag 0
6978 : 0908            >            ora #decmode        ;ignore decimal mode bit
697a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
697c : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
697f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6981 : ca                       dex
6982 : 300a                     bmi tdec1
6984 : e001                     cpx #1
6986 : d0e1                     bne tdec
6988 : a981                     lda #$81
698a : 8502                     sta zpt
698c : d0db                     bne tdec
698e :                  tdec1
698e : a200                     ldx #0
6990 : a97e                     lda #$7e
6992 : 8502                     sta zpt
6994 :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
6994 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6996 : 48              >            pha         ;use stack to load status
6997 : 28              >            plp
                        
6998 : e602                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
699a : 08              >            php         ;save flags
699b : a502            >            lda zpt
699d : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
69a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
69a2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
69a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
69a5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
69a7 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
69aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
69ac : e8                       inx
69ad : e002                     cpx #2
69af : d004                     bne tinc11
69b1 : a9fe                     lda #$fe
69b3 : 8502                     sta zpt
69b5 : e005             tinc11  cpx #5
69b7 : d0db                     bne tinc10
69b9 : ca                       dex
69ba : e602                     inc zpt
69bc :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
69bc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
69be : 48              >            pha         ;use stack to load status
69bf : 28              >            plp
                        
69c0 : c602                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
69c2 : 08              >            php         ;save flags
69c3 : a502            >            lda zpt
69c5 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
69c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
69ca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
69cb : 0908            >            ora #decmode        ;ignore decimal mode bit
69cd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
69cf : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
69d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
69d4 : ca                       dex
69d5 : 300a                     bmi tdec11
69d7 : e001                     cpx #1
69d9 : d0e1                     bne tdec10
69db : a981                     lda #$81
69dd : 8502                     sta zpt
69df : d0db                     bne tdec10
69e1 :                  tdec11
                                next_test
69e1 : ad0002          >            lda test_case   ;previous test
69e4 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
69e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0023 =                 >test_num = test_num + 1
69e8 : a923            >            lda #test_num   ;*** next tests' number
69ea : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
69ed : a200                     ldx #0
69ef : a97e                     lda #$7e
69f1 : 8d0302                   sta abst
69f4 :                  tinc2    
                                set_stat 0
                       >            load_flag 0
69f4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
69f6 : 48              >            pha         ;use stack to load status
69f7 : 28              >            plp
                        
69f8 : ee0302                   inc abst
                                tst_abs rINC,fINC,0
69fb : 08              >            php         ;save flags
69fc : ad0302          >            lda abst
69ff : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6a02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a04 : 68              >            pla         ;load status
                       >            eor_flag 0
6a05 : 0908            >            ora #decmode        ;ignore decimal mode bit
6a07 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6a09 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6a0c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a0e : e8                       inx
6a0f : e002                     cpx #2
6a11 : d005                     bne tinc3
6a13 : a9fe                     lda #$fe
6a15 : 8d0302                   sta abst
6a18 : e005             tinc3   cpx #5
6a1a : d0d8                     bne tinc2
6a1c : ca                       dex
6a1d : ee0302                   inc abst
6a20 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
6a20 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6a22 : 48              >            pha         ;use stack to load status
6a23 : 28              >            plp
                        
6a24 : ce0302                   dec abst
                                tst_abs rINC,fINC,0
6a27 : 08              >            php         ;save flags
6a28 : ad0302          >            lda abst
6a2b : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6a2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a30 : 68              >            pla         ;load status
                       >            eor_flag 0
6a31 : 0908            >            ora #decmode        ;ignore decimal mode bit
6a33 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6a35 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6a38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a3a : ca                       dex
6a3b : 300b                     bmi tdec3
6a3d : e001                     cpx #1
6a3f : d0df                     bne tdec2
6a41 : a981                     lda #$81
6a43 : 8d0302                   sta abst
6a46 : d0d8                     bne tdec2
6a48 :                  tdec3
6a48 : a200                     ldx #0
6a4a : a97e                     lda #$7e
6a4c : 8d0302                   sta abst
6a4f :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
6a4f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6a51 : 48              >            pha         ;use stack to load status
6a52 : 28              >            plp
                        
6a53 : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
6a56 : 08              >            php         ;save flags
6a57 : ad0302          >            lda abst
6a5a : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6a5d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a5f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6a60 : 0908            >            ora #decmode        ;ignore decimal mode bit
6a62 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6a64 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6a67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a69 : e8                       inx
6a6a : e002                     cpx #2
6a6c : d005                     bne tinc13
6a6e : a9fe                     lda #$fe
6a70 : 8d0302                   sta abst
6a73 : e005             tinc13   cpx #5
6a75 : d0d8                     bne tinc12
6a77 : ca                       dex
6a78 : ee0302                   inc abst
6a7b :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
6a7b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6a7d : 48              >            pha         ;use stack to load status
6a7e : 28              >            plp
                        
6a7f : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
6a82 : 08              >            php         ;save flags
6a83 : ad0302          >            lda abst
6a86 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6a89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a8b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6a8c : 0908            >            ora #decmode        ;ignore decimal mode bit
6a8e : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6a90 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6a93 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a95 : ca                       dex
6a96 : 300b                     bmi tdec13
6a98 : e001                     cpx #1
6a9a : d0df                     bne tdec12
6a9c : a981                     lda #$81
6a9e : 8d0302                   sta abst
6aa1 : d0d8                     bne tdec12
6aa3 :                  tdec13
                                next_test
6aa3 : ad0002          >            lda test_case   ;previous test
6aa6 : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6aa8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0024 =                 >test_num = test_num + 1
6aaa : a924            >            lda #test_num   ;*** next tests' number
6aac : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
6aaf : a200                     ldx #0
6ab1 : a97e                     lda #$7e
6ab3 : 9502             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
6ab5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6ab7 : 48              >            pha         ;use stack to load status
6ab8 : 28              >            plp
                        
6ab9 : f602                     inc zpt,x
                                tst_zx rINC,fINC,0
6abb : 08              >            php         ;save flags
6abc : b502            >            lda zpt,x
6abe : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6ac1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6ac3 : 68              >            pla         ;load status
                       >            eor_flag 0
6ac4 : 0908            >            ora #decmode        ;ignore decimal mode bit
6ac6 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6ac8 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6acb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6acd : b502                     lda zpt,x
6acf : e8                       inx
6ad0 : e002                     cpx #2
6ad2 : d002                     bne tinc5
6ad4 : a9fe                     lda #$fe
6ad6 : e005             tinc5   cpx #5
6ad8 : d0d9                     bne tinc4
6ada : ca                       dex
6adb : a902                     lda #2
6add : 9502             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
6adf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6ae1 : 48              >            pha         ;use stack to load status
6ae2 : 28              >            plp
                        
6ae3 : d602                     dec zpt,x
                                tst_zx rINC,fINC,0
6ae5 : 08              >            php         ;save flags
6ae6 : b502            >            lda zpt,x
6ae8 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6aeb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6aed : 68              >            pla         ;load status
                       >            eor_flag 0
6aee : 0908            >            ora #decmode        ;ignore decimal mode bit
6af0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6af2 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6af5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6af7 : b502                     lda zpt,x
6af9 : ca                       dex
6afa : 3008                     bmi tdec5
6afc : e001                     cpx #1
6afe : d0dd                     bne tdec4
6b00 : a981                     lda #$81
6b02 : d0d9                     bne tdec4
6b04 :                  tdec5
6b04 : a200                     ldx #0
6b06 : a97e                     lda #$7e
6b08 : 9502             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
6b0a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6b0c : 48              >            pha         ;use stack to load status
6b0d : 28              >            plp
                        
6b0e : f602                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
6b10 : 08              >            php         ;save flags
6b11 : b502            >            lda zpt,x
6b13 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6b16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6b18 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6b19 : 0908            >            ora #decmode        ;ignore decimal mode bit
6b1b : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6b1d : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6b20 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6b22 : b502                     lda zpt,x
6b24 : e8                       inx
6b25 : e002                     cpx #2
6b27 : d002                     bne tinc15
6b29 : a9fe                     lda #$fe
6b2b : e005             tinc15  cpx #5
6b2d : d0d9                     bne tinc14
6b2f : ca                       dex
6b30 : a902                     lda #2
6b32 : 9502             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
6b34 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6b36 : 48              >            pha         ;use stack to load status
6b37 : 28              >            plp
                        
6b38 : d602                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
6b3a : 08              >            php         ;save flags
6b3b : b502            >            lda zpt,x
6b3d : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6b40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6b42 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6b43 : 0908            >            ora #decmode        ;ignore decimal mode bit
6b45 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6b47 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6b4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6b4c : b502                     lda zpt,x
6b4e : ca                       dex
6b4f : 3008                     bmi tdec15
6b51 : e001                     cpx #1
6b53 : d0dd                     bne tdec14
6b55 : a981                     lda #$81
6b57 : d0d9                     bne tdec14
6b59 :                  tdec15
                                next_test
6b59 : ad0002          >            lda test_case   ;previous test
6b5c : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6b5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0025 =                 >test_num = test_num + 1
6b60 : a925            >            lda #test_num   ;*** next tests' number
6b62 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
6b65 : a200                     ldx #0
6b67 : a97e                     lda #$7e
6b69 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
6b6c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6b6e : 48              >            pha         ;use stack to load status
6b6f : 28              >            plp
                        
6b70 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
6b73 : 08              >            php         ;save flags
6b74 : bd0302          >            lda abst,x
6b77 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6b7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6b7c : 68              >            pla         ;load status
                       >            eor_flag 0
6b7d : 0908            >            ora #decmode        ;ignore decimal mode bit
6b7f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6b81 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6b84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6b86 : bd0302                   lda abst,x
6b89 : e8                       inx
6b8a : e002                     cpx #2
6b8c : d002                     bne tinc7
6b8e : a9fe                     lda #$fe
6b90 : e005             tinc7   cpx #5
6b92 : d0d5                     bne tinc6
6b94 : ca                       dex
6b95 : a902                     lda #2
6b97 : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
6b9a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6b9c : 48              >            pha         ;use stack to load status
6b9d : 28              >            plp
                        
6b9e : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
6ba1 : 08              >            php         ;save flags
6ba2 : bd0302          >            lda abst,x
6ba5 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6ba8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6baa : 68              >            pla         ;load status
                       >            eor_flag 0
6bab : 0908            >            ora #decmode        ;ignore decimal mode bit
6bad : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6baf : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6bb2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6bb4 : bd0302                   lda abst,x
6bb7 : ca                       dex
6bb8 : 3008                     bmi tdec7
6bba : e001                     cpx #1
6bbc : d0d9                     bne tdec6
6bbe : a981                     lda #$81
6bc0 : d0d5                     bne tdec6
6bc2 :                  tdec7
6bc2 : a200                     ldx #0
6bc4 : a97e                     lda #$7e
6bc6 : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
6bc9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6bcb : 48              >            pha         ;use stack to load status
6bcc : 28              >            plp
                        
6bcd : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
6bd0 : 08              >            php         ;save flags
6bd1 : bd0302          >            lda abst,x
6bd4 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6bd7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6bd9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6bda : 0908            >            ora #decmode        ;ignore decimal mode bit
6bdc : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6bde : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6be1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6be3 : bd0302                   lda abst,x
6be6 : e8                       inx
6be7 : e002                     cpx #2
6be9 : d002                     bne tinc17
6beb : a9fe                     lda #$fe
6bed : e005             tinc17  cpx #5
6bef : d0d5                     bne tinc16
6bf1 : ca                       dex
6bf2 : a902                     lda #2
6bf4 : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
6bf7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6bf9 : 48              >            pha         ;use stack to load status
6bfa : 28              >            plp
                        
6bfb : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
6bfe : 08              >            php         ;save flags
6bff : bd0302          >            lda abst,x
6c02 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
6c05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c07 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6c08 : 0908            >            ora #decmode        ;ignore decimal mode bit
6c0a : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6c0c : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
6c0f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c11 : bd0302                   lda abst,x
6c14 : ca                       dex
6c15 : 3008                     bmi tdec17
6c17 : e001                     cpx #1
6c19 : d0d9                     bne tdec16
6c1b : a981                     lda #$81
6c1d : d0d5                     bne tdec16
6c1f :                  tdec17
                                next_test
6c1f : ad0002          >            lda test_case   ;previous test
6c22 : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6c24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0026 =                 >test_num = test_num + 1
6c26 : a926            >            lda #test_num   ;*** next tests' number
6c28 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
6c2b : a203                     ldx #3          ;immediate
6c2d : b514             tand    lda zpAN,x
6c2f : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
6c32 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6c34 : 48              >            pha         ;use stack to load status
6c35 : bd6b02          >            lda absANa,x    ;precharge accu
6c38 : 28              >            plp
                        
6c39 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
6c3c : 08              >            php         ;save flags
6c3d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c42 : 68              >            pla         ;load status
                       >            eor_flag 0
6c43 : 0908            >            ora #decmode        ;ignore decimal mode bit
6c45 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6c47 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c4c : ca                       dex
6c4d : 10de                     bpl tand
6c4f : a203                     ldx #3
6c51 : b514             tand1   lda zpAN,x
6c53 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
6c56 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6c58 : 48              >            pha         ;use stack to load status
6c59 : bd6b02          >            lda absANa,x    ;precharge accu
6c5c : 28              >            plp
                        
6c5d : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
6c60 : 08              >            php         ;save flags
6c61 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c66 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6c67 : 0908            >            ora #decmode        ;ignore decimal mode bit
6c69 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6c6b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c70 : ca                       dex
6c71 : 10de                     bpl tand1
                            
6c73 : a203                     ldx #3      ;zp
6c75 : b514             tand2   lda zpAN,x
6c77 : 8502                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
6c79 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6c7b : 48              >            pha         ;use stack to load status
6c7c : bd6b02          >            lda absANa,x    ;precharge accu
6c7f : 28              >            plp
                        
6c80 : 2502                     and zpt
                                tst_ax  absrlo,absflo,0
6c82 : 08              >            php         ;save flags
6c83 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c88 : 68              >            pla         ;load status
                       >            eor_flag 0
6c89 : 0908            >            ora #decmode        ;ignore decimal mode bit
6c8b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6c8d : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c92 : ca                       dex
6c93 : 10e0                     bpl tand2
6c95 : a203                     ldx #3
6c97 : b514             tand3   lda zpAN,x
6c99 : 8502                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
6c9b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6c9d : 48              >            pha         ;use stack to load status
6c9e : bd6b02          >            lda absANa,x    ;precharge accu
6ca1 : 28              >            plp
                        
6ca2 : 2502                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
6ca4 : 08              >            php         ;save flags
6ca5 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6ca8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6caa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6cab : 0908            >            ora #decmode        ;ignore decimal mode bit
6cad : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6caf : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6cb2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6cb4 : ca                       dex
6cb5 : 10e0                     bpl tand3
                        
6cb7 : a203                     ldx #3      ;abs
6cb9 : b514             tand4   lda zpAN,x
6cbb : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
6cbe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6cc0 : 48              >            pha         ;use stack to load status
6cc1 : bd6b02          >            lda absANa,x    ;precharge accu
6cc4 : 28              >            plp
                        
6cc5 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
6cc8 : 08              >            php         ;save flags
6cc9 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6ccc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6cce : 68              >            pla         ;load status
                       >            eor_flag 0
6ccf : 0908            >            ora #decmode        ;ignore decimal mode bit
6cd1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6cd3 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6cd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6cd8 : ca                       dex
6cd9 : 10de                     bpl tand4
6cdb : a203                     ldx #3
6cdd : b514             tand5   lda zpAN,x
6cdf : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
6ce2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6ce4 : 48              >            pha         ;use stack to load status
6ce5 : bd6b02          >            lda absANa,x    ;precharge accu
6ce8 : 28              >            plp
                        
6ce9 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
6cec : 08              >            php         ;save flags
6ced : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6cf0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6cf2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6cf3 : 0908            >            ora #decmode        ;ignore decimal mode bit
6cf5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6cf7 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6cfa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6cfc : ca                       dex
6cfd : 1002                     bpl tand6
                        
6cff : a203                     ldx #3      ;zp,x
6d01 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
6d01 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6d03 : 48              >            pha         ;use stack to load status
6d04 : bd6b02          >            lda absANa,x    ;precharge accu
6d07 : 28              >            plp
                        
6d08 : 3514                     and zpAN,x
                                tst_ax  absrlo,absflo,0
6d0a : 08              >            php         ;save flags
6d0b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6d0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d10 : 68              >            pla         ;load status
                       >            eor_flag 0
6d11 : 0908            >            ora #decmode        ;ignore decimal mode bit
6d13 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6d15 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d1a : ca                       dex
6d1b : 10e4                     bpl tand6
6d1d : a203                     ldx #3
6d1f :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
6d1f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6d21 : 48              >            pha         ;use stack to load status
6d22 : bd6b02          >            lda absANa,x    ;precharge accu
6d25 : 28              >            plp
                        
6d26 : 3514                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
6d28 : 08              >            php         ;save flags
6d29 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6d2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d2e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6d2f : 0908            >            ora #decmode        ;ignore decimal mode bit
6d31 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6d33 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d38 : ca                       dex
6d39 : 10e4                     bpl tand7
                        
6d3b : a203                     ldx #3      ;abs,x
6d3d :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
6d3d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6d3f : 48              >            pha         ;use stack to load status
6d40 : bd6b02          >            lda absANa,x    ;precharge accu
6d43 : 28              >            plp
                        
6d44 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
6d47 : 08              >            php         ;save flags
6d48 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6d4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d4d : 68              >            pla         ;load status
                       >            eor_flag 0
6d4e : 0908            >            ora #decmode        ;ignore decimal mode bit
6d50 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6d52 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d55 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d57 : ca                       dex
6d58 : 10e3                     bpl tand8
6d5a : a203                     ldx #3
6d5c :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
6d5c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6d5e : 48              >            pha         ;use stack to load status
6d5f : bd6b02          >            lda absANa,x    ;precharge accu
6d62 : 28              >            plp
                        
6d63 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
6d66 : 08              >            php         ;save flags
6d67 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6d6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d6c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6d6d : 0908            >            ora #decmode        ;ignore decimal mode bit
6d6f : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6d71 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d76 : ca                       dex
6d77 : 10e3                     bpl tand9
                        
6d79 : a003                     ldy #3      ;abs,y
6d7b :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
6d7b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6d7d : 48              >            pha         ;use stack to load status
6d7e : b96b02          >            lda absANa,y    ;precharge accu
6d81 : 28              >            plp
                        
6d82 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
6d85 : 08              >            php         ;save flags
6d86 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6d89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d8b : 68              >            pla         ;load status
                       >            eor_flag 0
6d8c : 0908            >            ora #decmode        ;ignore decimal mode bit
6d8e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6d90 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6d93 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d95 : 88                       dey
6d96 : 10e3                     bpl tand10
6d98 : a003                     ldy #3
6d9a :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
6d9a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6d9c : 48              >            pha         ;use stack to load status
6d9d : b96b02          >            lda absANa,y    ;precharge accu
6da0 : 28              >            plp
                        
6da1 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
6da4 : 08              >            php         ;save flags
6da5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6da8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6daa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6dab : 0908            >            ora #decmode        ;ignore decimal mode bit
6dad : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6daf : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6db2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6db4 : 88                       dey
6db5 : 10e3                     bpl tand11
                        
6db7 : a206                     ldx #6      ;(zp,x)
6db9 : a003                     ldy #3
6dbb :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
6dbb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6dbd : 48              >            pha         ;use stack to load status
6dbe : b96b02          >            lda absANa,y    ;precharge accu
6dc1 : 28              >            plp
                        
6dc2 : 2132                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
6dc4 : 08              >            php         ;save flags
6dc5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6dc8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6dca : 68              >            pla         ;load status
                       >            eor_flag 0
6dcb : 0908            >            ora #decmode        ;ignore decimal mode bit
6dcd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6dcf : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6dd2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6dd4 : ca                       dex
6dd5 : ca                       dex
6dd6 : 88                       dey
6dd7 : 10e2                     bpl tand12
6dd9 : a206                     ldx #6
6ddb : a003                     ldy #3
6ddd :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
6ddd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6ddf : 48              >            pha         ;use stack to load status
6de0 : b96b02          >            lda absANa,y    ;precharge accu
6de3 : 28              >            plp
                        
6de4 : 2132                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
6de6 : 08              >            php         ;save flags
6de7 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6dea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6dec : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6ded : 0908            >            ora #decmode        ;ignore decimal mode bit
6def : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6df1 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6df4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6df6 : ca                       dex
6df7 : ca                       dex
6df8 : 88                       dey
6df9 : 10e2                     bpl tand13
                        
6dfb : a003                     ldy #3      ;(zp),y
6dfd :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
6dfd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6dff : 48              >            pha         ;use stack to load status
6e00 : b96b02          >            lda absANa,y    ;precharge accu
6e03 : 28              >            plp
                        
6e04 : 3132                     and (indAN),y
                                tst_ay  absrlo,absflo,0
6e06 : 08              >            php         ;save flags
6e07 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6e0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e0c : 68              >            pla         ;load status
                       >            eor_flag 0
6e0d : 0908            >            ora #decmode        ;ignore decimal mode bit
6e0f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6e11 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6e14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e16 : 88                       dey
6e17 : 10e4                     bpl tand14
6e19 : a003                     ldy #3
6e1b :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
6e1b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6e1d : 48              >            pha         ;use stack to load status
6e1e : b96b02          >            lda absANa,y    ;precharge accu
6e21 : 28              >            plp
                        
6e22 : 3132                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
6e24 : 08              >            php         ;save flags
6e25 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6e28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e2a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6e2b : 0908            >            ora #decmode        ;ignore decimal mode bit
6e2d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6e2f : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6e32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e34 : 88                       dey
6e35 : 10e4                     bpl tand15
                                next_test
6e37 : ad0002          >            lda test_case   ;previous test
6e3a : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6e3c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0027 =                 >test_num = test_num + 1
6e3e : a927            >            lda #test_num   ;*** next tests' number
6e40 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
6e43 : a203                     ldx #3          ;immediate - self modifying code
6e45 : b518             teor    lda zpEO,x
6e47 : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
6e4a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6e4c : 48              >            pha         ;use stack to load status
6e4d : bd6f02          >            lda absEOa,x    ;precharge accu
6e50 : 28              >            plp
                        
6e51 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
6e54 : 08              >            php         ;save flags
6e55 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6e58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e5a : 68              >            pla         ;load status
                       >            eor_flag 0
6e5b : 0908            >            ora #decmode        ;ignore decimal mode bit
6e5d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6e5f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6e62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e64 : ca                       dex
6e65 : 10de                     bpl teor
6e67 : a203                     ldx #3
6e69 : b518             teor1   lda zpEO,x
6e6b : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6e6e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6e70 : 48              >            pha         ;use stack to load status
6e71 : bd6f02          >            lda absEOa,x    ;precharge accu
6e74 : 28              >            plp
                        
6e75 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
6e78 : 08              >            php         ;save flags
6e79 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6e7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e7e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6e7f : 0908            >            ora #decmode        ;ignore decimal mode bit
6e81 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6e83 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6e86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e88 : ca                       dex
6e89 : 10de                     bpl teor1
                            
6e8b : a203                     ldx #3      ;zp
6e8d : b518             teor2    lda zpEO,x
6e8f : 8502                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
6e91 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6e93 : 48              >            pha         ;use stack to load status
6e94 : bd6f02          >            lda absEOa,x    ;precharge accu
6e97 : 28              >            plp
                        
6e98 : 4502                     eor zpt
                                tst_ax  absrlo,absflo,0
6e9a : 08              >            php         ;save flags
6e9b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6e9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6ea0 : 68              >            pla         ;load status
                       >            eor_flag 0
6ea1 : 0908            >            ora #decmode        ;ignore decimal mode bit
6ea3 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6ea5 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6ea8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6eaa : ca                       dex
6eab : 10e0                     bpl teor2
6ead : a203                     ldx #3
6eaf : b518             teor3   lda zpEO,x
6eb1 : 8502                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6eb3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6eb5 : 48              >            pha         ;use stack to load status
6eb6 : bd6f02          >            lda absEOa,x    ;precharge accu
6eb9 : 28              >            plp
                        
6eba : 4502                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
6ebc : 08              >            php         ;save flags
6ebd : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6ec0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6ec2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6ec3 : 0908            >            ora #decmode        ;ignore decimal mode bit
6ec5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6ec7 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6eca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6ecc : ca                       dex
6ecd : 10e0                     bpl teor3
                        
6ecf : a203                     ldx #3      ;abs
6ed1 : b518             teor4   lda zpEO,x
6ed3 : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
6ed6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6ed8 : 48              >            pha         ;use stack to load status
6ed9 : bd6f02          >            lda absEOa,x    ;precharge accu
6edc : 28              >            plp
                        
6edd : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
6ee0 : 08              >            php         ;save flags
6ee1 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6ee4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6ee6 : 68              >            pla         ;load status
                       >            eor_flag 0
6ee7 : 0908            >            ora #decmode        ;ignore decimal mode bit
6ee9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6eeb : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6eee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6ef0 : ca                       dex
6ef1 : 10de                     bpl teor4
6ef3 : a203                     ldx #3
6ef5 : b518             teor5   lda zpEO,x
6ef7 : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6efa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6efc : 48              >            pha         ;use stack to load status
6efd : bd6f02          >            lda absEOa,x    ;precharge accu
6f00 : 28              >            plp
                        
6f01 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
6f04 : 08              >            php         ;save flags
6f05 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6f08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6f0a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6f0b : 0908            >            ora #decmode        ;ignore decimal mode bit
6f0d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6f0f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6f12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6f14 : ca                       dex
6f15 : 1002                     bpl teor6
                        
6f17 : a203                     ldx #3      ;zp,x
6f19 :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
6f19 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6f1b : 48              >            pha         ;use stack to load status
6f1c : bd6f02          >            lda absEOa,x    ;precharge accu
6f1f : 28              >            plp
                        
6f20 : 5518                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
6f22 : 08              >            php         ;save flags
6f23 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6f26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6f28 : 68              >            pla         ;load status
                       >            eor_flag 0
6f29 : 0908            >            ora #decmode        ;ignore decimal mode bit
6f2b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6f2d : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6f30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6f32 : ca                       dex
6f33 : 10e4                     bpl teor6
6f35 : a203                     ldx #3
6f37 :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6f37 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6f39 : 48              >            pha         ;use stack to load status
6f3a : bd6f02          >            lda absEOa,x    ;precharge accu
6f3d : 28              >            plp
                        
6f3e : 5518                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
6f40 : 08              >            php         ;save flags
6f41 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6f44 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6f46 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6f47 : 0908            >            ora #decmode        ;ignore decimal mode bit
6f49 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6f4b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6f4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6f50 : ca                       dex
6f51 : 10e4                     bpl teor7
                        
6f53 : a203                     ldx #3      ;abs,x
6f55 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
6f55 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6f57 : 48              >            pha         ;use stack to load status
6f58 : bd6f02          >            lda absEOa,x    ;precharge accu
6f5b : 28              >            plp
                        
6f5c : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
6f5f : 08              >            php         ;save flags
6f60 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6f63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6f65 : 68              >            pla         ;load status
                       >            eor_flag 0
6f66 : 0908            >            ora #decmode        ;ignore decimal mode bit
6f68 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6f6a : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6f6d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6f6f : ca                       dex
6f70 : 10e3                     bpl teor8
6f72 : a203                     ldx #3
6f74 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6f74 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6f76 : 48              >            pha         ;use stack to load status
6f77 : bd6f02          >            lda absEOa,x    ;precharge accu
6f7a : 28              >            plp
                        
6f7b : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
6f7e : 08              >            php         ;save flags
6f7f : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
6f82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6f84 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6f85 : 0908            >            ora #decmode        ;ignore decimal mode bit
6f87 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6f89 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6f8c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6f8e : ca                       dex
6f8f : 10e3                     bpl teor9
                        
6f91 : a003                     ldy #3      ;abs,y
6f93 :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
6f93 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6f95 : 48              >            pha         ;use stack to load status
6f96 : b96f02          >            lda absEOa,y    ;precharge accu
6f99 : 28              >            plp
                        
6f9a : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
6f9d : 08              >            php         ;save flags
6f9e : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6fa1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6fa3 : 68              >            pla         ;load status
                       >            eor_flag 0
6fa4 : 0908            >            ora #decmode        ;ignore decimal mode bit
6fa6 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6fa8 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6fab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6fad : 88                       dey
6fae : 10e3                     bpl teor10
6fb0 : a003                     ldy #3
6fb2 :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
6fb2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6fb4 : 48              >            pha         ;use stack to load status
6fb5 : b96f02          >            lda absEOa,y    ;precharge accu
6fb8 : 28              >            plp
                        
6fb9 : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
6fbc : 08              >            php         ;save flags
6fbd : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6fc0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6fc2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6fc3 : 0908            >            ora #decmode        ;ignore decimal mode bit
6fc5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
6fc7 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6fca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6fcc : 88                       dey
6fcd : 10e3                     bpl teor11
                        
6fcf : a206                     ldx #6      ;(zp,x)
6fd1 : a003                     ldy #3
6fd3 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
6fd3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6fd5 : 48              >            pha         ;use stack to load status
6fd6 : b96f02          >            lda absEOa,y    ;precharge accu
6fd9 : 28              >            plp
                        
6fda : 413a                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
6fdc : 08              >            php         ;save flags
6fdd : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6fe0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6fe2 : 68              >            pla         ;load status
                       >            eor_flag 0
6fe3 : 0908            >            ora #decmode        ;ignore decimal mode bit
6fe5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
6fe7 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
6fea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6fec : ca                       dex
6fed : ca                       dex
6fee : 88                       dey
6fef : 10e2                     bpl teor12
6ff1 : a206                     ldx #6
6ff3 : a003                     ldy #3
6ff5 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
6ff5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6ff7 : 48              >            pha         ;use stack to load status
6ff8 : b96f02          >            lda absEOa,y    ;precharge accu
6ffb : 28              >            plp
                        
6ffc : 413a                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
6ffe : 08              >            php         ;save flags
6fff : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
7002 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
7004 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
7005 : 0908            >            ora #decmode        ;ignore decimal mode bit
7007 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
7009 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
700c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
700e : ca                       dex
700f : ca                       dex
7010 : 88                       dey
7011 : 10e2                     bpl teor13
                        
7013 : a003                     ldy #3      ;(zp),y
7015 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
7015 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
7017 : 48              >            pha         ;use stack to load status
7018 : b96f02          >            lda absEOa,y    ;precharge accu
701b : 28              >            plp
                        
701c : 513a                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
701e : 08              >            php         ;save flags
701f : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
7022 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
7024 : 68              >            pla         ;load status
                       >            eor_flag 0
7025 : 0908            >            ora #decmode        ;ignore decimal mode bit
7027 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
7029 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
702c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
702e : 88                       dey
702f : 10e4                     bpl teor14
7031 : a003                     ldy #3
7033 :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
7033 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7035 : 48              >            pha         ;use stack to load status
7036 : b96f02          >            lda absEOa,y    ;precharge accu
7039 : 28              >            plp
                        
703a : 513a                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
703c : 08              >            php         ;save flags
703d : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
7040 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
7042 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
7043 : 0908            >            ora #decmode        ;ignore decimal mode bit
7045 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
7047 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
704a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
704c : 88                       dey
704d : 10e4                     bpl teor15
                                next_test
704f : ad0002          >            lda test_case   ;previous test
7052 : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
7054 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0028 =                 >test_num = test_num + 1
7056 : a928            >            lda #test_num   ;*** next tests' number
7058 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
705b : a203                     ldx #3          ;immediate - self modifying code
705d : b510             tora    lda zpOR,x
705f : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
7062 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
7064 : 48              >            pha         ;use stack to load status
7065 : bd6702          >            lda absORa,x    ;precharge accu
7068 : 28              >            plp
                        
7069 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
706c : 08              >            php         ;save flags
706d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
7070 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
7072 : 68              >            pla         ;load status
                       >            eor_flag 0
7073 : 0908            >            ora #decmode        ;ignore decimal mode bit
7075 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
7077 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
707a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
707c : ca                       dex
707d : 10de                     bpl tora
707f : a203                     ldx #3
7081 : b510             tora1   lda zpOR,x
7083 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
7086 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7088 : 48              >            pha         ;use stack to load status
7089 : bd6702          >            lda absORa,x    ;precharge accu
708c : 28              >            plp
                        
708d : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
7090 : 08              >            php         ;save flags
7091 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
7094 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
7096 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
7097 : 0908            >            ora #decmode        ;ignore decimal mode bit
7099 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
709b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
709e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
70a0 : ca                       dex
70a1 : 10de                     bpl tora1
                            
70a3 : a203                     ldx #3      ;zp
70a5 : b510             tora2   lda zpOR,x
70a7 : 8502                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
70a9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
70ab : 48              >            pha         ;use stack to load status
70ac : bd6702          >            lda absORa,x    ;precharge accu
70af : 28              >            plp
                        
70b0 : 0502                     ora zpt
                                tst_ax  absrlo,absflo,0
70b2 : 08              >            php         ;save flags
70b3 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
70b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
70b8 : 68              >            pla         ;load status
                       >            eor_flag 0
70b9 : 0908            >            ora #decmode        ;ignore decimal mode bit
70bb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
70bd : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
70c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
70c2 : ca                       dex
70c3 : 10e0                     bpl tora2
70c5 : a203                     ldx #3
70c7 : b510             tora3   lda zpOR,x
70c9 : 8502                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
70cb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
70cd : 48              >            pha         ;use stack to load status
70ce : bd6702          >            lda absORa,x    ;precharge accu
70d1 : 28              >            plp
                        
70d2 : 0502                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
70d4 : 08              >            php         ;save flags
70d5 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
70d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
70da : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
70db : 0908            >            ora #decmode        ;ignore decimal mode bit
70dd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
70df : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
70e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
70e4 : ca                       dex
70e5 : 10e0                     bpl tora3
                        
70e7 : a203                     ldx #3      ;abs
70e9 : b510             tora4   lda zpOR,x
70eb : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
70ee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
70f0 : 48              >            pha         ;use stack to load status
70f1 : bd6702          >            lda absORa,x    ;precharge accu
70f4 : 28              >            plp
                        
70f5 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
70f8 : 08              >            php         ;save flags
70f9 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
70fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
70fe : 68              >            pla         ;load status
                       >            eor_flag 0
70ff : 0908            >            ora #decmode        ;ignore decimal mode bit
7101 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
7103 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
7106 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
7108 : ca                       dex
7109 : 10de                     bpl tora4
710b : a203                     ldx #3
710d : b510             tora5   lda zpOR,x
710f : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
7112 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7114 : 48              >            pha         ;use stack to load status
7115 : bd6702          >            lda absORa,x    ;precharge accu
7118 : 28              >            plp
                        
7119 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
711c : 08              >            php         ;save flags
711d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
7120 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
7122 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
7123 : 0908            >            ora #decmode        ;ignore decimal mode bit
7125 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
7127 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
712a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
712c : ca                       dex
712d : 1002                     bpl tora6
                        
712f : a203                     ldx #3      ;zp,x
7131 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
7131 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
7133 : 48              >            pha         ;use stack to load status
7134 : bd6702          >            lda absORa,x    ;precharge accu
7137 : 28              >            plp
                        
7138 : 1510                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
713a : 08              >            php         ;save flags
713b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
713e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
7140 : 68              >            pla         ;load status
                       >            eor_flag 0
7141 : 0908            >            ora #decmode        ;ignore decimal mode bit
7143 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
7145 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
7148 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
714a : ca                       dex
714b : 10e4                     bpl tora6
714d : a203                     ldx #3
714f :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
714f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7151 : 48              >            pha         ;use stack to load status
7152 : bd6702          >            lda absORa,x    ;precharge accu
7155 : 28              >            plp
                        
7156 : 1510                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
7158 : 08              >            php         ;save flags
7159 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
715c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
715e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
715f : 0908            >            ora #decmode        ;ignore decimal mode bit
7161 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
7163 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
7166 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
7168 : ca                       dex
7169 : 10e4                     bpl tora7
                        
716b : a203                     ldx #3      ;abs,x
716d :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
716d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
716f : 48              >            pha         ;use stack to load status
7170 : bd6702          >            lda absORa,x    ;precharge accu
7173 : 28              >            plp
                        
7174 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
7177 : 08              >            php         ;save flags
7178 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
717b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
717d : 68              >            pla         ;load status
                       >            eor_flag 0
717e : 0908            >            ora #decmode        ;ignore decimal mode bit
7180 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
7182 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
7185 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
7187 : ca                       dex
7188 : 10e3                     bpl tora8
718a : a203                     ldx #3
718c :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
718c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
718e : 48              >            pha         ;use stack to load status
718f : bd6702          >            lda absORa,x    ;precharge accu
7192 : 28              >            plp
                        
7193 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
7196 : 08              >            php         ;save flags
7197 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
719a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
719c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
719d : 0908            >            ora #decmode        ;ignore decimal mode bit
719f : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
71a1 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
71a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
71a6 : ca                       dex
71a7 : 10e3                     bpl tora9
                        
71a9 : a003                     ldy #3      ;abs,y
71ab :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
71ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
71ad : 48              >            pha         ;use stack to load status
71ae : b96702          >            lda absORa,y    ;precharge accu
71b1 : 28              >            plp
                        
71b2 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
71b5 : 08              >            php         ;save flags
71b6 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
71b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
71bb : 68              >            pla         ;load status
                       >            eor_flag 0
71bc : 0908            >            ora #decmode        ;ignore decimal mode bit
71be : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
71c0 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
71c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
71c5 : 88                       dey
71c6 : 10e3                     bpl tora10
71c8 : a003                     ldy #3
71ca :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
71ca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
71cc : 48              >            pha         ;use stack to load status
71cd : b96702          >            lda absORa,y    ;precharge accu
71d0 : 28              >            plp
                        
71d1 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
71d4 : 08              >            php         ;save flags
71d5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
71d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
71da : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
71db : 0908            >            ora #decmode        ;ignore decimal mode bit
71dd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
71df : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
71e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
71e4 : 88                       dey
71e5 : 10e3                     bpl tora11
                        
71e7 : a206                     ldx #6      ;(zp,x)
71e9 : a003                     ldy #3
71eb :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
71eb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
71ed : 48              >            pha         ;use stack to load status
71ee : b96702          >            lda absORa,y    ;precharge accu
71f1 : 28              >            plp
                        
71f2 : 0142                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
71f4 : 08              >            php         ;save flags
71f5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
71f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
71fa : 68              >            pla         ;load status
                       >            eor_flag 0
71fb : 0908            >            ora #decmode        ;ignore decimal mode bit
71fd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
71ff : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
7202 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
7204 : ca                       dex
7205 : ca                       dex
7206 : 88                       dey
7207 : 10e2                     bpl tora12
7209 : a206                     ldx #6
720b : a003                     ldy #3
720d :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
720d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
720f : 48              >            pha         ;use stack to load status
7210 : b96702          >            lda absORa,y    ;precharge accu
7213 : 28              >            plp
                        
7214 : 0142                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
7216 : 08              >            php         ;save flags
7217 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
721a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
721c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
721d : 0908            >            ora #decmode        ;ignore decimal mode bit
721f : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
7221 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
7224 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
7226 : ca                       dex
7227 : ca                       dex
7228 : 88                       dey
7229 : 10e2                     bpl tora13
                        
722b : a003                     ldy #3      ;(zp),y
722d :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
722d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
722f : 48              >            pha         ;use stack to load status
7230 : b96702          >            lda absORa,y    ;precharge accu
7233 : 28              >            plp
                        
7234 : 1142                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
7236 : 08              >            php         ;save flags
7237 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
723a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
723c : 68              >            pla         ;load status
                       >            eor_flag 0
723d : 0908            >            ora #decmode        ;ignore decimal mode bit
723f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
7241 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
7244 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
7246 : 88                       dey
7247 : 10e4                     bpl tora14
7249 : a003                     ldy #3
724b :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
724b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
724d : 48              >            pha         ;use stack to load status
724e : b96702          >            lda absORa,y    ;precharge accu
7251 : 28              >            plp
                        
7252 : 1142                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
7254 : 08              >            php         ;save flags
7255 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
7258 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
725a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
725b : 0908            >            ora #decmode        ;ignore decimal mode bit
725d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
725f : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
7262 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
7264 : 88                       dey
7265 : 10e4                     bpl tora15
                            if I_flag = 3
7267 : 58                       cli
                            endif                
                                next_test
7268 : ad0002          >            lda test_case   ;previous test
726b : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
726d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0029 =                 >test_num = test_num + 1
726f : a929            >            lda #test_num   ;*** next tests' number
7271 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
7274 : d8                       cld
7275 : a204                     ldx #ad2        ;for indexed test
7277 : a0ff                     ldy #$ff        ;max range
7279 : a900                     lda #0          ;start with adding zeroes & no carry
727b : 8502                     sta adfc        ;carry in - for diag
727d : 8503                     sta ad1         ;operand 1 - accumulator
727f : 8504                     sta ad2         ;operand 2 - memory or immediate
7281 : 8d0302                   sta ada2        ;non zp
7284 : 8505                     sta adrl        ;expected result bits 0-7
7286 : 8506                     sta adrh        ;expected result bit 8 (carry out)
7288 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
728a : 8508                     sta sb2
728c : 8d0402                   sta sba2        ;non zp
728f : a902                     lda #2          ;expected Z-flag
7291 : 8507                     sta adrf
7293 : 18               tadd    clc             ;test with carry clear
7294 : 20df72                   jsr chkadd
7297 : e602                     inc adfc        ;now with carry
7299 : e605                     inc adrl        ;result +1
729b : 08                       php             ;save N & Z from low result
729c : 08                       php
729d : 68                       pla             ;accu holds expected flags
729e : 2982                     and #$82        ;mask N & Z
72a0 : 28                       plp
72a1 : d002                     bne tadd1
72a3 : e606                     inc adrh        ;result bit 8 - carry
72a5 : 0506             tadd1   ora adrh        ;merge C to expected flags
72a7 : 8507                     sta adrf        ;save expected flags except overflow
72a9 : 38                       sec             ;test with carry set
72aa : 20df72                   jsr chkadd
72ad : c602                     dec adfc        ;same for operand +1 but no carry
72af : e603                     inc ad1
72b1 : d0e0                     bne tadd        ;iterate op1
72b3 : a900                     lda #0          ;preset result to op2 when op1 = 0
72b5 : 8506                     sta adrh
72b7 : ee0302                   inc ada2
72ba : e604                     inc ad2
72bc : 08                       php             ;save NZ as operand 2 becomes the new result
72bd : 68                       pla
72be : 2982                     and #$82        ;mask N00000Z0
72c0 : 8507                     sta adrf        ;no need to check carry as we are adding to 0
72c2 : c608                     dec sb2         ;complement subtract operand 2
72c4 : ce0402                   dec sba2
72c7 : a504                     lda ad2         
72c9 : 8505                     sta adrl
72cb : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                                sed 
                                ldx #ad2        ;for indexed test
                                ldy #$ff        ;max range
                                lda #$99        ;start with adding 99 to 99 with carry
                                sta ad1         ;operand 1 - accumulator
                                sta ad2         ;operand 2 - memory or immediate
                                sta ada2        ;non zp
                                sta adrl        ;expected result bits 0-7
                                lda #1          ;set carry in & out
                                sta adfc        ;carry in - for diag
                                sta adrh        ;expected result bit 8 (carry out)
                                lda #0          ;complemented operand 2 for subtract
                                sta sb2
                                sta sba2        ;non zp
                        tdad    sec             ;test with carry set
                                jsr chkdad
                                dec adfc        ;now with carry clear
                                lda adrl        ;decimal adjust result
                                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
                                dec adrh
                                lda #$99
                                sta adrl
                                bne tdad3
                        tdad1   and #$f         ;lower nibble mask
                                bne tdad2       ;no decimal adjust needed
                                dec adrl        ;decimal adjust (?0-6)
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                        tdad2   dec adrl        ;result -1
                        tdad3   clc             ;test with carry clear
                                jsr chkdad
                                inc adfc        ;same for operand -1 but with carry
                                lda ad1         ;decimal adjust operand 1
                                beq tdad5       ;iterate operand 2
                                and #$f         ;lower nibble mask
                                bne tdad4       ;skip decimal adjust
                                dec ad1         ;decimal adjust (?0-6)
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                        tdad4   dec ad1         ;operand 1 -1
                                jmp tdad        ;iterate op1
                        
                        tdad5   lda #$99        ;precharge op1 max
                                sta ad1
                                lda ad2         ;decimal adjust operand 2
                                beq tdad7       ;end of iteration
                                and #$f         ;lower nibble mask
                                bne tdad6       ;skip decimal adjust
                                dec ad2         ;decimal adjust (?0-6)
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                inc sb2         ;complemented decimal adjust for subtract (?9+6)
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                        tdad6   dec ad2         ;operand 2 -1
                                inc sb2         ;complemented operand for subtract
                                lda sb2
                                sta sba2        ;copy as non zp operand
                                lda ad2
                                sta ada2        ;copy as non zp operand
                                sta adrl        ;new result since op1+carry=00+carry +op2=op2
                                inc adrh        ;result carry
                                bne tdad        ;iterate op2
                        tdad7
                                next_test
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
                                clc
                                cld
                                php
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after cld
                                clc
                                sed
                                php
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after sed
                                cld
                                plp
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                                plp
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                                clc
                                lda #hi bin_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo bin_rti_ret
                                pha
                                php
                                sed
                                lda #hi dec_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo dec_rti_ret
                                pha
                                php
                                cld
                                rti
                        dec_rti_ret
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                                rti
                        bin_rti_ret        
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
                            endif
                            
72cd : ad0002                   lda test_case
72d0 : c929                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
72d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
72d4 : a9f0                     lda #$f0        ;mark opcode testing complete
72d6 : 8d0002                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
72d9 : 4cd972          >        jmp *           ;test passed, no errors
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
72dc : 4c2040                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                        chkdad
                        ; decimal ADC / SBC zp
                                php             ;save carry for subtract
                                lda ad1
                                adc ad2         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2         ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad flags
                                plp
                        ; decimal ADC / SBC abs
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2        ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2        ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC #
                                php             ;save carry for subtract
                                lda ad2
                                sta ex_adci+1   ;set ADC # operand
                                lda ad1
                                jsr ex_adci     ;execute ADC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda sb2
                                sta ex_sbci+1   ;set SBC # operand
                                lda ad1
                                jsr ex_sbci     ;execute SBC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC zp,x
                                php             ;save carry for subtract
                                lda ad1
                                adc 0,x         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2-ad2,x   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,x
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-ad2,x  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-ad2,x  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,y
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-$ff,y  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-$ff,y  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (zp,x)
                                php             ;save carry for subtract
                                lda ad1
                                adc (lo adi2-ad2,x) ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (lo sbi2-ad2,x) ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (abs),y
                                php             ;save carry for subtract
                                lda ad1
                                adc (adiy2),y   ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (sbiy2),y   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
72df : a507             chkadd  lda adrf        ;add V-flag if overflow
72e1 : 2983                     and #$83        ;keep N-----ZC / clear V
72e3 : 48                       pha
72e4 : a503                     lda ad1         ;test sign unequal between operands
72e6 : 4504                     eor ad2
72e8 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
72ea : a503                     lda ad1         ;test sign equal between operands and result
72ec : 4505                     eor adrl
72ee : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
72f0 : 68                       pla
72f1 : 0940                     ora #$40        ;set V
72f3 : 48                       pha
72f4 : 68               ckad1   pla
72f5 : 8507                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
72f7 : 08                       php             ;save carry for subtract
72f8 : a503                     lda ad1
72fa : 6504                     adc ad2         ;perform add
72fc : 08                       php          
72fd : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
72ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
7301 : 68                       pla             ;check flags
7302 : 29c3                     and #$c3        ;mask NV----ZC
7304 : c507                     cmp adrf
                                trap_ne         ;bad flags
7306 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7308 : 28                       plp
7309 : 08                       php             ;save carry for next add
730a : a503                     lda ad1
730c : e508                     sbc sb2         ;perform subtract
730e : 08                       php          
730f : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
7311 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7313 : 68                       pla             ;check flags
7314 : 29c3                     and #$c3        ;mask NV----ZC
7316 : c507                     cmp adrf
                                trap_ne         ;bad flags
7318 : d0fe            >        bne *           ;failed not equal (non zero)
                        
731a : 28                       plp
                        ; binary ADC / SBC abs
731b : 08                       php             ;save carry for subtract
731c : a503                     lda ad1
731e : 6d0302                   adc ada2        ;perform add
7321 : 08                       php          
7322 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
7324 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7326 : 68                       pla             ;check flags
7327 : 29c3                     and #$c3        ;mask NV----ZC
7329 : c507                     cmp adrf
                                trap_ne         ;bad flags
732b : d0fe            >        bne *           ;failed not equal (non zero)
                        
732d : 28                       plp
732e : 08                       php             ;save carry for next add
732f : a503                     lda ad1
7331 : ed0402                   sbc sba2        ;perform subtract
7334 : 08                       php          
7335 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
7337 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7339 : 68                       pla             ;check flags
733a : 29c3                     and #$c3        ;mask NV----ZC
733c : c507                     cmp adrf
                                trap_ne         ;bad flags
733e : d0fe            >        bne *           ;failed not equal (non zero)
                        
7340 : 28                       plp
                        ; binary ADC / SBC #
7341 : 08                       php             ;save carry for subtract
7342 : a504                     lda ad2
7344 : 8d1302                   sta ex_adci+1   ;set ADC # operand
7347 : a503                     lda ad1
7349 : 201202                   jsr ex_adci     ;execute ADC # in RAM
734c : 08                       php          
734d : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
734f : d0fe            >        bne *           ;failed not equal (non zero)
                        
7351 : 68                       pla             ;check flags
7352 : 29c3                     and #$c3        ;mask NV----ZC
7354 : c507                     cmp adrf
                                trap_ne         ;bad flags
7356 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7358 : 28                       plp
7359 : 08                       php             ;save carry for next add
735a : a508                     lda sb2
735c : 8d1602                   sta ex_sbci+1   ;set SBC # operand
735f : a503                     lda ad1
7361 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
7364 : 08                       php          
7365 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
7367 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7369 : 68                       pla             ;check flags
736a : 29c3                     and #$c3        ;mask NV----ZC
736c : c507                     cmp adrf
                                trap_ne         ;bad flags
736e : d0fe            >        bne *           ;failed not equal (non zero)
                        
7370 : 28                       plp
                        ; binary ADC / SBC zp,x
7371 : 08                       php             ;save carry for subtract
7372 : a503                     lda ad1
7374 : 7500                     adc 0,x         ;perform add
7376 : 08                       php          
7377 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
7379 : d0fe            >        bne *           ;failed not equal (non zero)
                        
737b : 68                       pla             ;check flags
737c : 29c3                     and #$c3        ;mask NV----ZC
737e : c507                     cmp adrf
                                trap_ne         ;bad flags
7380 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7382 : 28                       plp
7383 : 08                       php             ;save carry for next add
7384 : a503                     lda ad1
7386 : f504                     sbc sb2-ad2,x   ;perform subtract
7388 : 08                       php          
7389 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
738b : d0fe            >        bne *           ;failed not equal (non zero)
                        
738d : 68                       pla             ;check flags
738e : 29c3                     and #$c3        ;mask NV----ZC
7390 : c507                     cmp adrf
                                trap_ne         ;bad flags
7392 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7394 : 28                       plp
                        ; binary ADC / SBC abs,x
7395 : 08                       php             ;save carry for subtract
7396 : a503                     lda ad1
7398 : 7dff01                   adc ada2-ad2,x  ;perform add
739b : 08                       php          
739c : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
739e : d0fe            >        bne *           ;failed not equal (non zero)
                        
73a0 : 68                       pla             ;check flags
73a1 : 29c3                     and #$c3        ;mask NV----ZC
73a3 : c507                     cmp adrf
                                trap_ne         ;bad flags
73a5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
73a7 : 28                       plp
73a8 : 08                       php             ;save carry for next add
73a9 : a503                     lda ad1
73ab : fd0002                   sbc sba2-ad2,x  ;perform subtract
73ae : 08                       php          
73af : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
73b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
73b3 : 68                       pla             ;check flags
73b4 : 29c3                     and #$c3        ;mask NV----ZC
73b6 : c507                     cmp adrf
                                trap_ne         ;bad flags
73b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
73ba : 28                       plp
                        ; binary ADC / SBC abs,y
73bb : 08                       php             ;save carry for subtract
73bc : a503                     lda ad1
73be : 790401                   adc ada2-$ff,y  ;perform add
73c1 : 08                       php          
73c2 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
73c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
73c6 : 68                       pla             ;check flags
73c7 : 29c3                     and #$c3        ;mask NV----ZC
73c9 : c507                     cmp adrf
                                trap_ne         ;bad flags
73cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
73cd : 28                       plp
73ce : 08                       php             ;save carry for next add
73cf : a503                     lda ad1
73d1 : f90501                   sbc sba2-$ff,y  ;perform subtract
73d4 : 08                       php          
73d5 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
73d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
73d9 : 68                       pla             ;check flags
73da : 29c3                     and #$c3        ;mask NV----ZC
73dc : c507                     cmp adrf
                                trap_ne         ;bad flags
73de : d0fe            >        bne *           ;failed not equal (non zero)
                        
73e0 : 28                       plp
                        ; binary ADC / SBC (zp,x)
73e1 : 08                       php             ;save carry for subtract
73e2 : a503                     lda ad1
73e4 : 6146                     adc (lo adi2-ad2,x) ;perform add
73e6 : 08                       php          
73e7 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
73e9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
73eb : 68                       pla             ;check flags
73ec : 29c3                     and #$c3        ;mask NV----ZC
73ee : c507                     cmp adrf
                                trap_ne         ;bad flags
73f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
73f2 : 28                       plp
73f3 : 08                       php             ;save carry for next add
73f4 : a503                     lda ad1
73f6 : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
73f8 : 08                       php          
73f9 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
73fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
73fd : 68                       pla             ;check flags
73fe : 29c3                     and #$c3        ;mask NV----ZC
7400 : c507                     cmp adrf
                                trap_ne         ;bad flags
7402 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7404 : 28                       plp
                        ; binary ADC / SBC (abs),y
7405 : 08                       php             ;save carry for subtract
7406 : a503                     lda ad1
7408 : 714e                     adc (adiy2),y   ;perform add
740a : 08                       php          
740b : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
740d : d0fe            >        bne *           ;failed not equal (non zero)
                        
740f : 68                       pla             ;check flags
7410 : 29c3                     and #$c3        ;mask NV----ZC
7412 : c507                     cmp adrf
                                trap_ne         ;bad flags
7414 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7416 : 28                       plp
7417 : 08                       php             ;save carry for next add
7418 : a503                     lda ad1
741a : f150                     sbc (sbiy2),y   ;perform subtract
741c : 08                       php          
741d : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
741f : d0fe            >        bne *           ;failed not equal (non zero)
                        
7421 : 68                       pla             ;check flags
7422 : 29c3                     and #$c3        ;mask NV----ZC
7424 : c507                     cmp adrf
                                trap_ne         ;bad flags
7426 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7428 : 28                       plp
7429 : 60                       rts
                        
                        ; target for the jump absolute test
742a : 88                       dey
742b : 88                       dey
742c :                  test_far
742c : 08                       php             ;either SP or Y count will fail, if we do not hit
742d : 88                       dey
742e : 88                       dey
742f : 88                       dey
7430 : 28                       plp
                                trap_cs         ;flags loaded?
7431 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
7433 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
7435 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
7437 : f0fe            >        beq *           ;failed equal (zero)
                        
7439 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
743b : d0fe            >        bne *           ;failed not equal (non zero)
                        
743d : e041                     cpx #'A'
                                trap_ne        
743f : d0fe            >        bne *           ;failed not equal (non zero)
                        
7441 : c04f                     cpy #('R'-3)
                                trap_ne
7443 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7445 : 48                       pha             ;save a,x
7446 : 8a                       txa
7447 : 48                       pha
7448 : ba                       tsx
7449 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
744b : d0fe            >        bne *           ;failed not equal (non zero)
                        
744d : 68                       pla             ;restore x
744e : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
744f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7451 : 48              >            pha         ;use stack to load status
7452 : 28              >            plp
                        
7453 : 68                       pla             ;restore a
7454 : e8                       inx             ;return registers with modifications
7455 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
7457 : 4c7345                   jmp far_ret
                                
                        ; target for the jump indirect test
                                align
745a : 6374             ptr_tst_ind dw test_ind
745c : c845             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
745e : 4c5e74          >        jmp *           ;failed anyway
                        
7461 : 88                       dey
7462 : 88                       dey
7463 :                  test_ind
7463 : 08                       php             ;either SP or Y count will fail, if we do not hit
7464 : 88                       dey
7465 : 88                       dey
7466 : 88                       dey
7467 : 28                       plp
                                trap_cs         ;flags loaded?
7468 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
746a : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
746c : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
746e : f0fe            >        beq *           ;failed equal (zero)
                        
7470 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
7472 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7474 : e04e                     cpx #'N'
                                trap_ne        
7476 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7478 : c041                     cpy #('D'-3)
                                trap_ne
747a : d0fe            >        bne *           ;failed not equal (non zero)
                        
747c : 48                       pha             ;save a,x
747d : 8a                       txa
747e : 48                       pha
747f : ba                       tsx
7480 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
7482 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7484 : 68                       pla             ;restore x
7485 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
7486 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7488 : 48              >            pha         ;use stack to load status
7489 : 28              >            plp
                        
748a : 68                       pla             ;restore a
748b : e8                       inx             ;return registers with modifications
748c : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
748e : 6c5c74                   jmp (ptr_ind_ret)
                                trap            ;runover protection
7491 : 4c9174          >        jmp *           ;failed anyway
                        
7494 : 4c2040                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump subroutine test
7497 : 88                       dey
7498 : 88                       dey
7499 :                  test_jsr
7499 : 08                       php             ;either SP or Y count will fail, if we do not hit
749a : 88                       dey
749b : 88                       dey
749c : 88                       dey
749d : 28                       plp
                                trap_cs         ;flags loaded?
749e : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
74a0 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
74a2 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
74a4 : f0fe            >        beq *           ;failed equal (zero)
                        
74a6 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
74a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
74aa : e053                     cpx #'S'
                                trap_ne        
74ac : d0fe            >        bne *           ;failed not equal (non zero)
                        
74ae : c04f                     cpy #('R'-3)
                                trap_ne
74b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
74b2 : 48                       pha             ;save a,x
74b3 : 8a                       txa
74b4 : 48                       pha       
74b5 : ba                       tsx             ;sp -4? (return addr,a,x)
74b6 : e0fb                     cpx #$fb
                                trap_ne
74b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
74ba : adff01                   lda $1ff        ;propper return on stack
74bd : c945                     cmp #hi(jsr_ret)
                                trap_ne
74bf : d0fe            >        bne *           ;failed not equal (non zero)
                        
74c1 : adfe01                   lda $1fe
74c4 : c9fe                     cmp #lo(jsr_ret)
                                trap_ne
74c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
74c8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
74ca : 48              >            pha         ;use stack to load status
74cb : 28              >            plp
                        
74cc : 68                       pla             ;pull x,a
74cd : aa                       tax
74ce : 68                       pla
74cf : e8                       inx             ;return registers with modifications
74d0 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
74d2 : 60                       rts
                                trap            ;runover protection
74d3 : 4cd374          >        jmp *           ;failed anyway
                        
74d6 : 4c2040                   jmp start       ;catastrophic error - cannot continue
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
74d9 :                  nmi_trap
                                trap            ;check stack for conditions at NMI
74d9 : 4cd974          >        jmp *           ;failed anyway
                        
74dc : 4c2040                   jmp start       ;catastrophic error - cannot continue
74df :                  res_trap
                                trap            ;unexpected RESET
74df : 4cdf74          >        jmp *           ;failed anyway
                        
74e2 : 4c2040                   jmp start       ;catastrophic error - cannot continue
                                
74e5 : 88                       dey
74e6 : 88                       dey
74e7 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
74e7 : 08                       php             ;either SP or Y count will fail, if we do not hit
74e8 : 88                       dey
74e9 : 88                       dey
74ea : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
74eb : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
74ed : f046                     beq break2
74ef : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
74f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
74f3 : e052                     cpx #'R'
                                trap_ne        
74f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
74f7 : c048                     cpy #'K'-3
                                trap_ne
74f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
74fb : 8500                     sta irq_a       ;save registers during break test
74fd : 8601                     stx irq_x
74ff : ba                       tsx             ;test break on stack
7500 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
7503 : 0908            >            ora #decmode        ;ignore decimal mode bit
7505 : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
7507 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7509 : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
750a : 0908            >            ora #decmode        ;ignore decimal mode bit
750c : c93c            >            cmp #(intdis |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
750e : d0fe            >        bne *           ;failed not equal (non zero)
                        
7510 : ba                       tsx
7511 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
7513 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7515 : adff01                   lda $1ff        ;propper return on stack
7518 : c946                     cmp #hi(brk_ret0)
                                trap_ne
751a : d0fe            >        bne *           ;failed not equal (non zero)
                        
751c : adfe01                   lda $1fe
751f : c935                     cmp #lo(brk_ret0)
                                trap_ne
7521 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag $ff
7523 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
7525 : 48                       pha
7526 : a601                     ldx irq_x
7528 : e8                       inx             ;return registers with modifications
7529 : a500                     lda irq_a
752b : 49aa                     eor #$aa
752d : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
752e : 40                       rti
                                trap            ;runover protection
752f : 4c2f75          >        jmp *           ;failed anyway
                        
7532 : 4c2040                   jmp start       ;catastrophic error - cannot continue
                                
7535 :                  break2                  ;BRK pass 2        
7535 : e0ad                     cpx #$ff-'R'
                                trap_ne        
7537 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7539 : c0b1                     cpy #$ff-'K'-3
                                trap_ne
753b : d0fe            >        bne *           ;failed not equal (non zero)
                        
753d : 8500                     sta irq_a       ;save registers during break test
753f : 8601                     stx irq_x
7541 : ba                       tsx             ;test break on stack
7542 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
7545 : 0908            >            ora #decmode        ;ignore decimal mode bit
7547 : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
7549 : d0fe            >        bne *           ;failed not equal (non zero)
                        
754b : 68                       pla
754c : 0908                     ora #decmode    ;ignore decmode cleared if 65c02
                                cmp_flag $ff    ;actual passed flags
754e : 0908            >            ora #decmode        ;ignore decimal mode bit
7550 : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
7552 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7554 : ba                       tsx
7555 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
7557 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7559 : adff01                   lda $1ff        ;propper return on stack
755c : c946                     cmp #hi(brk_ret1)
                                trap_ne
755e : d0fe            >        bne *           ;failed not equal (non zero)
                        
7560 : adfe01                   lda $1fe
7563 : c95d                     cmp #lo(brk_ret1)
                                trap_ne
7565 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag intdis
7567 : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
                        
7569 : 48                       pha      
756a : a601                     ldx irq_x
756c : e8                       inx             ;return registers with modifications
756d : a500                     lda irq_a
756f : 49aa                     eor #$aa
7571 : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
7572 : 40                       rti
                                trap            ;runover protection
7573 : 4c7375          >        jmp *           ;failed anyway
                        
7576 : 4c2040                   jmp start       ;catastrophic error - cannot continue
                        
                            if report = 1
                                include "report.i65"
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
7579 :                  zp_init
7579 : 8001             zps_    db  $80,1           ;additional shift pattern to test zero result & flag
757b : c3824100         zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
757f : 7f               zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
7580 : 001f7180         zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
7584 : 0fff7f80         zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
7588 : ff0f8f8f         zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
758c : 1802             ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
758e : 1902                     dw  abs1+1
7590 : 1a02                     dw  abs1+2
7592 : 1b02                     dw  abs1+3
7594 : 1c02                     dw  abs7f
7596 : 2001             inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
7598 : 0302             indt_   dw  abst            ;indirect pointer to store area in absolute memory
759a : 0402                     dw  abst+1
759c : 0502                     dw  abst+2
759e : 0602                     dw  abst+3
75a0 : 0b01             inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
75a2 : 5f02             indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
75a4 : 6002                     dw  absAN+1
75a6 : 6102                     dw  absAN+2
75a8 : 6202                     dw  absAN+3
75aa : 6302             indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
75ac : 6402                     dw  absEO+1
75ae : 6502                     dw  absEO+2
75b0 : 6602                     dw  absEO+3
75b2 : 5b02             indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
75b4 : 5c02                     dw  absOR+1
75b6 : 5d02                     dw  absOR+2
75b8 : 5e02                     dw  absOR+3
                        ;add/subtract indirect pointers
75ba : 0302             adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
75bc : 0402             sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
75be : 0401             adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
75c0 : 0501             sbiy2_  dw  sba2-$ff
75c2 :                  zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
75c2 :                  data_init
75c2 : 2900             ex_and_ and #0              ;execute immediate opcodes
75c4 : 60                       rts
75c5 : 4900             ex_eor_ eor #0              ;execute immediate opcodes
75c7 : 60                       rts
75c8 : 0900             ex_ora_ ora #0              ;execute immediate opcodes
75ca : 60                       rts
75cb : 6900             ex_adc_ adc #0              ;execute immediate opcodes
75cd : 60                       rts
75ce : e900             ex_sbc_ sbc #0              ;execute immediate opcodes
75d0 : 60                       rts
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
75d1 : c3824100         abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
75d5 : 7f               abs7f_  db  $7f             ;test pattern for compare
                        ;loads
75d6 : 80800002         fLDx_   db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
75da :                  rASL_                               ;expected result ASL & ROL -carry
75da : 000286048200     rROL_   db  0,2,$86,$04,$82,0
75e0 : 010387058301     rROLc_  db  1,3,$87,$05,$83,1       ;expected result ROL +carry
75e6 :                  rLSR_                               ;expected result LSR & ROR -carry
75e6 : 400061412000     rROR_   db  $40,0,$61,$41,$20,0
75ec : c080e1c1a080     rRORc_  db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
75f2 :                  fASL_                               ;expected flags for shifts
75f2 : 030081018002     fROL_   db  fzc,0,fnc,fc,fn,fz      ;no carry in
75f8 : 010081018000     fROLc_  db  fc,0,fnc,fc,fn,0        ;carry in 
75fe :                  fLSR_
75fe : 000301000102     fROR_   db  0,fzc,fc,0,fc,fz        ;no carry in
7604 : 808181808180     fRORc_  db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
760a : 7f80ff0001       rINC_   db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
760f : 0080800200       fINC_   db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
7614 : 001f7180         absOR_  db  0,$1f,$71,$80           ;test pattern for OR
7618 : 0fff7f80         absAN_  db  $0f,$ff,$7f,$80         ;test pattern for AND
761c : ff0f8f8f         absEO_  db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
7620 : 00f11f00         absORa_ db  0,$f1,$1f,0             ;test pattern for OR
7624 : f0ffffff         absANa_ db  $f0,$ff,$ff,$ff         ;test pattern for AND
7628 : fff0f00f         absEOa_ db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
762c : 00ff7f80         absrlo_ db  0,$ff,$7f,$80
7630 : 02800080         absflo_ db  fz,fn,0,fn
7634 :                  data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
7634 :                  vec_init
7634 : d974                     dw  nmi_trap
7636 : df74                     dw  res_trap
7638 : e774                     dw  irq_trap
fffa =                  vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
                                org $fffa       ;vectors
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                            endif
                        
fffa =                          end start
                                    
                        
No errors in pass 2.
Wrote binary from address $4020 through $7639.
Total size 13850 bytes.
Program start address is at $4020 (16416).
